
peloro1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000272c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002838  08002838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028a0  080028a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080028a0  080028a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028a0  080028a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028a4  080028a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080028a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08002918  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08002918  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076b6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000153e  00000000  00000000  0002774f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d8  00000000  00000000  00028c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000720  00000000  00000000  00029468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013ba8  00000000  00000000  00029b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006130  00000000  00000000  0003d730  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006c0b7  00000000  00000000  00043860  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002280  00000000  00000000  000af994  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002820 	.word	0x08002820

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002820 	.word	0x08002820

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08e      	sub	sp, #56	; 0x38
 8000160:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb61 	bl	8000828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f869 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f95b 	bl	8000424 <MX_GPIO_Init>
  MX_SPI1_Init();
 800016e:	f000 f8ab 	bl	80002c8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000172:	f000 f8df 	bl	8000334 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000176:	f000 f92b 	bl	80003d0 <MX_USART1_UART_Init>
  /* USER CODE END 2 */
 


  char str[32];   // Para a conversão de número para vector
  uint8_t buf_tx[3]= {0,0,0};
 800017a:	2300      	movs	r3, #0
 800017c:	723b      	strb	r3, [r7, #8]
 800017e:	2300      	movs	r3, #0
 8000180:	727b      	strb	r3, [r7, #9]
 8000182:	2300      	movs	r3, #0
 8000184:	72bb      	strb	r3, [r7, #10]
  uint8_t buf_rx[3]= {0,0,0};
 8000186:	2300      	movs	r3, #0
 8000188:	713b      	strb	r3, [r7, #4]
 800018a:	2300      	movs	r3, #0
 800018c:	717b      	strb	r3, [r7, #5]
 800018e:	2300      	movs	r3, #0
 8000190:	71bb      	strb	r3, [r7, #6]
  uint32_t y=0;
 8000192:	2300      	movs	r3, #0
 8000194:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)buf_tx, (uint8_t *)buf_rx, 3, HAL_MAX_DELAY);
 8000196:	1d3a      	adds	r2, r7, #4
 8000198:	f107 0108 	add.w	r1, r7, #8
 800019c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001a0:	9300      	str	r3, [sp, #0]
 80001a2:	2303      	movs	r3, #3
 80001a4:	4820      	ldr	r0, [pc, #128]	; (8000228 <main+0xcc>)
 80001a6:	f001 faae 	bl	8001706 <HAL_SPI_TransmitReceive>
	 y =  ((buf_rx[0]<<16)|(buf_rx[1]<<8)|(buf_rx[2]));
 80001aa:	793b      	ldrb	r3, [r7, #4]
 80001ac:	041a      	lsls	r2, r3, #16
 80001ae:	797b      	ldrb	r3, [r7, #5]
 80001b0:	021b      	lsls	r3, r3, #8
 80001b2:	4313      	orrs	r3, r2
 80001b4:	79ba      	ldrb	r2, [r7, #6]
 80001b6:	4313      	orrs	r3, r2
 80001b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	 y = GrayToBinary(y);
 80001ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80001bc:	f000 f8f0 	bl	80003a0 <GrayToBinary>
 80001c0:	62f8      	str	r0, [r7, #44]	; 0x2c

	 y = y >> 6;
 80001c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001c4:	099b      	lsrs	r3, r3, #6
 80001c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	 y = y & 0x1FFFF;
 80001c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001ca:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80001ce:	62fb      	str	r3, [r7, #44]	; 0x2c

	 //y=(y*360)/131072;

	 y = (y*3600)/131072;
 80001d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001d2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80001d6:	fb02 f303 	mul.w	r3, r2, r3
 80001da:	0c5b      	lsrs	r3, r3, #17
 80001dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	  snprintf(str, sizeof str, "%lu", y);
 80001de:	f107 000c 	add.w	r0, r7, #12
 80001e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001e4:	4a11      	ldr	r2, [pc, #68]	; (800022c <main+0xd0>)
 80001e6:	2120      	movs	r1, #32
 80001e8:	f001 fef4 	bl	8001fd4 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80001ec:	f107 030c 	add.w	r3, r7, #12
 80001f0:	4618      	mov	r0, r3
 80001f2:	f7ff ffab 	bl	800014c <strlen>
 80001f6:	4603      	mov	r3, r0
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	f107 010c 	add.w	r1, r7, #12
 80001fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000202:	480b      	ldr	r0, [pc, #44]	; (8000230 <main+0xd4>)
 8000204:	f001 fcf6 	bl	8001bf4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8000208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800020c:	2202      	movs	r2, #2
 800020e:	4909      	ldr	r1, [pc, #36]	; (8000234 <main+0xd8>)
 8000210:	4807      	ldr	r0, [pc, #28]	; (8000230 <main+0xd4>)
 8000212:	f001 fcef 	bl	8001bf4 <HAL_UART_Transmit>


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021a:	4807      	ldr	r0, [pc, #28]	; (8000238 <main+0xdc>)
 800021c:	f000 fdde 	bl	8000ddc <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000220:	2064      	movs	r0, #100	; 0x64
 8000222:	f000 fb63 	bl	80008ec <HAL_Delay>
  {
 8000226:	e7b6      	b.n	8000196 <main+0x3a>
 8000228:	20000130 	.word	0x20000130
 800022c:	08002838 	.word	0x08002838
 8000230:	200000f0 	.word	0x200000f0
 8000234:	0800283c 	.word	0x0800283c
 8000238:	40011000 	.word	0x40011000

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b090      	sub	sp, #64	; 0x40
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2228      	movs	r2, #40	; 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f001 feba 	bl	8001fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025e:	2301      	movs	r3, #1
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000266:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000270:	2302      	movs	r3, #2
 8000272:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800027e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0318 	add.w	r3, r7, #24
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fdc1 	bl	8000e0c <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000290:	f000 f920 	bl	80004d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000298:	2302      	movs	r3, #2
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 f82c 	bl	800130c <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ba:	f000 f90b 	bl	80004d4 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_SPI1_Init+0x64>)
 80002ce:	4a18      	ldr	r2, [pc, #96]	; (8000330 <MX_SPI1_Init+0x68>)
 80002d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002d2:	4b16      	ldr	r3, [pc, #88]	; (800032c <MX_SPI1_Init+0x64>)
 80002d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_SPI1_Init+0x64>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_SPI1_Init+0x64>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_SPI1_Init+0x64>)
 80002e8:	2202      	movs	r2, #2
 80002ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_SPI1_Init+0x64>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_SPI1_Init+0x64>)
 80002f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_SPI1_Init+0x64>)
 80002fc:	2228      	movs	r2, #40	; 0x28
 80002fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <MX_SPI1_Init+0x64>)
 8000302:	2200      	movs	r2, #0
 8000304:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_SPI1_Init+0x64>)
 8000308:	2200      	movs	r2, #0
 800030a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <MX_SPI1_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_SPI1_Init+0x64>)
 8000314:	220a      	movs	r2, #10
 8000316:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000318:	4804      	ldr	r0, [pc, #16]	; (800032c <MX_SPI1_Init+0x64>)
 800031a:	f001 f993 	bl	8001644 <HAL_SPI_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_SPI1_Init+0x60>


  {
    Error_Handler();
 8000324:	f000 f8d6 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000130 	.word	0x20000130
 8000330:	40013000 	.word	0x40013000

08000334 <MX_SPI2_Init>:
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000338:	4b17      	ldr	r3, [pc, #92]	; (8000398 <MX_SPI2_Init+0x64>)
 800033a:	4a18      	ldr	r2, [pc, #96]	; (800039c <MX_SPI2_Init+0x68>)
 800033c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <MX_SPI2_Init+0x64>)
 8000340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000344:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_SPI2_Init+0x64>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_SPI2_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_SPI2_Init+0x64>)
 8000354:	2202      	movs	r2, #2
 8000356:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_SPI2_Init+0x64>)
 800035a:	2201      	movs	r2, #1
 800035c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_SPI2_Init+0x64>)
 8000360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000364:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_SPI2_Init+0x64>)
 8000368:	2220      	movs	r2, #32
 800036a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_SPI2_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_SPI2_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <MX_SPI2_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_SPI2_Init+0x64>)
 8000380:	220a      	movs	r2, #10
 8000382:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_SPI2_Init+0x64>)
 8000386:	f001 f95d 	bl	8001644 <HAL_SPI_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000390:	f000 f8a0 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000098 	.word	0x20000098
 800039c:	40003800 	.word	0x40003800

080003a0 <GrayToBinary>:
  * @retval None
  */


uint32_t GrayToBinary(uint32_t num)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
    uint32_t mask = num >> 1;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	085b      	lsrs	r3, r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
    while (mask != 0)
 80003ae:	e006      	b.n	80003be <GrayToBinary+0x1e>
    {
        num = num ^ mask;
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	4053      	eors	r3, r2
 80003b6:	607b      	str	r3, [r7, #4]
        mask = mask >> 1;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	085b      	lsrs	r3, r3, #1
 80003bc:	60fb      	str	r3, [r7, #12]
    while (mask != 0)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d1f5      	bne.n	80003b0 <GrayToBinary+0x10>
    }
    return num;
 80003c4:	687b      	ldr	r3, [r7, #4]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <MX_USART1_UART_Init>:




static void MX_USART1_UART_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003d6:	4a12      	ldr	r2, [pc, #72]	; (8000420 <MX_USART1_UART_Init+0x50>)
 80003d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003f6:	220c      	movs	r2, #12
 80003f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_USART1_UART_Init+0x4c>)
 8000402:	2200      	movs	r2, #0
 8000404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <MX_USART1_UART_Init+0x4c>)
 8000408:	f001 fba7 	bl	8001b5a <HAL_UART_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000412:	f000 f85f 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000f0 	.word	0x200000f0
 8000420:	40013800 	.word	0x40013800

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <MX_GPIO_Init+0xa8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a23      	ldr	r2, [pc, #140]	; (80004cc <MX_GPIO_Init+0xa8>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b21      	ldr	r3, [pc, #132]	; (80004cc <MX_GPIO_Init+0xa8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0320 	and.w	r3, r3, #32
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <MX_GPIO_Init+0xa8>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a1d      	ldr	r2, [pc, #116]	; (80004cc <MX_GPIO_Init+0xa8>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_GPIO_Init+0xa8>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_GPIO_Init+0xa8>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a17      	ldr	r2, [pc, #92]	; (80004cc <MX_GPIO_Init+0xa8>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_GPIO_Init+0xa8>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <MX_GPIO_Init+0xa8>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a11      	ldr	r2, [pc, #68]	; (80004cc <MX_GPIO_Init+0xa8>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_GPIO_Init+0xa8>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0310 	and.w	r3, r3, #16
 8000494:	603b      	str	r3, [r7, #0]
 8000496:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049e:	480c      	ldr	r0, [pc, #48]	; (80004d0 <MX_GPIO_Init+0xac>)
 80004a0:	f000 fc84 	bl	8000dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	4619      	mov	r1, r3
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_GPIO_Init+0xac>)
 80004be:	f000 fb1b 	bl	8000af8 <HAL_GPIO_Init>




}
 80004c2:	bf00      	nop
 80004c4:	3720      	adds	r7, #32
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40011000 	.word	0x40011000

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_MspInit+0x40>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <HAL_MspInit+0x40>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_MspInit+0x40>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_MspInit+0x40>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_MspInit+0x40>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_MspInit+0x40>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000

08000524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	; 0x28
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 0318 	add.w	r3, r7, #24
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a37      	ldr	r2, [pc, #220]	; (800061c <HAL_SPI_MspInit+0xf8>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d130      	bne.n	80005a6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000544:	4b36      	ldr	r3, [pc, #216]	; (8000620 <HAL_SPI_MspInit+0xfc>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a35      	ldr	r2, [pc, #212]	; (8000620 <HAL_SPI_MspInit+0xfc>)
 800054a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b33      	ldr	r3, [pc, #204]	; (8000620 <HAL_SPI_MspInit+0xfc>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055c:	4b30      	ldr	r3, [pc, #192]	; (8000620 <HAL_SPI_MspInit+0xfc>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a2f      	ldr	r2, [pc, #188]	; (8000620 <HAL_SPI_MspInit+0xfc>)
 8000562:	f043 0304 	orr.w	r3, r3, #4
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b2d      	ldr	r3, [pc, #180]	; (8000620 <HAL_SPI_MspInit+0xfc>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0304 	and.w	r3, r3, #4
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000574:	23a0      	movs	r3, #160	; 0xa0
 8000576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800057c:	2303      	movs	r3, #3
 800057e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4619      	mov	r1, r3
 8000586:	4827      	ldr	r0, [pc, #156]	; (8000624 <HAL_SPI_MspInit+0x100>)
 8000588:	f000 fab6 	bl	8000af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800058c:	2340      	movs	r3, #64	; 0x40
 800058e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	4619      	mov	r1, r3
 800059e:	4821      	ldr	r0, [pc, #132]	; (8000624 <HAL_SPI_MspInit+0x100>)
 80005a0:	f000 faaa 	bl	8000af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80005a4:	e036      	b.n	8000614 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <HAL_SPI_MspInit+0x104>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d131      	bne.n	8000614 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <HAL_SPI_MspInit+0xfc>)
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	4a1a      	ldr	r2, [pc, #104]	; (8000620 <HAL_SPI_MspInit+0xfc>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	61d3      	str	r3, [r2, #28]
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <HAL_SPI_MspInit+0xfc>)
 80005be:	69db      	ldr	r3, [r3, #28]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_SPI_MspInit+0xfc>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <HAL_SPI_MspInit+0xfc>)
 80005ce:	f043 0308 	orr.w	r3, r3, #8
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_SPI_MspInit+0xfc>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0308 	and.w	r3, r3, #8
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80005e0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80005e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	4619      	mov	r1, r3
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <HAL_SPI_MspInit+0x108>)
 80005f6:	f000 fa7f 	bl	8000af8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	f107 0318 	add.w	r3, r7, #24
 800060c:	4619      	mov	r1, r3
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <HAL_SPI_MspInit+0x108>)
 8000610:	f000 fa72 	bl	8000af8 <HAL_GPIO_Init>
}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40013000 	.word	0x40013000
 8000620:	40021000 	.word	0x40021000
 8000624:	40010800 	.word	0x40010800
 8000628:	40003800 	.word	0x40003800
 800062c:	40010c00 	.word	0x40010c00

08000630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <HAL_UART_MspInit+0x8c>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d131      	bne.n	80006b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <HAL_UART_MspInit+0x90>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a1a      	ldr	r2, [pc, #104]	; (80006c0 <HAL_UART_MspInit+0x90>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <HAL_UART_MspInit+0x90>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_UART_MspInit+0x90>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <HAL_UART_MspInit+0x90>)
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_UART_MspInit+0x90>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000684:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068a:	2303      	movs	r3, #3
 800068c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	4619      	mov	r1, r3
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <HAL_UART_MspInit+0x94>)
 8000696:	f000 fa2f 	bl	8000af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800069a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800069e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <HAL_UART_MspInit+0x94>)
 80006b0:	f000 fa22 	bl	8000af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40013800 	.word	0x40013800
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010800 	.word	0x40010800

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <HardFault_Handler+0x4>

080006da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <MemManage_Handler+0x4>

080006e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <BusFault_Handler+0x4>

080006e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <UsageFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000714:	f000 f8ce 	bl	80008b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <_sbrk+0x50>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d102      	bne.n	8000732 <_sbrk+0x16>
		heap_end = &end;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <_sbrk+0x50>)
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <_sbrk+0x54>)
 8000730:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <_sbrk+0x50>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <_sbrk+0x50>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4413      	add	r3, r2
 8000740:	466a      	mov	r2, sp
 8000742:	4293      	cmp	r3, r2
 8000744:	d907      	bls.n	8000756 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000746:	f001 fc13 	bl	8001f70 <__errno>
 800074a:	4602      	mov	r2, r0
 800074c:	230c      	movs	r3, #12
 800074e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000754:	e006      	b.n	8000764 <_sbrk+0x48>
	}

	heap_end += incr;
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <_sbrk+0x50>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	4a03      	ldr	r2, [pc, #12]	; (800076c <_sbrk+0x50>)
 8000760:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000762:	68fb      	ldr	r3, [r7, #12]
}
 8000764:	4618      	mov	r0, r3
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000008c 	.word	0x2000008c
 8000770:	20000190 	.word	0x20000190

08000774 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <SystemInit+0x5c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <SystemInit+0x5c>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <SystemInit+0x5c>)
 8000786:	685a      	ldr	r2, [r3, #4]
 8000788:	4911      	ldr	r1, [pc, #68]	; (80007d0 <SystemInit+0x5c>)
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <SystemInit+0x60>)
 800078c:	4013      	ands	r3, r2
 800078e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <SystemInit+0x5c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <SystemInit+0x5c>)
 8000796:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800079a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800079e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <SystemInit+0x5c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <SystemInit+0x5c>)
 80007a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <SystemInit+0x5c>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <SystemInit+0x5c>)
 80007b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <SystemInit+0x5c>)
 80007ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SystemInit+0x64>)
 80007c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	40021000 	.word	0x40021000
 80007d4:	f8ff0000 	.word	0xf8ff0000
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007de:	e003      	b.n	80007e8 <LoopCopyDataInit>

080007e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007e6:	3104      	adds	r1, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007f0:	d3f6      	bcc.n	80007e0 <CopyDataInit>
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007f4:	e002      	b.n	80007fc <LoopFillZerobss>

080007f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007f8:	f842 3b04 	str.w	r3, [r2], #4

080007fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000800:	d3f9      	bcc.n	80007f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000802:	f7ff ffb7 	bl	8000774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000806:	f001 fbb9 	bl	8001f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080a:	f7ff fca7 	bl	800015c <main>
  bx lr
 800080e:	4770      	bx	lr
  ldr r3, =_sidata
 8000810:	080028a8 	.word	0x080028a8
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000818:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800081c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000820:	20000190 	.word	0x20000190

08000824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_2_IRQHandler>
	...

08000828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_Init+0x28>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_Init+0x28>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000838:	2003      	movs	r0, #3
 800083a:	f000 f929 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083e:	2000      	movs	r0, #0
 8000840:	f000 f808 	bl	8000854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000844:	f7ff fe4c 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40022000 	.word	0x40022000

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_InitTick+0x54>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_InitTick+0x58>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	fbb3 f3f1 	udiv	r3, r3, r1
 800086e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f933 	bl	8000ade <HAL_SYSTICK_Config>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e00e      	b.n	80008a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d80a      	bhi.n	800089e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000888:	2200      	movs	r2, #0
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000890:	f000 f909 	bl	8000aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <HAL_InitTick+0x5c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	e000      	b.n	80008a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000000 	.word	0x20000000
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000004 	.word	0x20000004

080008b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_IncTick+0x1c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_IncTick+0x20>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <HAL_IncTick+0x20>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000188 	.word	0x20000188

080008d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;
 80008dc:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <HAL_GetTick+0x10>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	20000188 	.word	0x20000188

080008ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f4:	f7ff fff0 	bl	80008d8 <HAL_GetTick>
 80008f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000904:	d005      	beq.n	8000912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_Delay+0x40>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4413      	add	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000912:	bf00      	nop
 8000914:	f7ff ffe0 	bl	80008d8 <HAL_GetTick>
 8000918:	4602      	mov	r2, r0
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	429a      	cmp	r2, r3
 8000922:	d8f7      	bhi.n	8000914 <HAL_Delay+0x28>
  {
  }
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000008 	.word	0x20000008

08000930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	60d3      	str	r3, [r2, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <__NVIC_GetPriorityGrouping+0x18>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	f003 0307 	and.w	r3, r3, #7
}
 8000986:	4618      	mov	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
         );
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	; 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a70:	f7ff ff90 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff49 	bl	8000930 <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff5e 	bl	8000978 <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff90 	bl	80009e8 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5f 	bl	8000994 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffb0 	bl	8000a4c <SysTick_Config>
 8000aec:	4603      	mov	r3, r0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b08b      	sub	sp, #44	; 0x2c
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0a:	e127      	b.n	8000d5c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	69fa      	ldr	r2, [r7, #28]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	f040 8116 	bne.w	8000d56 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2b12      	cmp	r3, #18
 8000b30:	d034      	beq.n	8000b9c <HAL_GPIO_Init+0xa4>
 8000b32:	2b12      	cmp	r3, #18
 8000b34:	d80d      	bhi.n	8000b52 <HAL_GPIO_Init+0x5a>
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d02b      	beq.n	8000b92 <HAL_GPIO_Init+0x9a>
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d804      	bhi.n	8000b48 <HAL_GPIO_Init+0x50>
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d031      	beq.n	8000ba6 <HAL_GPIO_Init+0xae>
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d01c      	beq.n	8000b80 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b46:	e048      	b.n	8000bda <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d043      	beq.n	8000bd4 <HAL_GPIO_Init+0xdc>
 8000b4c:	2b11      	cmp	r3, #17
 8000b4e:	d01b      	beq.n	8000b88 <HAL_GPIO_Init+0x90>
          break;
 8000b50:	e043      	b.n	8000bda <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b52:	4a89      	ldr	r2, [pc, #548]	; (8000d78 <HAL_GPIO_Init+0x280>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d026      	beq.n	8000ba6 <HAL_GPIO_Init+0xae>
 8000b58:	4a87      	ldr	r2, [pc, #540]	; (8000d78 <HAL_GPIO_Init+0x280>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d806      	bhi.n	8000b6c <HAL_GPIO_Init+0x74>
 8000b5e:	4a87      	ldr	r2, [pc, #540]	; (8000d7c <HAL_GPIO_Init+0x284>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d020      	beq.n	8000ba6 <HAL_GPIO_Init+0xae>
 8000b64:	4a86      	ldr	r2, [pc, #536]	; (8000d80 <HAL_GPIO_Init+0x288>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d01d      	beq.n	8000ba6 <HAL_GPIO_Init+0xae>
          break;
 8000b6a:	e036      	b.n	8000bda <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b6c:	4a85      	ldr	r2, [pc, #532]	; (8000d84 <HAL_GPIO_Init+0x28c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d019      	beq.n	8000ba6 <HAL_GPIO_Init+0xae>
 8000b72:	4a85      	ldr	r2, [pc, #532]	; (8000d88 <HAL_GPIO_Init+0x290>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d016      	beq.n	8000ba6 <HAL_GPIO_Init+0xae>
 8000b78:	4a84      	ldr	r2, [pc, #528]	; (8000d8c <HAL_GPIO_Init+0x294>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d013      	beq.n	8000ba6 <HAL_GPIO_Init+0xae>
          break;
 8000b7e:	e02c      	b.n	8000bda <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	623b      	str	r3, [r7, #32]
          break;
 8000b86:	e028      	b.n	8000bda <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	623b      	str	r3, [r7, #32]
          break;
 8000b90:	e023      	b.n	8000bda <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	3308      	adds	r3, #8
 8000b98:	623b      	str	r3, [r7, #32]
          break;
 8000b9a:	e01e      	b.n	8000bda <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	330c      	adds	r3, #12
 8000ba2:	623b      	str	r3, [r7, #32]
          break;
 8000ba4:	e019      	b.n	8000bda <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	623b      	str	r3, [r7, #32]
          break;
 8000bb2:	e012      	b.n	8000bda <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d105      	bne.n	8000bc8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	611a      	str	r2, [r3, #16]
          break;
 8000bc6:	e008      	b.n	8000bda <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69fa      	ldr	r2, [r7, #28]
 8000bd0:	615a      	str	r2, [r3, #20]
          break;
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
          break;
 8000bd8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	2bff      	cmp	r3, #255	; 0xff
 8000bde:	d801      	bhi.n	8000be4 <HAL_GPIO_Init+0xec>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	e001      	b.n	8000be8 <HAL_GPIO_Init+0xf0>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3304      	adds	r3, #4
 8000be8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	2bff      	cmp	r3, #255	; 0xff
 8000bee:	d802      	bhi.n	8000bf6 <HAL_GPIO_Init+0xfe>
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	e002      	b.n	8000bfc <HAL_GPIO_Init+0x104>
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	3b08      	subs	r3, #8
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	210f      	movs	r1, #15
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	6a39      	ldr	r1, [r7, #32]
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	431a      	orrs	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f000 8096 	beq.w	8000d56 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c2a:	4b59      	ldr	r3, [pc, #356]	; (8000d90 <HAL_GPIO_Init+0x298>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	4a58      	ldr	r2, [pc, #352]	; (8000d90 <HAL_GPIO_Init+0x298>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6193      	str	r3, [r2, #24]
 8000c36:	4b56      	ldr	r3, [pc, #344]	; (8000d90 <HAL_GPIO_Init+0x298>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c42:	4a54      	ldr	r2, [pc, #336]	; (8000d94 <HAL_GPIO_Init+0x29c>)
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	3302      	adds	r3, #2
 8000c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	220f      	movs	r2, #15
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	4013      	ands	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a4b      	ldr	r2, [pc, #300]	; (8000d98 <HAL_GPIO_Init+0x2a0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d013      	beq.n	8000c96 <HAL_GPIO_Init+0x19e>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a4a      	ldr	r2, [pc, #296]	; (8000d9c <HAL_GPIO_Init+0x2a4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d00d      	beq.n	8000c92 <HAL_GPIO_Init+0x19a>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a49      	ldr	r2, [pc, #292]	; (8000da0 <HAL_GPIO_Init+0x2a8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d007      	beq.n	8000c8e <HAL_GPIO_Init+0x196>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a48      	ldr	r2, [pc, #288]	; (8000da4 <HAL_GPIO_Init+0x2ac>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_GPIO_Init+0x192>
 8000c86:	2303      	movs	r3, #3
 8000c88:	e006      	b.n	8000c98 <HAL_GPIO_Init+0x1a0>
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	e004      	b.n	8000c98 <HAL_GPIO_Init+0x1a0>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e002      	b.n	8000c98 <HAL_GPIO_Init+0x1a0>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <HAL_GPIO_Init+0x1a0>
 8000c96:	2300      	movs	r3, #0
 8000c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c9a:	f002 0203 	and.w	r2, r2, #3
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	4093      	lsls	r3, r2
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ca8:	493a      	ldr	r1, [pc, #232]	; (8000d94 <HAL_GPIO_Init+0x29c>)
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	089b      	lsrs	r3, r3, #2
 8000cae:	3302      	adds	r3, #2
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d006      	beq.n	8000cd0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cc2:	4b39      	ldr	r3, [pc, #228]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4938      	ldr	r1, [pc, #224]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	600b      	str	r3, [r1, #0]
 8000cce:	e006      	b.n	8000cde <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cd0:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	4933      	ldr	r1, [pc, #204]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	492e      	ldr	r1, [pc, #184]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	604b      	str	r3, [r1, #4]
 8000cf6:	e006      	b.n	8000d06 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cf8:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	4929      	ldr	r1, [pc, #164]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d006      	beq.n	8000d20 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	4924      	ldr	r1, [pc, #144]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	608b      	str	r3, [r1, #8]
 8000d1e:	e006      	b.n	8000d2e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d20:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	43db      	mvns	r3, r3
 8000d28:	491f      	ldr	r1, [pc, #124]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d006      	beq.n	8000d48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	491a      	ldr	r1, [pc, #104]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	60cb      	str	r3, [r1, #12]
 8000d46:	e006      	b.n	8000d56 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	4915      	ldr	r1, [pc, #84]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	3301      	adds	r3, #1
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	fa22 f303 	lsr.w	r3, r2, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f47f aed0 	bne.w	8000b0c <HAL_GPIO_Init+0x14>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	372c      	adds	r7, #44	; 0x2c
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	10210000 	.word	0x10210000
 8000d7c:	10110000 	.word	0x10110000
 8000d80:	10120000 	.word	0x10120000
 8000d84:	10310000 	.word	0x10310000
 8000d88:	10320000 	.word	0x10320000
 8000d8c:	10220000 	.word	0x10220000
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40010c00 	.word	0x40010c00
 8000da0:	40011000 	.word	0x40011000
 8000da4:	40011400 	.word	0x40011400
 8000da8:	40010400 	.word	0x40010400

08000dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
 8000db8:	4613      	mov	r3, r2
 8000dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dbc:	787b      	ldrb	r3, [r7, #1]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dc8:	e003      	b.n	8000dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	041a      	lsls	r2, r3, #16
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	611a      	str	r2, [r3, #16]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	4013      	ands	r3, r2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000df4:	887a      	ldrh	r2, [r7, #2]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000dfa:	e002      	b.n	8000e02 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dfc:	887a      	ldrh	r2, [r7, #2]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	611a      	str	r2, [r3, #16]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e26c      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 8087 	beq.w	8000f3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e2c:	4b92      	ldr	r3, [pc, #584]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d00c      	beq.n	8000e52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e38:	4b8f      	ldr	r3, [pc, #572]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 030c 	and.w	r3, r3, #12
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d112      	bne.n	8000e6a <HAL_RCC_OscConfig+0x5e>
 8000e44:	4b8c      	ldr	r3, [pc, #560]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e50:	d10b      	bne.n	8000e6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e52:	4b89      	ldr	r3, [pc, #548]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d06c      	beq.n	8000f38 <HAL_RCC_OscConfig+0x12c>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d168      	bne.n	8000f38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e246      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e72:	d106      	bne.n	8000e82 <HAL_RCC_OscConfig+0x76>
 8000e74:	4b80      	ldr	r3, [pc, #512]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a7f      	ldr	r2, [pc, #508]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e02e      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x98>
 8000e8a:	4b7b      	ldr	r3, [pc, #492]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a7a      	ldr	r2, [pc, #488]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4b78      	ldr	r3, [pc, #480]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a77      	ldr	r2, [pc, #476]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e01d      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0xbc>
 8000eae:	4b72      	ldr	r3, [pc, #456]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a71      	ldr	r2, [pc, #452]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b6f      	ldr	r3, [pc, #444]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a6e      	ldr	r2, [pc, #440]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e00b      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000ec8:	4b6b      	ldr	r3, [pc, #428]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a6a      	ldr	r2, [pc, #424]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b68      	ldr	r3, [pc, #416]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a67      	ldr	r2, [pc, #412]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ede:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d013      	beq.n	8000f10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fcf6 	bl	80008d8 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fcf2 	bl	80008d8 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e1fa      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f02:	4b5d      	ldr	r3, [pc, #372]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0xe4>
 8000f0e:	e014      	b.n	8000f3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fce2 	bl	80008d8 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fcde 	bl	80008d8 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e1e6      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2a:	4b53      	ldr	r3, [pc, #332]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x10c>
 8000f36:	e000      	b.n	8000f3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d063      	beq.n	800100e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f46:	4b4c      	ldr	r3, [pc, #304]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 030c 	and.w	r3, r3, #12
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00b      	beq.n	8000f6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f52:	4b49      	ldr	r3, [pc, #292]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d11c      	bne.n	8000f98 <HAL_RCC_OscConfig+0x18c>
 8000f5e:	4b46      	ldr	r3, [pc, #280]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d116      	bne.n	8000f98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6a:	4b43      	ldr	r3, [pc, #268]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d005      	beq.n	8000f82 <HAL_RCC_OscConfig+0x176>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d001      	beq.n	8000f82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e1ba      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f82:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4939      	ldr	r1, [pc, #228]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	e03a      	b.n	800100e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d020      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa0:	4b36      	ldr	r3, [pc, #216]	; (800107c <HAL_RCC_OscConfig+0x270>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fc97 	bl	80008d8 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fc93 	bl	80008d8 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e19b      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4927      	ldr	r1, [pc, #156]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
 8000fe0:	e015      	b.n	800100e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <HAL_RCC_OscConfig+0x270>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc76 	bl	80008d8 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fc72 	bl	80008d8 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e17a      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d03a      	beq.n	8001090 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d019      	beq.n	8001056 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_RCC_OscConfig+0x274>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001028:	f7ff fc56 	bl	80008d8 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001030:	f7ff fc52 	bl	80008d8 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e15a      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800104e:	2001      	movs	r0, #1
 8001050:	f000 fada 	bl	8001608 <RCC_Delay>
 8001054:	e01c      	b.n	8001090 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_RCC_OscConfig+0x274>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105c:	f7ff fc3c 	bl	80008d8 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001062:	e00f      	b.n	8001084 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff fc38 	bl	80008d8 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d908      	bls.n	8001084 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e140      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000
 800107c:	42420000 	.word	0x42420000
 8001080:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001084:	4b9e      	ldr	r3, [pc, #632]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e9      	bne.n	8001064 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80a6 	beq.w	80011ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a2:	4b97      	ldr	r3, [pc, #604]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10d      	bne.n	80010ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b94      	ldr	r3, [pc, #592]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a93      	ldr	r2, [pc, #588]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b91      	ldr	r3, [pc, #580]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010c6:	2301      	movs	r3, #1
 80010c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ca:	4b8e      	ldr	r3, [pc, #568]	; (8001304 <HAL_RCC_OscConfig+0x4f8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d118      	bne.n	8001108 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010d6:	4b8b      	ldr	r3, [pc, #556]	; (8001304 <HAL_RCC_OscConfig+0x4f8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a8a      	ldr	r2, [pc, #552]	; (8001304 <HAL_RCC_OscConfig+0x4f8>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fbf9 	bl	80008d8 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ea:	f7ff fbf5 	bl	80008d8 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b64      	cmp	r3, #100	; 0x64
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e0fd      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fc:	4b81      	ldr	r3, [pc, #516]	; (8001304 <HAL_RCC_OscConfig+0x4f8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x312>
 8001110:	4b7b      	ldr	r3, [pc, #492]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4a7a      	ldr	r2, [pc, #488]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6213      	str	r3, [r2, #32]
 800111c:	e02d      	b.n	800117a <HAL_RCC_OscConfig+0x36e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0x334>
 8001126:	4b76      	ldr	r3, [pc, #472]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4a75      	ldr	r2, [pc, #468]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	6213      	str	r3, [r2, #32]
 8001132:	4b73      	ldr	r3, [pc, #460]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a72      	ldr	r2, [pc, #456]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001138:	f023 0304 	bic.w	r3, r3, #4
 800113c:	6213      	str	r3, [r2, #32]
 800113e:	e01c      	b.n	800117a <HAL_RCC_OscConfig+0x36e>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b05      	cmp	r3, #5
 8001146:	d10c      	bne.n	8001162 <HAL_RCC_OscConfig+0x356>
 8001148:	4b6d      	ldr	r3, [pc, #436]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	4a6c      	ldr	r2, [pc, #432]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6213      	str	r3, [r2, #32]
 8001154:	4b6a      	ldr	r3, [pc, #424]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4a69      	ldr	r2, [pc, #420]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6213      	str	r3, [r2, #32]
 8001160:	e00b      	b.n	800117a <HAL_RCC_OscConfig+0x36e>
 8001162:	4b67      	ldr	r3, [pc, #412]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4a66      	ldr	r2, [pc, #408]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	6213      	str	r3, [r2, #32]
 800116e:	4b64      	ldr	r3, [pc, #400]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4a63      	ldr	r2, [pc, #396]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001174:	f023 0304 	bic.w	r3, r3, #4
 8001178:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d015      	beq.n	80011ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001182:	f7ff fba9 	bl	80008d8 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001188:	e00a      	b.n	80011a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118a:	f7ff fba5 	bl	80008d8 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f241 3288 	movw	r2, #5000	; 0x1388
 8001198:	4293      	cmp	r3, r2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e0ab      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a0:	4b57      	ldr	r3, [pc, #348]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0ee      	beq.n	800118a <HAL_RCC_OscConfig+0x37e>
 80011ac:	e014      	b.n	80011d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ae:	f7ff fb93 	bl	80008d8 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b4:	e00a      	b.n	80011cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b6:	f7ff fb8f 	bl	80008d8 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e095      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011cc:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1ee      	bne.n	80011b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d105      	bne.n	80011ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011de:	4b48      	ldr	r3, [pc, #288]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a47      	ldr	r2, [pc, #284]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 80011e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8081 	beq.w	80012f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f4:	4b42      	ldr	r3, [pc, #264]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d061      	beq.n	80012c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d146      	bne.n	8001296 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001208:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <HAL_RCC_OscConfig+0x4fc>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120e:	f7ff fb63 	bl	80008d8 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001216:	f7ff fb5f 	bl	80008d8 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e067      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001228:	4b35      	ldr	r3, [pc, #212]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f0      	bne.n	8001216 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d108      	bne.n	8001250 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	492d      	ldr	r1, [pc, #180]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a19      	ldr	r1, [r3, #32]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	430b      	orrs	r3, r1
 8001262:	4927      	ldr	r1, [pc, #156]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001268:	4b27      	ldr	r3, [pc, #156]	; (8001308 <HAL_RCC_OscConfig+0x4fc>)
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126e:	f7ff fb33 	bl	80008d8 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001276:	f7ff fb2f 	bl	80008d8 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e037      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x46a>
 8001294:	e02f      	b.n	80012f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_RCC_OscConfig+0x4fc>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb1c 	bl	80008d8 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fb18 	bl	80008d8 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e020      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x498>
 80012c2:	e018      	b.n	80012f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e013      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000
 8001304:	40007000 	.word	0x40007000
 8001308:	42420060 	.word	0x42420060

0800130c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0d0      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001320:	4b6a      	ldr	r3, [pc, #424]	; (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d910      	bls.n	8001350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132e:	4b67      	ldr	r3, [pc, #412]	; (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 0207 	bic.w	r2, r3, #7
 8001336:	4965      	ldr	r1, [pc, #404]	; (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800133e:	4b63      	ldr	r3, [pc, #396]	; (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d001      	beq.n	8001350 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e0b8      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d020      	beq.n	800139e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001368:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4a58      	ldr	r2, [pc, #352]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001372:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001380:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4a52      	ldr	r2, [pc, #328]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800138a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800138c:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	494d      	ldr	r1, [pc, #308]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d040      	beq.n	800142c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d107      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d115      	bne.n	80013ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e07f      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d107      	bne.n	80013da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d109      	bne.n	80013ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e073      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013da:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e06b      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ea:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f023 0203 	bic.w	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4936      	ldr	r1, [pc, #216]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013fc:	f7ff fa6c 	bl	80008d8 <HAL_GetTick>
 8001400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001402:	e00a      	b.n	800141a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001404:	f7ff fa68 	bl	80008d8 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e053      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141a:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 020c 	and.w	r2, r3, #12
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	429a      	cmp	r2, r3
 800142a:	d1eb      	bne.n	8001404 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d210      	bcs.n	800145c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 0207 	bic.w	r2, r3, #7
 8001442:	4922      	ldr	r1, [pc, #136]	; (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e032      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	4916      	ldr	r1, [pc, #88]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	4313      	orrs	r3, r2
 8001478:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	490e      	ldr	r1, [pc, #56]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800149a:	f000 f821 	bl	80014e0 <HAL_RCC_GetSysClockFreq>
 800149e:	4601      	mov	r1, r0
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_RCC_ClockConfig+0x1c8>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	fa21 f303 	lsr.w	r3, r1, r3
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_RCC_ClockConfig+0x1cc>)
 80014b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_RCC_ClockConfig+0x1d0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f9ca 	bl	8000854 <HAL_InitTick>

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40021000 	.word	0x40021000
 80014d4:	08002854 	.word	0x08002854
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e0:	b490      	push	{r4, r7}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014e8:	1d3c      	adds	r4, r7, #4
 80014ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_RCC_GetSysClockFreq+0xb8>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b04      	cmp	r3, #4
 8001518:	d002      	beq.n	8001520 <HAL_RCC_GetSysClockFreq+0x40>
 800151a:	2b08      	cmp	r3, #8
 800151c:	d003      	beq.n	8001526 <HAL_RCC_GetSysClockFreq+0x46>
 800151e:	e02d      	b.n	800157c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001522:	623b      	str	r3, [r7, #32]
      break;
 8001524:	e02d      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	0c9b      	lsrs	r3, r3, #18
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001532:	4413      	add	r3, r2
 8001534:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001538:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	0c5b      	lsrs	r3, r3, #17
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001552:	4413      	add	r3, r2
 8001554:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001558:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_RCC_GetSysClockFreq+0xbc>)
 800155e:	fb02 f203 	mul.w	r2, r2, r3
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	fbb2 f3f3 	udiv	r3, r2, r3
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
 800156a:	e004      	b.n	8001576 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	623b      	str	r3, [r7, #32]
      break;
 800157a:	e002      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <HAL_RCC_GetSysClockFreq+0xbc>)
 800157e:	623b      	str	r3, [r7, #32]
      break;
 8001580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001582:	6a3b      	ldr	r3, [r7, #32]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bc90      	pop	{r4, r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	08002840 	.word	0x08002840
 8001594:	08002850 	.word	0x08002850
 8001598:	40021000 	.word	0x40021000
 800159c:	007a1200 	.word	0x007a1200
 80015a0:	003d0900 	.word	0x003d0900

080015a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a8:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000000 	.word	0x20000000

080015b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015bc:	f7ff fff2 	bl	80015a4 <HAL_RCC_GetHCLKFreq>
 80015c0:	4601      	mov	r1, r0
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	4a03      	ldr	r2, [pc, #12]	; (80015dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	08002864 	.word	0x08002864

080015e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015e4:	f7ff ffde 	bl	80015a4 <HAL_RCC_GetHCLKFreq>
 80015e8:	4601      	mov	r1, r0
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	0adb      	lsrs	r3, r3, #11
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015f6:	5cd3      	ldrb	r3, [r2, r3]
 80015f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	08002864 	.word	0x08002864

08001608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <RCC_Delay+0x34>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <RCC_Delay+0x38>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0a5b      	lsrs	r3, r3, #9
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001624:	bf00      	nop
  }
  while (Delay --);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	60fa      	str	r2, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f9      	bne.n	8001624 <RCC_Delay+0x1c>
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000000 	.word	0x20000000
 8001640:	10624dd3 	.word	0x10624dd3

08001644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e053      	b.n	80016fe <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d106      	bne.n	8001676 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7fe ff57 	bl	8000524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2202      	movs	r2, #2
 800167a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800168c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	ea42 0103 	orr.w	r1, r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	0c1a      	lsrs	r2, r3, #16
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f002 0204 	and.w	r2, r2, #4
 80016dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b08c      	sub	sp, #48	; 0x30
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001714:	2301      	movs	r3, #1
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_SPI_TransmitReceive+0x26>
 8001728:	2302      	movs	r3, #2
 800172a:	e18a      	b.n	8001a42 <HAL_SPI_TransmitReceive+0x33c>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001734:	f7ff f8d0 	bl	80008d8 <HAL_GetTick>
 8001738:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800174e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001752:	2b01      	cmp	r3, #1
 8001754:	d00f      	beq.n	8001776 <HAL_SPI_TransmitReceive+0x70>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800175c:	d107      	bne.n	800176e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <HAL_SPI_TransmitReceive+0x68>
 8001766:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800176a:	2b04      	cmp	r3, #4
 800176c:	d003      	beq.n	8001776 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800176e:	2302      	movs	r3, #2
 8001770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001774:	e15b      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_SPI_TransmitReceive+0x82>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_SPI_TransmitReceive+0x82>
 8001782:	887b      	ldrh	r3, [r7, #2]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d103      	bne.n	8001790 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800178e:	e14e      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b04      	cmp	r3, #4
 800179a:	d003      	beq.n	80017a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2205      	movs	r2, #5
 80017a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	887a      	ldrh	r2, [r7, #2]
 80017ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	887a      	ldrh	r2, [r7, #2]
 80017c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e4:	2b40      	cmp	r3, #64	; 0x40
 80017e6:	d007      	beq.n	80017f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001800:	d178      	bne.n	80018f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <HAL_SPI_TransmitReceive+0x10a>
 800180a:	8b7b      	ldrh	r3, [r7, #26]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d166      	bne.n	80018de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	881a      	ldrh	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	1c9a      	adds	r2, r3, #2
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800182a:	b29b      	uxth	r3, r3
 800182c:	3b01      	subs	r3, #1
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001834:	e053      	b.n	80018de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b02      	cmp	r3, #2
 8001842:	d11b      	bne.n	800187c <HAL_SPI_TransmitReceive+0x176>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001848:	b29b      	uxth	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d016      	beq.n	800187c <HAL_SPI_TransmitReceive+0x176>
 800184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001850:	2b01      	cmp	r3, #1
 8001852:	d113      	bne.n	800187c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	881a      	ldrh	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	1c9a      	adds	r2, r3, #2
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800186e:	b29b      	uxth	r3, r3
 8001870:	3b01      	subs	r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b01      	cmp	r3, #1
 8001888:	d119      	bne.n	80018be <HAL_SPI_TransmitReceive+0x1b8>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800188e:	b29b      	uxth	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d014      	beq.n	80018be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189e:	b292      	uxth	r2, r2
 80018a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	1c9a      	adds	r2, r3, #2
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80018ba:	2301      	movs	r3, #1
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80018be:	f7ff f80b 	bl	80008d8 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d807      	bhi.n	80018de <HAL_SPI_TransmitReceive+0x1d8>
 80018ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018d4:	d003      	beq.n	80018de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80018dc:	e0a7      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1a6      	bne.n	8001836 <HAL_SPI_TransmitReceive+0x130>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1a1      	bne.n	8001836 <HAL_SPI_TransmitReceive+0x130>
 80018f2:	e07c      	b.n	80019ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <HAL_SPI_TransmitReceive+0x1fc>
 80018fc:	8b7b      	ldrh	r3, [r7, #26]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d16b      	bne.n	80019da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	330c      	adds	r3, #12
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800191e:	b29b      	uxth	r3, r3
 8001920:	3b01      	subs	r3, #1
 8001922:	b29a      	uxth	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001928:	e057      	b.n	80019da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b02      	cmp	r3, #2
 8001936:	d11c      	bne.n	8001972 <HAL_SPI_TransmitReceive+0x26c>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800193c:	b29b      	uxth	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d017      	beq.n	8001972 <HAL_SPI_TransmitReceive+0x26c>
 8001942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001944:	2b01      	cmp	r3, #1
 8001946:	d114      	bne.n	8001972 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	330c      	adds	r3, #12
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001964:	b29b      	uxth	r3, r3
 8001966:	3b01      	subs	r3, #1
 8001968:	b29a      	uxth	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b01      	cmp	r3, #1
 800197e:	d119      	bne.n	80019b4 <HAL_SPI_TransmitReceive+0x2ae>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001984:	b29b      	uxth	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d014      	beq.n	80019b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80019b0:	2301      	movs	r3, #1
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80019b4:	f7fe ff90 	bl	80008d8 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d803      	bhi.n	80019cc <HAL_SPI_TransmitReceive+0x2c6>
 80019c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019ca:	d102      	bne.n	80019d2 <HAL_SPI_TransmitReceive+0x2cc>
 80019cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d103      	bne.n	80019da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80019d8:	e029      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019de:	b29b      	uxth	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1a2      	bne.n	800192a <HAL_SPI_TransmitReceive+0x224>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d19d      	bne.n	800192a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80019ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f893 	bl	8001b1e <SPI_EndRxTxTransaction>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2220      	movs	r2, #32
 8001a08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001a0a:	e010      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10b      	bne.n	8001a2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	e000      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001a2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3730      	adds	r7, #48	; 0x30
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4613      	mov	r3, r2
 8001a58:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a5a:	e04c      	b.n	8001af6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a62:	d048      	beq.n	8001af6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001a64:	f7fe ff38 	bl	80008d8 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d902      	bls.n	8001a7a <SPI_WaitFlagStateUntilTimeout+0x30>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d13d      	bne.n	8001af6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a92:	d111      	bne.n	8001ab8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9c:	d004      	beq.n	8001aa8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa6:	d107      	bne.n	8001ab8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ab6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac0:	d10f      	bne.n	8001ae2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ae0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e00f      	b.n	8001b16 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4013      	ands	r3, r2
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	bf0c      	ite	eq
 8001b06:	2301      	moveq	r3, #1
 8001b08:	2300      	movne	r3, #0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1a3      	bne.n	8001a5c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af02      	add	r7, sp, #8
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2200      	movs	r2, #0
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff ff88 	bl	8001a4a <SPI_WaitFlagStateUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	f043 0220 	orr.w	r2, r3, #32
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e03f      	b.n	8001bec <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d106      	bne.n	8001b86 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7fe fd55 	bl	8000630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2224      	movs	r2, #36	; 0x24
 8001b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b9c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f90c 	bl	8001dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bb2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bc2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	f040 8083 	bne.w	8001d1c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <HAL_UART_Transmit+0x2e>
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e07b      	b.n	8001d1e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_UART_Transmit+0x40>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e074      	b.n	8001d1e <HAL_UART_Transmit+0x12a>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2221      	movs	r2, #33	; 0x21
 8001c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c4a:	f7fe fe45 	bl	80008d8 <HAL_GetTick>
 8001c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	88fa      	ldrh	r2, [r7, #6]
 8001c54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	88fa      	ldrh	r2, [r7, #6]
 8001c5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c5c:	e042      	b.n	8001ce4 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c74:	d122      	bne.n	8001cbc <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f850 	bl	8001d26 <UART_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e046      	b.n	8001d1e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ca2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d103      	bne.n	8001cb4 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	3302      	adds	r3, #2
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	e017      	b.n	8001ce4 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	e013      	b.n	8001ce4 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f82d 	bl	8001d26 <UART_WaitOnFlagUntilTimeout>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e023      	b.n	8001d1e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	60ba      	str	r2, [r7, #8]
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1b7      	bne.n	8001c5e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2140      	movs	r1, #64	; 0x40
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f814 	bl	8001d26 <UART_WaitOnFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e00a      	b.n	8001d1e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e000      	b.n	8001d1e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
  }
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	4613      	mov	r3, r2
 8001d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d36:	e02c      	b.n	8001d92 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d3e:	d028      	beq.n	8001d92 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d46:	f7fe fdc7 	bl	80008d8 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d21d      	bcs.n	8001d92 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d64:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695a      	ldr	r2, [r3, #20]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e00f      	b.n	8001db2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	bf0c      	ite	eq
 8001da2:	2301      	moveq	r3, #1
 8001da4:	2300      	movne	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d0c3      	beq.n	8001d38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001df6:	f023 030c 	bic.w	r3, r3, #12
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	68f9      	ldr	r1, [r7, #12]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <UART_SetConfig+0x1ac>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d14e      	bne.n	8001ec2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e24:	f7ff fbdc 	bl	80015e0 <HAL_RCC_GetPCLK2Freq>
 8001e28:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	009a      	lsls	r2, r3, #2
 8001e34:	441a      	add	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	4a4a      	ldr	r2, [pc, #296]	; (8001f6c <UART_SetConfig+0x1b0>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	0119      	lsls	r1, r3, #4
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	009a      	lsls	r2, r3, #2
 8001e54:	441a      	add	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e60:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <UART_SetConfig+0x1b0>)
 8001e62:	fba3 0302 	umull	r0, r3, r3, r2
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2064      	movs	r0, #100	; 0x64
 8001e6a:	fb00 f303 	mul.w	r3, r0, r3
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	3332      	adds	r3, #50	; 0x32
 8001e74:	4a3d      	ldr	r2, [pc, #244]	; (8001f6c <UART_SetConfig+0x1b0>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e80:	4419      	add	r1, r3
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009a      	lsls	r2, r3, #2
 8001e8c:	441a      	add	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e98:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <UART_SetConfig+0x1b0>)
 8001e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2064      	movs	r0, #100	; 0x64
 8001ea2:	fb00 f303 	mul.w	r3, r0, r3
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	3332      	adds	r3, #50	; 0x32
 8001eac:	4a2f      	ldr	r2, [pc, #188]	; (8001f6c <UART_SetConfig+0x1b0>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	f003 020f 	and.w	r2, r3, #15
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	440a      	add	r2, r1
 8001ebe:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001ec0:	e04d      	b.n	8001f5e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ec2:	f7ff fb79 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
 8001ec6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	009a      	lsls	r2, r3, #2
 8001ed2:	441a      	add	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ede:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <UART_SetConfig+0x1b0>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	0119      	lsls	r1, r3, #4
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	009a      	lsls	r2, r3, #2
 8001ef2:	441a      	add	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <UART_SetConfig+0x1b0>)
 8001f00:	fba3 0302 	umull	r0, r3, r3, r2
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	2064      	movs	r0, #100	; 0x64
 8001f08:	fb00 f303 	mul.w	r3, r0, r3
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	3332      	adds	r3, #50	; 0x32
 8001f12:	4a16      	ldr	r2, [pc, #88]	; (8001f6c <UART_SetConfig+0x1b0>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f1e:	4419      	add	r1, r3
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	009a      	lsls	r2, r3, #2
 8001f2a:	441a      	add	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <UART_SetConfig+0x1b0>)
 8001f38:	fba3 0302 	umull	r0, r3, r3, r2
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	2064      	movs	r0, #100	; 0x64
 8001f40:	fb00 f303 	mul.w	r3, r0, r3
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	3332      	adds	r3, #50	; 0x32
 8001f4a:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <UART_SetConfig+0x1b0>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	f003 020f 	and.w	r2, r3, #15
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	440a      	add	r2, r1
 8001f5c:	609a      	str	r2, [r3, #8]
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	51eb851f 	.word	0x51eb851f

08001f70 <__errno>:
 8001f70:	4b01      	ldr	r3, [pc, #4]	; (8001f78 <__errno+0x8>)
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	2000000c 	.word	0x2000000c

08001f7c <__libc_init_array>:
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	2500      	movs	r5, #0
 8001f80:	4e0c      	ldr	r6, [pc, #48]	; (8001fb4 <__libc_init_array+0x38>)
 8001f82:	4c0d      	ldr	r4, [pc, #52]	; (8001fb8 <__libc_init_array+0x3c>)
 8001f84:	1ba4      	subs	r4, r4, r6
 8001f86:	10a4      	asrs	r4, r4, #2
 8001f88:	42a5      	cmp	r5, r4
 8001f8a:	d109      	bne.n	8001fa0 <__libc_init_array+0x24>
 8001f8c:	f000 fc48 	bl	8002820 <_init>
 8001f90:	2500      	movs	r5, #0
 8001f92:	4e0a      	ldr	r6, [pc, #40]	; (8001fbc <__libc_init_array+0x40>)
 8001f94:	4c0a      	ldr	r4, [pc, #40]	; (8001fc0 <__libc_init_array+0x44>)
 8001f96:	1ba4      	subs	r4, r4, r6
 8001f98:	10a4      	asrs	r4, r4, #2
 8001f9a:	42a5      	cmp	r5, r4
 8001f9c:	d105      	bne.n	8001faa <__libc_init_array+0x2e>
 8001f9e:	bd70      	pop	{r4, r5, r6, pc}
 8001fa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fa4:	4798      	blx	r3
 8001fa6:	3501      	adds	r5, #1
 8001fa8:	e7ee      	b.n	8001f88 <__libc_init_array+0xc>
 8001faa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fae:	4798      	blx	r3
 8001fb0:	3501      	adds	r5, #1
 8001fb2:	e7f2      	b.n	8001f9a <__libc_init_array+0x1e>
 8001fb4:	080028a0 	.word	0x080028a0
 8001fb8:	080028a0 	.word	0x080028a0
 8001fbc:	080028a0 	.word	0x080028a0
 8001fc0:	080028a4 	.word	0x080028a4

08001fc4 <memset>:
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4402      	add	r2, r0
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d100      	bne.n	8001fce <memset+0xa>
 8001fcc:	4770      	bx	lr
 8001fce:	f803 1b01 	strb.w	r1, [r3], #1
 8001fd2:	e7f9      	b.n	8001fc8 <memset+0x4>

08001fd4 <sniprintf>:
 8001fd4:	b40c      	push	{r2, r3}
 8001fd6:	b530      	push	{r4, r5, lr}
 8001fd8:	4b17      	ldr	r3, [pc, #92]	; (8002038 <sniprintf+0x64>)
 8001fda:	1e0c      	subs	r4, r1, #0
 8001fdc:	b09d      	sub	sp, #116	; 0x74
 8001fde:	681d      	ldr	r5, [r3, #0]
 8001fe0:	da08      	bge.n	8001ff4 <sniprintf+0x20>
 8001fe2:	238b      	movs	r3, #139	; 0x8b
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fe8:	602b      	str	r3, [r5, #0]
 8001fea:	b01d      	add	sp, #116	; 0x74
 8001fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ff0:	b002      	add	sp, #8
 8001ff2:	4770      	bx	lr
 8001ff4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001ff8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001ffc:	bf0c      	ite	eq
 8001ffe:	4623      	moveq	r3, r4
 8002000:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002004:	9304      	str	r3, [sp, #16]
 8002006:	9307      	str	r3, [sp, #28]
 8002008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800200c:	9002      	str	r0, [sp, #8]
 800200e:	9006      	str	r0, [sp, #24]
 8002010:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002014:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002016:	ab21      	add	r3, sp, #132	; 0x84
 8002018:	a902      	add	r1, sp, #8
 800201a:	4628      	mov	r0, r5
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	f000 f867 	bl	80020f0 <_svfiprintf_r>
 8002022:	1c43      	adds	r3, r0, #1
 8002024:	bfbc      	itt	lt
 8002026:	238b      	movlt	r3, #139	; 0x8b
 8002028:	602b      	strlt	r3, [r5, #0]
 800202a:	2c00      	cmp	r4, #0
 800202c:	d0dd      	beq.n	8001fea <sniprintf+0x16>
 800202e:	2200      	movs	r2, #0
 8002030:	9b02      	ldr	r3, [sp, #8]
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	e7d9      	b.n	8001fea <sniprintf+0x16>
 8002036:	bf00      	nop
 8002038:	2000000c 	.word	0x2000000c

0800203c <__ssputs_r>:
 800203c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002040:	688e      	ldr	r6, [r1, #8]
 8002042:	4682      	mov	sl, r0
 8002044:	429e      	cmp	r6, r3
 8002046:	460c      	mov	r4, r1
 8002048:	4690      	mov	r8, r2
 800204a:	4699      	mov	r9, r3
 800204c:	d837      	bhi.n	80020be <__ssputs_r+0x82>
 800204e:	898a      	ldrh	r2, [r1, #12]
 8002050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002054:	d031      	beq.n	80020ba <__ssputs_r+0x7e>
 8002056:	2302      	movs	r3, #2
 8002058:	6825      	ldr	r5, [r4, #0]
 800205a:	6909      	ldr	r1, [r1, #16]
 800205c:	1a6f      	subs	r7, r5, r1
 800205e:	6965      	ldr	r5, [r4, #20]
 8002060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002064:	fb95 f5f3 	sdiv	r5, r5, r3
 8002068:	f109 0301 	add.w	r3, r9, #1
 800206c:	443b      	add	r3, r7
 800206e:	429d      	cmp	r5, r3
 8002070:	bf38      	it	cc
 8002072:	461d      	movcc	r5, r3
 8002074:	0553      	lsls	r3, r2, #21
 8002076:	d530      	bpl.n	80020da <__ssputs_r+0x9e>
 8002078:	4629      	mov	r1, r5
 800207a:	f000 fb37 	bl	80026ec <_malloc_r>
 800207e:	4606      	mov	r6, r0
 8002080:	b950      	cbnz	r0, 8002098 <__ssputs_r+0x5c>
 8002082:	230c      	movs	r3, #12
 8002084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002088:	f8ca 3000 	str.w	r3, [sl]
 800208c:	89a3      	ldrh	r3, [r4, #12]
 800208e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002092:	81a3      	strh	r3, [r4, #12]
 8002094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002098:	463a      	mov	r2, r7
 800209a:	6921      	ldr	r1, [r4, #16]
 800209c:	f000 fab6 	bl	800260c <memcpy>
 80020a0:	89a3      	ldrh	r3, [r4, #12]
 80020a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80020a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020aa:	81a3      	strh	r3, [r4, #12]
 80020ac:	6126      	str	r6, [r4, #16]
 80020ae:	443e      	add	r6, r7
 80020b0:	6026      	str	r6, [r4, #0]
 80020b2:	464e      	mov	r6, r9
 80020b4:	6165      	str	r5, [r4, #20]
 80020b6:	1bed      	subs	r5, r5, r7
 80020b8:	60a5      	str	r5, [r4, #8]
 80020ba:	454e      	cmp	r6, r9
 80020bc:	d900      	bls.n	80020c0 <__ssputs_r+0x84>
 80020be:	464e      	mov	r6, r9
 80020c0:	4632      	mov	r2, r6
 80020c2:	4641      	mov	r1, r8
 80020c4:	6820      	ldr	r0, [r4, #0]
 80020c6:	f000 faac 	bl	8002622 <memmove>
 80020ca:	68a3      	ldr	r3, [r4, #8]
 80020cc:	2000      	movs	r0, #0
 80020ce:	1b9b      	subs	r3, r3, r6
 80020d0:	60a3      	str	r3, [r4, #8]
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	441e      	add	r6, r3
 80020d6:	6026      	str	r6, [r4, #0]
 80020d8:	e7dc      	b.n	8002094 <__ssputs_r+0x58>
 80020da:	462a      	mov	r2, r5
 80020dc:	f000 fb60 	bl	80027a0 <_realloc_r>
 80020e0:	4606      	mov	r6, r0
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d1e2      	bne.n	80020ac <__ssputs_r+0x70>
 80020e6:	6921      	ldr	r1, [r4, #16]
 80020e8:	4650      	mov	r0, sl
 80020ea:	f000 fab3 	bl	8002654 <_free_r>
 80020ee:	e7c8      	b.n	8002082 <__ssputs_r+0x46>

080020f0 <_svfiprintf_r>:
 80020f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f4:	461d      	mov	r5, r3
 80020f6:	898b      	ldrh	r3, [r1, #12]
 80020f8:	b09d      	sub	sp, #116	; 0x74
 80020fa:	061f      	lsls	r7, r3, #24
 80020fc:	4680      	mov	r8, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	4616      	mov	r6, r2
 8002102:	d50f      	bpl.n	8002124 <_svfiprintf_r+0x34>
 8002104:	690b      	ldr	r3, [r1, #16]
 8002106:	b96b      	cbnz	r3, 8002124 <_svfiprintf_r+0x34>
 8002108:	2140      	movs	r1, #64	; 0x40
 800210a:	f000 faef 	bl	80026ec <_malloc_r>
 800210e:	6020      	str	r0, [r4, #0]
 8002110:	6120      	str	r0, [r4, #16]
 8002112:	b928      	cbnz	r0, 8002120 <_svfiprintf_r+0x30>
 8002114:	230c      	movs	r3, #12
 8002116:	f8c8 3000 	str.w	r3, [r8]
 800211a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800211e:	e0c8      	b.n	80022b2 <_svfiprintf_r+0x1c2>
 8002120:	2340      	movs	r3, #64	; 0x40
 8002122:	6163      	str	r3, [r4, #20]
 8002124:	2300      	movs	r3, #0
 8002126:	9309      	str	r3, [sp, #36]	; 0x24
 8002128:	2320      	movs	r3, #32
 800212a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800212e:	2330      	movs	r3, #48	; 0x30
 8002130:	f04f 0b01 	mov.w	fp, #1
 8002134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002138:	9503      	str	r5, [sp, #12]
 800213a:	4637      	mov	r7, r6
 800213c:	463d      	mov	r5, r7
 800213e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002142:	b10b      	cbz	r3, 8002148 <_svfiprintf_r+0x58>
 8002144:	2b25      	cmp	r3, #37	; 0x25
 8002146:	d13e      	bne.n	80021c6 <_svfiprintf_r+0xd6>
 8002148:	ebb7 0a06 	subs.w	sl, r7, r6
 800214c:	d00b      	beq.n	8002166 <_svfiprintf_r+0x76>
 800214e:	4653      	mov	r3, sl
 8002150:	4632      	mov	r2, r6
 8002152:	4621      	mov	r1, r4
 8002154:	4640      	mov	r0, r8
 8002156:	f7ff ff71 	bl	800203c <__ssputs_r>
 800215a:	3001      	adds	r0, #1
 800215c:	f000 80a4 	beq.w	80022a8 <_svfiprintf_r+0x1b8>
 8002160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002162:	4453      	add	r3, sl
 8002164:	9309      	str	r3, [sp, #36]	; 0x24
 8002166:	783b      	ldrb	r3, [r7, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 809d 	beq.w	80022a8 <_svfiprintf_r+0x1b8>
 800216e:	2300      	movs	r3, #0
 8002170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002178:	9304      	str	r3, [sp, #16]
 800217a:	9307      	str	r3, [sp, #28]
 800217c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002180:	931a      	str	r3, [sp, #104]	; 0x68
 8002182:	462f      	mov	r7, r5
 8002184:	2205      	movs	r2, #5
 8002186:	f817 1b01 	ldrb.w	r1, [r7], #1
 800218a:	4850      	ldr	r0, [pc, #320]	; (80022cc <_svfiprintf_r+0x1dc>)
 800218c:	f000 fa30 	bl	80025f0 <memchr>
 8002190:	9b04      	ldr	r3, [sp, #16]
 8002192:	b9d0      	cbnz	r0, 80021ca <_svfiprintf_r+0xda>
 8002194:	06d9      	lsls	r1, r3, #27
 8002196:	bf44      	itt	mi
 8002198:	2220      	movmi	r2, #32
 800219a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800219e:	071a      	lsls	r2, r3, #28
 80021a0:	bf44      	itt	mi
 80021a2:	222b      	movmi	r2, #43	; 0x2b
 80021a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80021a8:	782a      	ldrb	r2, [r5, #0]
 80021aa:	2a2a      	cmp	r2, #42	; 0x2a
 80021ac:	d015      	beq.n	80021da <_svfiprintf_r+0xea>
 80021ae:	462f      	mov	r7, r5
 80021b0:	2000      	movs	r0, #0
 80021b2:	250a      	movs	r5, #10
 80021b4:	9a07      	ldr	r2, [sp, #28]
 80021b6:	4639      	mov	r1, r7
 80021b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021bc:	3b30      	subs	r3, #48	; 0x30
 80021be:	2b09      	cmp	r3, #9
 80021c0:	d94d      	bls.n	800225e <_svfiprintf_r+0x16e>
 80021c2:	b1b8      	cbz	r0, 80021f4 <_svfiprintf_r+0x104>
 80021c4:	e00f      	b.n	80021e6 <_svfiprintf_r+0xf6>
 80021c6:	462f      	mov	r7, r5
 80021c8:	e7b8      	b.n	800213c <_svfiprintf_r+0x4c>
 80021ca:	4a40      	ldr	r2, [pc, #256]	; (80022cc <_svfiprintf_r+0x1dc>)
 80021cc:	463d      	mov	r5, r7
 80021ce:	1a80      	subs	r0, r0, r2
 80021d0:	fa0b f000 	lsl.w	r0, fp, r0
 80021d4:	4318      	orrs	r0, r3
 80021d6:	9004      	str	r0, [sp, #16]
 80021d8:	e7d3      	b.n	8002182 <_svfiprintf_r+0x92>
 80021da:	9a03      	ldr	r2, [sp, #12]
 80021dc:	1d11      	adds	r1, r2, #4
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	9103      	str	r1, [sp, #12]
 80021e2:	2a00      	cmp	r2, #0
 80021e4:	db01      	blt.n	80021ea <_svfiprintf_r+0xfa>
 80021e6:	9207      	str	r2, [sp, #28]
 80021e8:	e004      	b.n	80021f4 <_svfiprintf_r+0x104>
 80021ea:	4252      	negs	r2, r2
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	9207      	str	r2, [sp, #28]
 80021f2:	9304      	str	r3, [sp, #16]
 80021f4:	783b      	ldrb	r3, [r7, #0]
 80021f6:	2b2e      	cmp	r3, #46	; 0x2e
 80021f8:	d10c      	bne.n	8002214 <_svfiprintf_r+0x124>
 80021fa:	787b      	ldrb	r3, [r7, #1]
 80021fc:	2b2a      	cmp	r3, #42	; 0x2a
 80021fe:	d133      	bne.n	8002268 <_svfiprintf_r+0x178>
 8002200:	9b03      	ldr	r3, [sp, #12]
 8002202:	3702      	adds	r7, #2
 8002204:	1d1a      	adds	r2, r3, #4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	9203      	str	r2, [sp, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	bfb8      	it	lt
 800220e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002212:	9305      	str	r3, [sp, #20]
 8002214:	4d2e      	ldr	r5, [pc, #184]	; (80022d0 <_svfiprintf_r+0x1e0>)
 8002216:	2203      	movs	r2, #3
 8002218:	7839      	ldrb	r1, [r7, #0]
 800221a:	4628      	mov	r0, r5
 800221c:	f000 f9e8 	bl	80025f0 <memchr>
 8002220:	b138      	cbz	r0, 8002232 <_svfiprintf_r+0x142>
 8002222:	2340      	movs	r3, #64	; 0x40
 8002224:	1b40      	subs	r0, r0, r5
 8002226:	fa03 f000 	lsl.w	r0, r3, r0
 800222a:	9b04      	ldr	r3, [sp, #16]
 800222c:	3701      	adds	r7, #1
 800222e:	4303      	orrs	r3, r0
 8002230:	9304      	str	r3, [sp, #16]
 8002232:	7839      	ldrb	r1, [r7, #0]
 8002234:	2206      	movs	r2, #6
 8002236:	4827      	ldr	r0, [pc, #156]	; (80022d4 <_svfiprintf_r+0x1e4>)
 8002238:	1c7e      	adds	r6, r7, #1
 800223a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800223e:	f000 f9d7 	bl	80025f0 <memchr>
 8002242:	2800      	cmp	r0, #0
 8002244:	d038      	beq.n	80022b8 <_svfiprintf_r+0x1c8>
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <_svfiprintf_r+0x1e8>)
 8002248:	bb13      	cbnz	r3, 8002290 <_svfiprintf_r+0x1a0>
 800224a:	9b03      	ldr	r3, [sp, #12]
 800224c:	3307      	adds	r3, #7
 800224e:	f023 0307 	bic.w	r3, r3, #7
 8002252:	3308      	adds	r3, #8
 8002254:	9303      	str	r3, [sp, #12]
 8002256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002258:	444b      	add	r3, r9
 800225a:	9309      	str	r3, [sp, #36]	; 0x24
 800225c:	e76d      	b.n	800213a <_svfiprintf_r+0x4a>
 800225e:	fb05 3202 	mla	r2, r5, r2, r3
 8002262:	2001      	movs	r0, #1
 8002264:	460f      	mov	r7, r1
 8002266:	e7a6      	b.n	80021b6 <_svfiprintf_r+0xc6>
 8002268:	2300      	movs	r3, #0
 800226a:	250a      	movs	r5, #10
 800226c:	4619      	mov	r1, r3
 800226e:	3701      	adds	r7, #1
 8002270:	9305      	str	r3, [sp, #20]
 8002272:	4638      	mov	r0, r7
 8002274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002278:	3a30      	subs	r2, #48	; 0x30
 800227a:	2a09      	cmp	r2, #9
 800227c:	d903      	bls.n	8002286 <_svfiprintf_r+0x196>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0c8      	beq.n	8002214 <_svfiprintf_r+0x124>
 8002282:	9105      	str	r1, [sp, #20]
 8002284:	e7c6      	b.n	8002214 <_svfiprintf_r+0x124>
 8002286:	fb05 2101 	mla	r1, r5, r1, r2
 800228a:	2301      	movs	r3, #1
 800228c:	4607      	mov	r7, r0
 800228e:	e7f0      	b.n	8002272 <_svfiprintf_r+0x182>
 8002290:	ab03      	add	r3, sp, #12
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4622      	mov	r2, r4
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <_svfiprintf_r+0x1ec>)
 8002298:	a904      	add	r1, sp, #16
 800229a:	4640      	mov	r0, r8
 800229c:	f3af 8000 	nop.w
 80022a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80022a4:	4681      	mov	r9, r0
 80022a6:	d1d6      	bne.n	8002256 <_svfiprintf_r+0x166>
 80022a8:	89a3      	ldrh	r3, [r4, #12]
 80022aa:	065b      	lsls	r3, r3, #25
 80022ac:	f53f af35 	bmi.w	800211a <_svfiprintf_r+0x2a>
 80022b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022b2:	b01d      	add	sp, #116	; 0x74
 80022b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022b8:	ab03      	add	r3, sp, #12
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	4622      	mov	r2, r4
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <_svfiprintf_r+0x1ec>)
 80022c0:	a904      	add	r1, sp, #16
 80022c2:	4640      	mov	r0, r8
 80022c4:	f000 f882 	bl	80023cc <_printf_i>
 80022c8:	e7ea      	b.n	80022a0 <_svfiprintf_r+0x1b0>
 80022ca:	bf00      	nop
 80022cc:	0800286c 	.word	0x0800286c
 80022d0:	08002872 	.word	0x08002872
 80022d4:	08002876 	.word	0x08002876
 80022d8:	00000000 	.word	0x00000000
 80022dc:	0800203d 	.word	0x0800203d

080022e0 <_printf_common>:
 80022e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022e4:	4691      	mov	r9, r2
 80022e6:	461f      	mov	r7, r3
 80022e8:	688a      	ldr	r2, [r1, #8]
 80022ea:	690b      	ldr	r3, [r1, #16]
 80022ec:	4606      	mov	r6, r0
 80022ee:	4293      	cmp	r3, r2
 80022f0:	bfb8      	it	lt
 80022f2:	4613      	movlt	r3, r2
 80022f4:	f8c9 3000 	str.w	r3, [r9]
 80022f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022fc:	460c      	mov	r4, r1
 80022fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002302:	b112      	cbz	r2, 800230a <_printf_common+0x2a>
 8002304:	3301      	adds	r3, #1
 8002306:	f8c9 3000 	str.w	r3, [r9]
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	0699      	lsls	r1, r3, #26
 800230e:	bf42      	ittt	mi
 8002310:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002314:	3302      	addmi	r3, #2
 8002316:	f8c9 3000 	strmi.w	r3, [r9]
 800231a:	6825      	ldr	r5, [r4, #0]
 800231c:	f015 0506 	ands.w	r5, r5, #6
 8002320:	d107      	bne.n	8002332 <_printf_common+0x52>
 8002322:	f104 0a19 	add.w	sl, r4, #25
 8002326:	68e3      	ldr	r3, [r4, #12]
 8002328:	f8d9 2000 	ldr.w	r2, [r9]
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	42ab      	cmp	r3, r5
 8002330:	dc29      	bgt.n	8002386 <_printf_common+0xa6>
 8002332:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002336:	6822      	ldr	r2, [r4, #0]
 8002338:	3300      	adds	r3, #0
 800233a:	bf18      	it	ne
 800233c:	2301      	movne	r3, #1
 800233e:	0692      	lsls	r2, r2, #26
 8002340:	d42e      	bmi.n	80023a0 <_printf_common+0xc0>
 8002342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002346:	4639      	mov	r1, r7
 8002348:	4630      	mov	r0, r6
 800234a:	47c0      	blx	r8
 800234c:	3001      	adds	r0, #1
 800234e:	d021      	beq.n	8002394 <_printf_common+0xb4>
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	68e5      	ldr	r5, [r4, #12]
 8002354:	f003 0306 	and.w	r3, r3, #6
 8002358:	2b04      	cmp	r3, #4
 800235a:	bf18      	it	ne
 800235c:	2500      	movne	r5, #0
 800235e:	f8d9 2000 	ldr.w	r2, [r9]
 8002362:	f04f 0900 	mov.w	r9, #0
 8002366:	bf08      	it	eq
 8002368:	1aad      	subeq	r5, r5, r2
 800236a:	68a3      	ldr	r3, [r4, #8]
 800236c:	6922      	ldr	r2, [r4, #16]
 800236e:	bf08      	it	eq
 8002370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002374:	4293      	cmp	r3, r2
 8002376:	bfc4      	itt	gt
 8002378:	1a9b      	subgt	r3, r3, r2
 800237a:	18ed      	addgt	r5, r5, r3
 800237c:	341a      	adds	r4, #26
 800237e:	454d      	cmp	r5, r9
 8002380:	d11a      	bne.n	80023b8 <_printf_common+0xd8>
 8002382:	2000      	movs	r0, #0
 8002384:	e008      	b.n	8002398 <_printf_common+0xb8>
 8002386:	2301      	movs	r3, #1
 8002388:	4652      	mov	r2, sl
 800238a:	4639      	mov	r1, r7
 800238c:	4630      	mov	r0, r6
 800238e:	47c0      	blx	r8
 8002390:	3001      	adds	r0, #1
 8002392:	d103      	bne.n	800239c <_printf_common+0xbc>
 8002394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800239c:	3501      	adds	r5, #1
 800239e:	e7c2      	b.n	8002326 <_printf_common+0x46>
 80023a0:	2030      	movs	r0, #48	; 0x30
 80023a2:	18e1      	adds	r1, r4, r3
 80023a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023ae:	4422      	add	r2, r4
 80023b0:	3302      	adds	r3, #2
 80023b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80023b6:	e7c4      	b.n	8002342 <_printf_common+0x62>
 80023b8:	2301      	movs	r3, #1
 80023ba:	4622      	mov	r2, r4
 80023bc:	4639      	mov	r1, r7
 80023be:	4630      	mov	r0, r6
 80023c0:	47c0      	blx	r8
 80023c2:	3001      	adds	r0, #1
 80023c4:	d0e6      	beq.n	8002394 <_printf_common+0xb4>
 80023c6:	f109 0901 	add.w	r9, r9, #1
 80023ca:	e7d8      	b.n	800237e <_printf_common+0x9e>

080023cc <_printf_i>:
 80023cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80023d4:	460c      	mov	r4, r1
 80023d6:	7e09      	ldrb	r1, [r1, #24]
 80023d8:	b085      	sub	sp, #20
 80023da:	296e      	cmp	r1, #110	; 0x6e
 80023dc:	4617      	mov	r7, r2
 80023de:	4606      	mov	r6, r0
 80023e0:	4698      	mov	r8, r3
 80023e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80023e4:	f000 80b3 	beq.w	800254e <_printf_i+0x182>
 80023e8:	d822      	bhi.n	8002430 <_printf_i+0x64>
 80023ea:	2963      	cmp	r1, #99	; 0x63
 80023ec:	d036      	beq.n	800245c <_printf_i+0x90>
 80023ee:	d80a      	bhi.n	8002406 <_printf_i+0x3a>
 80023f0:	2900      	cmp	r1, #0
 80023f2:	f000 80b9 	beq.w	8002568 <_printf_i+0x19c>
 80023f6:	2958      	cmp	r1, #88	; 0x58
 80023f8:	f000 8083 	beq.w	8002502 <_printf_i+0x136>
 80023fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002400:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002404:	e032      	b.n	800246c <_printf_i+0xa0>
 8002406:	2964      	cmp	r1, #100	; 0x64
 8002408:	d001      	beq.n	800240e <_printf_i+0x42>
 800240a:	2969      	cmp	r1, #105	; 0x69
 800240c:	d1f6      	bne.n	80023fc <_printf_i+0x30>
 800240e:	6820      	ldr	r0, [r4, #0]
 8002410:	6813      	ldr	r3, [r2, #0]
 8002412:	0605      	lsls	r5, r0, #24
 8002414:	f103 0104 	add.w	r1, r3, #4
 8002418:	d52a      	bpl.n	8002470 <_printf_i+0xa4>
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6011      	str	r1, [r2, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	da03      	bge.n	800242a <_printf_i+0x5e>
 8002422:	222d      	movs	r2, #45	; 0x2d
 8002424:	425b      	negs	r3, r3
 8002426:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800242a:	486f      	ldr	r0, [pc, #444]	; (80025e8 <_printf_i+0x21c>)
 800242c:	220a      	movs	r2, #10
 800242e:	e039      	b.n	80024a4 <_printf_i+0xd8>
 8002430:	2973      	cmp	r1, #115	; 0x73
 8002432:	f000 809d 	beq.w	8002570 <_printf_i+0x1a4>
 8002436:	d808      	bhi.n	800244a <_printf_i+0x7e>
 8002438:	296f      	cmp	r1, #111	; 0x6f
 800243a:	d020      	beq.n	800247e <_printf_i+0xb2>
 800243c:	2970      	cmp	r1, #112	; 0x70
 800243e:	d1dd      	bne.n	80023fc <_printf_i+0x30>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	f043 0320 	orr.w	r3, r3, #32
 8002446:	6023      	str	r3, [r4, #0]
 8002448:	e003      	b.n	8002452 <_printf_i+0x86>
 800244a:	2975      	cmp	r1, #117	; 0x75
 800244c:	d017      	beq.n	800247e <_printf_i+0xb2>
 800244e:	2978      	cmp	r1, #120	; 0x78
 8002450:	d1d4      	bne.n	80023fc <_printf_i+0x30>
 8002452:	2378      	movs	r3, #120	; 0x78
 8002454:	4865      	ldr	r0, [pc, #404]	; (80025ec <_printf_i+0x220>)
 8002456:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800245a:	e055      	b.n	8002508 <_printf_i+0x13c>
 800245c:	6813      	ldr	r3, [r2, #0]
 800245e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002462:	1d19      	adds	r1, r3, #4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6011      	str	r1, [r2, #0]
 8002468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800246c:	2301      	movs	r3, #1
 800246e:	e08c      	b.n	800258a <_printf_i+0x1be>
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002476:	6011      	str	r1, [r2, #0]
 8002478:	bf18      	it	ne
 800247a:	b21b      	sxthne	r3, r3
 800247c:	e7cf      	b.n	800241e <_printf_i+0x52>
 800247e:	6813      	ldr	r3, [r2, #0]
 8002480:	6825      	ldr	r5, [r4, #0]
 8002482:	1d18      	adds	r0, r3, #4
 8002484:	6010      	str	r0, [r2, #0]
 8002486:	0628      	lsls	r0, r5, #24
 8002488:	d501      	bpl.n	800248e <_printf_i+0xc2>
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	e002      	b.n	8002494 <_printf_i+0xc8>
 800248e:	0668      	lsls	r0, r5, #25
 8002490:	d5fb      	bpl.n	800248a <_printf_i+0xbe>
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	296f      	cmp	r1, #111	; 0x6f
 8002496:	bf14      	ite	ne
 8002498:	220a      	movne	r2, #10
 800249a:	2208      	moveq	r2, #8
 800249c:	4852      	ldr	r0, [pc, #328]	; (80025e8 <_printf_i+0x21c>)
 800249e:	2100      	movs	r1, #0
 80024a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024a4:	6865      	ldr	r5, [r4, #4]
 80024a6:	2d00      	cmp	r5, #0
 80024a8:	60a5      	str	r5, [r4, #8]
 80024aa:	f2c0 8095 	blt.w	80025d8 <_printf_i+0x20c>
 80024ae:	6821      	ldr	r1, [r4, #0]
 80024b0:	f021 0104 	bic.w	r1, r1, #4
 80024b4:	6021      	str	r1, [r4, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d13d      	bne.n	8002536 <_printf_i+0x16a>
 80024ba:	2d00      	cmp	r5, #0
 80024bc:	f040 808e 	bne.w	80025dc <_printf_i+0x210>
 80024c0:	4665      	mov	r5, ip
 80024c2:	2a08      	cmp	r2, #8
 80024c4:	d10b      	bne.n	80024de <_printf_i+0x112>
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	07db      	lsls	r3, r3, #31
 80024ca:	d508      	bpl.n	80024de <_printf_i+0x112>
 80024cc:	6923      	ldr	r3, [r4, #16]
 80024ce:	6862      	ldr	r2, [r4, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	bfde      	ittt	le
 80024d4:	2330      	movle	r3, #48	; 0x30
 80024d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80024de:	ebac 0305 	sub.w	r3, ip, r5
 80024e2:	6123      	str	r3, [r4, #16]
 80024e4:	f8cd 8000 	str.w	r8, [sp]
 80024e8:	463b      	mov	r3, r7
 80024ea:	aa03      	add	r2, sp, #12
 80024ec:	4621      	mov	r1, r4
 80024ee:	4630      	mov	r0, r6
 80024f0:	f7ff fef6 	bl	80022e0 <_printf_common>
 80024f4:	3001      	adds	r0, #1
 80024f6:	d14d      	bne.n	8002594 <_printf_i+0x1c8>
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024fc:	b005      	add	sp, #20
 80024fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002502:	4839      	ldr	r0, [pc, #228]	; (80025e8 <_printf_i+0x21c>)
 8002504:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002508:	6813      	ldr	r3, [r2, #0]
 800250a:	6821      	ldr	r1, [r4, #0]
 800250c:	1d1d      	adds	r5, r3, #4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6015      	str	r5, [r2, #0]
 8002512:	060a      	lsls	r2, r1, #24
 8002514:	d50b      	bpl.n	800252e <_printf_i+0x162>
 8002516:	07ca      	lsls	r2, r1, #31
 8002518:	bf44      	itt	mi
 800251a:	f041 0120 	orrmi.w	r1, r1, #32
 800251e:	6021      	strmi	r1, [r4, #0]
 8002520:	b91b      	cbnz	r3, 800252a <_printf_i+0x15e>
 8002522:	6822      	ldr	r2, [r4, #0]
 8002524:	f022 0220 	bic.w	r2, r2, #32
 8002528:	6022      	str	r2, [r4, #0]
 800252a:	2210      	movs	r2, #16
 800252c:	e7b7      	b.n	800249e <_printf_i+0xd2>
 800252e:	064d      	lsls	r5, r1, #25
 8002530:	bf48      	it	mi
 8002532:	b29b      	uxthmi	r3, r3
 8002534:	e7ef      	b.n	8002516 <_printf_i+0x14a>
 8002536:	4665      	mov	r5, ip
 8002538:	fbb3 f1f2 	udiv	r1, r3, r2
 800253c:	fb02 3311 	mls	r3, r2, r1, r3
 8002540:	5cc3      	ldrb	r3, [r0, r3]
 8002542:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002546:	460b      	mov	r3, r1
 8002548:	2900      	cmp	r1, #0
 800254a:	d1f5      	bne.n	8002538 <_printf_i+0x16c>
 800254c:	e7b9      	b.n	80024c2 <_printf_i+0xf6>
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	6825      	ldr	r5, [r4, #0]
 8002552:	1d18      	adds	r0, r3, #4
 8002554:	6961      	ldr	r1, [r4, #20]
 8002556:	6010      	str	r0, [r2, #0]
 8002558:	0628      	lsls	r0, r5, #24
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	d501      	bpl.n	8002562 <_printf_i+0x196>
 800255e:	6019      	str	r1, [r3, #0]
 8002560:	e002      	b.n	8002568 <_printf_i+0x19c>
 8002562:	066a      	lsls	r2, r5, #25
 8002564:	d5fb      	bpl.n	800255e <_printf_i+0x192>
 8002566:	8019      	strh	r1, [r3, #0]
 8002568:	2300      	movs	r3, #0
 800256a:	4665      	mov	r5, ip
 800256c:	6123      	str	r3, [r4, #16]
 800256e:	e7b9      	b.n	80024e4 <_printf_i+0x118>
 8002570:	6813      	ldr	r3, [r2, #0]
 8002572:	1d19      	adds	r1, r3, #4
 8002574:	6011      	str	r1, [r2, #0]
 8002576:	681d      	ldr	r5, [r3, #0]
 8002578:	6862      	ldr	r2, [r4, #4]
 800257a:	2100      	movs	r1, #0
 800257c:	4628      	mov	r0, r5
 800257e:	f000 f837 	bl	80025f0 <memchr>
 8002582:	b108      	cbz	r0, 8002588 <_printf_i+0x1bc>
 8002584:	1b40      	subs	r0, r0, r5
 8002586:	6060      	str	r0, [r4, #4]
 8002588:	6863      	ldr	r3, [r4, #4]
 800258a:	6123      	str	r3, [r4, #16]
 800258c:	2300      	movs	r3, #0
 800258e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002592:	e7a7      	b.n	80024e4 <_printf_i+0x118>
 8002594:	6923      	ldr	r3, [r4, #16]
 8002596:	462a      	mov	r2, r5
 8002598:	4639      	mov	r1, r7
 800259a:	4630      	mov	r0, r6
 800259c:	47c0      	blx	r8
 800259e:	3001      	adds	r0, #1
 80025a0:	d0aa      	beq.n	80024f8 <_printf_i+0x12c>
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	079b      	lsls	r3, r3, #30
 80025a6:	d413      	bmi.n	80025d0 <_printf_i+0x204>
 80025a8:	68e0      	ldr	r0, [r4, #12]
 80025aa:	9b03      	ldr	r3, [sp, #12]
 80025ac:	4298      	cmp	r0, r3
 80025ae:	bfb8      	it	lt
 80025b0:	4618      	movlt	r0, r3
 80025b2:	e7a3      	b.n	80024fc <_printf_i+0x130>
 80025b4:	2301      	movs	r3, #1
 80025b6:	464a      	mov	r2, r9
 80025b8:	4639      	mov	r1, r7
 80025ba:	4630      	mov	r0, r6
 80025bc:	47c0      	blx	r8
 80025be:	3001      	adds	r0, #1
 80025c0:	d09a      	beq.n	80024f8 <_printf_i+0x12c>
 80025c2:	3501      	adds	r5, #1
 80025c4:	68e3      	ldr	r3, [r4, #12]
 80025c6:	9a03      	ldr	r2, [sp, #12]
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	42ab      	cmp	r3, r5
 80025cc:	dcf2      	bgt.n	80025b4 <_printf_i+0x1e8>
 80025ce:	e7eb      	b.n	80025a8 <_printf_i+0x1dc>
 80025d0:	2500      	movs	r5, #0
 80025d2:	f104 0919 	add.w	r9, r4, #25
 80025d6:	e7f5      	b.n	80025c4 <_printf_i+0x1f8>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ac      	bne.n	8002536 <_printf_i+0x16a>
 80025dc:	7803      	ldrb	r3, [r0, #0]
 80025de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025e6:	e76c      	b.n	80024c2 <_printf_i+0xf6>
 80025e8:	0800287d 	.word	0x0800287d
 80025ec:	0800288e 	.word	0x0800288e

080025f0 <memchr>:
 80025f0:	b510      	push	{r4, lr}
 80025f2:	b2c9      	uxtb	r1, r1
 80025f4:	4402      	add	r2, r0
 80025f6:	4290      	cmp	r0, r2
 80025f8:	4603      	mov	r3, r0
 80025fa:	d101      	bne.n	8002600 <memchr+0x10>
 80025fc:	2300      	movs	r3, #0
 80025fe:	e003      	b.n	8002608 <memchr+0x18>
 8002600:	781c      	ldrb	r4, [r3, #0]
 8002602:	3001      	adds	r0, #1
 8002604:	428c      	cmp	r4, r1
 8002606:	d1f6      	bne.n	80025f6 <memchr+0x6>
 8002608:	4618      	mov	r0, r3
 800260a:	bd10      	pop	{r4, pc}

0800260c <memcpy>:
 800260c:	b510      	push	{r4, lr}
 800260e:	1e43      	subs	r3, r0, #1
 8002610:	440a      	add	r2, r1
 8002612:	4291      	cmp	r1, r2
 8002614:	d100      	bne.n	8002618 <memcpy+0xc>
 8002616:	bd10      	pop	{r4, pc}
 8002618:	f811 4b01 	ldrb.w	r4, [r1], #1
 800261c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002620:	e7f7      	b.n	8002612 <memcpy+0x6>

08002622 <memmove>:
 8002622:	4288      	cmp	r0, r1
 8002624:	b510      	push	{r4, lr}
 8002626:	eb01 0302 	add.w	r3, r1, r2
 800262a:	d807      	bhi.n	800263c <memmove+0x1a>
 800262c:	1e42      	subs	r2, r0, #1
 800262e:	4299      	cmp	r1, r3
 8002630:	d00a      	beq.n	8002648 <memmove+0x26>
 8002632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002636:	f802 4f01 	strb.w	r4, [r2, #1]!
 800263a:	e7f8      	b.n	800262e <memmove+0xc>
 800263c:	4283      	cmp	r3, r0
 800263e:	d9f5      	bls.n	800262c <memmove+0xa>
 8002640:	1881      	adds	r1, r0, r2
 8002642:	1ad2      	subs	r2, r2, r3
 8002644:	42d3      	cmn	r3, r2
 8002646:	d100      	bne.n	800264a <memmove+0x28>
 8002648:	bd10      	pop	{r4, pc}
 800264a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800264e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002652:	e7f7      	b.n	8002644 <memmove+0x22>

08002654 <_free_r>:
 8002654:	b538      	push	{r3, r4, r5, lr}
 8002656:	4605      	mov	r5, r0
 8002658:	2900      	cmp	r1, #0
 800265a:	d043      	beq.n	80026e4 <_free_r+0x90>
 800265c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002660:	1f0c      	subs	r4, r1, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	bfb8      	it	lt
 8002666:	18e4      	addlt	r4, r4, r3
 8002668:	f000 f8d0 	bl	800280c <__malloc_lock>
 800266c:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <_free_r+0x94>)
 800266e:	6813      	ldr	r3, [r2, #0]
 8002670:	4610      	mov	r0, r2
 8002672:	b933      	cbnz	r3, 8002682 <_free_r+0x2e>
 8002674:	6063      	str	r3, [r4, #4]
 8002676:	6014      	str	r4, [r2, #0]
 8002678:	4628      	mov	r0, r5
 800267a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800267e:	f000 b8c6 	b.w	800280e <__malloc_unlock>
 8002682:	42a3      	cmp	r3, r4
 8002684:	d90b      	bls.n	800269e <_free_r+0x4a>
 8002686:	6821      	ldr	r1, [r4, #0]
 8002688:	1862      	adds	r2, r4, r1
 800268a:	4293      	cmp	r3, r2
 800268c:	bf01      	itttt	eq
 800268e:	681a      	ldreq	r2, [r3, #0]
 8002690:	685b      	ldreq	r3, [r3, #4]
 8002692:	1852      	addeq	r2, r2, r1
 8002694:	6022      	streq	r2, [r4, #0]
 8002696:	6063      	str	r3, [r4, #4]
 8002698:	6004      	str	r4, [r0, #0]
 800269a:	e7ed      	b.n	8002678 <_free_r+0x24>
 800269c:	4613      	mov	r3, r2
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	b10a      	cbz	r2, 80026a6 <_free_r+0x52>
 80026a2:	42a2      	cmp	r2, r4
 80026a4:	d9fa      	bls.n	800269c <_free_r+0x48>
 80026a6:	6819      	ldr	r1, [r3, #0]
 80026a8:	1858      	adds	r0, r3, r1
 80026aa:	42a0      	cmp	r0, r4
 80026ac:	d10b      	bne.n	80026c6 <_free_r+0x72>
 80026ae:	6820      	ldr	r0, [r4, #0]
 80026b0:	4401      	add	r1, r0
 80026b2:	1858      	adds	r0, r3, r1
 80026b4:	4282      	cmp	r2, r0
 80026b6:	6019      	str	r1, [r3, #0]
 80026b8:	d1de      	bne.n	8002678 <_free_r+0x24>
 80026ba:	6810      	ldr	r0, [r2, #0]
 80026bc:	6852      	ldr	r2, [r2, #4]
 80026be:	4401      	add	r1, r0
 80026c0:	6019      	str	r1, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	e7d8      	b.n	8002678 <_free_r+0x24>
 80026c6:	d902      	bls.n	80026ce <_free_r+0x7a>
 80026c8:	230c      	movs	r3, #12
 80026ca:	602b      	str	r3, [r5, #0]
 80026cc:	e7d4      	b.n	8002678 <_free_r+0x24>
 80026ce:	6820      	ldr	r0, [r4, #0]
 80026d0:	1821      	adds	r1, r4, r0
 80026d2:	428a      	cmp	r2, r1
 80026d4:	bf01      	itttt	eq
 80026d6:	6811      	ldreq	r1, [r2, #0]
 80026d8:	6852      	ldreq	r2, [r2, #4]
 80026da:	1809      	addeq	r1, r1, r0
 80026dc:	6021      	streq	r1, [r4, #0]
 80026de:	6062      	str	r2, [r4, #4]
 80026e0:	605c      	str	r4, [r3, #4]
 80026e2:	e7c9      	b.n	8002678 <_free_r+0x24>
 80026e4:	bd38      	pop	{r3, r4, r5, pc}
 80026e6:	bf00      	nop
 80026e8:	20000090 	.word	0x20000090

080026ec <_malloc_r>:
 80026ec:	b570      	push	{r4, r5, r6, lr}
 80026ee:	1ccd      	adds	r5, r1, #3
 80026f0:	f025 0503 	bic.w	r5, r5, #3
 80026f4:	3508      	adds	r5, #8
 80026f6:	2d0c      	cmp	r5, #12
 80026f8:	bf38      	it	cc
 80026fa:	250c      	movcc	r5, #12
 80026fc:	2d00      	cmp	r5, #0
 80026fe:	4606      	mov	r6, r0
 8002700:	db01      	blt.n	8002706 <_malloc_r+0x1a>
 8002702:	42a9      	cmp	r1, r5
 8002704:	d903      	bls.n	800270e <_malloc_r+0x22>
 8002706:	230c      	movs	r3, #12
 8002708:	6033      	str	r3, [r6, #0]
 800270a:	2000      	movs	r0, #0
 800270c:	bd70      	pop	{r4, r5, r6, pc}
 800270e:	f000 f87d 	bl	800280c <__malloc_lock>
 8002712:	4a21      	ldr	r2, [pc, #132]	; (8002798 <_malloc_r+0xac>)
 8002714:	6814      	ldr	r4, [r2, #0]
 8002716:	4621      	mov	r1, r4
 8002718:	b991      	cbnz	r1, 8002740 <_malloc_r+0x54>
 800271a:	4c20      	ldr	r4, [pc, #128]	; (800279c <_malloc_r+0xb0>)
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	b91b      	cbnz	r3, 8002728 <_malloc_r+0x3c>
 8002720:	4630      	mov	r0, r6
 8002722:	f000 f863 	bl	80027ec <_sbrk_r>
 8002726:	6020      	str	r0, [r4, #0]
 8002728:	4629      	mov	r1, r5
 800272a:	4630      	mov	r0, r6
 800272c:	f000 f85e 	bl	80027ec <_sbrk_r>
 8002730:	1c43      	adds	r3, r0, #1
 8002732:	d124      	bne.n	800277e <_malloc_r+0x92>
 8002734:	230c      	movs	r3, #12
 8002736:	4630      	mov	r0, r6
 8002738:	6033      	str	r3, [r6, #0]
 800273a:	f000 f868 	bl	800280e <__malloc_unlock>
 800273e:	e7e4      	b.n	800270a <_malloc_r+0x1e>
 8002740:	680b      	ldr	r3, [r1, #0]
 8002742:	1b5b      	subs	r3, r3, r5
 8002744:	d418      	bmi.n	8002778 <_malloc_r+0x8c>
 8002746:	2b0b      	cmp	r3, #11
 8002748:	d90f      	bls.n	800276a <_malloc_r+0x7e>
 800274a:	600b      	str	r3, [r1, #0]
 800274c:	18cc      	adds	r4, r1, r3
 800274e:	50cd      	str	r5, [r1, r3]
 8002750:	4630      	mov	r0, r6
 8002752:	f000 f85c 	bl	800280e <__malloc_unlock>
 8002756:	f104 000b 	add.w	r0, r4, #11
 800275a:	1d23      	adds	r3, r4, #4
 800275c:	f020 0007 	bic.w	r0, r0, #7
 8002760:	1ac3      	subs	r3, r0, r3
 8002762:	d0d3      	beq.n	800270c <_malloc_r+0x20>
 8002764:	425a      	negs	r2, r3
 8002766:	50e2      	str	r2, [r4, r3]
 8002768:	e7d0      	b.n	800270c <_malloc_r+0x20>
 800276a:	684b      	ldr	r3, [r1, #4]
 800276c:	428c      	cmp	r4, r1
 800276e:	bf16      	itet	ne
 8002770:	6063      	strne	r3, [r4, #4]
 8002772:	6013      	streq	r3, [r2, #0]
 8002774:	460c      	movne	r4, r1
 8002776:	e7eb      	b.n	8002750 <_malloc_r+0x64>
 8002778:	460c      	mov	r4, r1
 800277a:	6849      	ldr	r1, [r1, #4]
 800277c:	e7cc      	b.n	8002718 <_malloc_r+0x2c>
 800277e:	1cc4      	adds	r4, r0, #3
 8002780:	f024 0403 	bic.w	r4, r4, #3
 8002784:	42a0      	cmp	r0, r4
 8002786:	d005      	beq.n	8002794 <_malloc_r+0xa8>
 8002788:	1a21      	subs	r1, r4, r0
 800278a:	4630      	mov	r0, r6
 800278c:	f000 f82e 	bl	80027ec <_sbrk_r>
 8002790:	3001      	adds	r0, #1
 8002792:	d0cf      	beq.n	8002734 <_malloc_r+0x48>
 8002794:	6025      	str	r5, [r4, #0]
 8002796:	e7db      	b.n	8002750 <_malloc_r+0x64>
 8002798:	20000090 	.word	0x20000090
 800279c:	20000094 	.word	0x20000094

080027a0 <_realloc_r>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	4607      	mov	r7, r0
 80027a4:	4614      	mov	r4, r2
 80027a6:	460e      	mov	r6, r1
 80027a8:	b921      	cbnz	r1, 80027b4 <_realloc_r+0x14>
 80027aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80027ae:	4611      	mov	r1, r2
 80027b0:	f7ff bf9c 	b.w	80026ec <_malloc_r>
 80027b4:	b922      	cbnz	r2, 80027c0 <_realloc_r+0x20>
 80027b6:	f7ff ff4d 	bl	8002654 <_free_r>
 80027ba:	4625      	mov	r5, r4
 80027bc:	4628      	mov	r0, r5
 80027be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027c0:	f000 f826 	bl	8002810 <_malloc_usable_size_r>
 80027c4:	42a0      	cmp	r0, r4
 80027c6:	d20f      	bcs.n	80027e8 <_realloc_r+0x48>
 80027c8:	4621      	mov	r1, r4
 80027ca:	4638      	mov	r0, r7
 80027cc:	f7ff ff8e 	bl	80026ec <_malloc_r>
 80027d0:	4605      	mov	r5, r0
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d0f2      	beq.n	80027bc <_realloc_r+0x1c>
 80027d6:	4631      	mov	r1, r6
 80027d8:	4622      	mov	r2, r4
 80027da:	f7ff ff17 	bl	800260c <memcpy>
 80027de:	4631      	mov	r1, r6
 80027e0:	4638      	mov	r0, r7
 80027e2:	f7ff ff37 	bl	8002654 <_free_r>
 80027e6:	e7e9      	b.n	80027bc <_realloc_r+0x1c>
 80027e8:	4635      	mov	r5, r6
 80027ea:	e7e7      	b.n	80027bc <_realloc_r+0x1c>

080027ec <_sbrk_r>:
 80027ec:	b538      	push	{r3, r4, r5, lr}
 80027ee:	2300      	movs	r3, #0
 80027f0:	4c05      	ldr	r4, [pc, #20]	; (8002808 <_sbrk_r+0x1c>)
 80027f2:	4605      	mov	r5, r0
 80027f4:	4608      	mov	r0, r1
 80027f6:	6023      	str	r3, [r4, #0]
 80027f8:	f7fd ff90 	bl	800071c <_sbrk>
 80027fc:	1c43      	adds	r3, r0, #1
 80027fe:	d102      	bne.n	8002806 <_sbrk_r+0x1a>
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	b103      	cbz	r3, 8002806 <_sbrk_r+0x1a>
 8002804:	602b      	str	r3, [r5, #0]
 8002806:	bd38      	pop	{r3, r4, r5, pc}
 8002808:	2000018c 	.word	0x2000018c

0800280c <__malloc_lock>:
 800280c:	4770      	bx	lr

0800280e <__malloc_unlock>:
 800280e:	4770      	bx	lr

08002810 <_malloc_usable_size_r>:
 8002810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002814:	1f18      	subs	r0, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	bfbc      	itt	lt
 800281a:	580b      	ldrlt	r3, [r1, r0]
 800281c:	18c0      	addlt	r0, r0, r3
 800281e:	4770      	bx	lr

08002820 <_init>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	bf00      	nop
 8002824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002826:	bc08      	pop	{r3}
 8002828:	469e      	mov	lr, r3
 800282a:	4770      	bx	lr

0800282c <_fini>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	bf00      	nop
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr
