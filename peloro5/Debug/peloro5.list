
peloro5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cfc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005400  08005400  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08005400  08005400  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005400  08005400  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005408  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000098  080054a0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080054a0  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c821  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cf4  00000000  00000000  0002c8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  0002e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  0002f280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001439b  00000000  00000000  0002fe60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009114  00000000  00000000  000441fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f656  00000000  00000000  0004d30f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003818  00000000  00000000  000bc9e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004df0 	.word	0x08004df0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004df0 	.word	0x08004df0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <NRF24_DelayMicroSeconds+0x38>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0a      	ldr	r2, [pc, #40]	; (8000198 <NRF24_DelayMicroSeconds+0x3c>)
 800016e:	fba2 2303 	umull	r2, r3, r2, r3
 8000172:	0c9a      	lsrs	r2, r3, #18
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	fb02 f303 	mul.w	r3, r2, r3
 800017a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800017c:	bf00      	nop
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	1e5a      	subs	r2, r3, #1
 8000182:	60fa      	str	r2, [r7, #12]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d1fa      	bne.n	800017e <NRF24_DelayMicroSeconds+0x22>
}
 8000188:	bf00      	nop
 800018a:	3714      	adds	r7, #20
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000028 	.word	0x20000028
 8000198:	165e9f81 	.word	0x165e9f81

0800019c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d008      	beq.n	80001bc <NRF24_csn+0x20>
 80001aa:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <NRF24_csn+0x38>)
 80001ac:	6818      	ldr	r0, [r3, #0]
 80001ae:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <NRF24_csn+0x3c>)
 80001b0:	881b      	ldrh	r3, [r3, #0]
 80001b2:	2201      	movs	r2, #1
 80001b4:	4619      	mov	r1, r3
 80001b6:	f002 f9f7 	bl	80025a8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80001ba:	e007      	b.n	80001cc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <NRF24_csn+0x38>)
 80001be:	6818      	ldr	r0, [r3, #0]
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <NRF24_csn+0x3c>)
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	2200      	movs	r2, #0
 80001c6:	4619      	mov	r1, r3
 80001c8:	f002 f9ee 	bl	80025a8 <HAL_GPIO_WritePin>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	200000bc 	.word	0x200000bc
 80001d8:	200000c0 	.word	0x200000c0

080001dc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d008      	beq.n	80001fc <NRF24_ce+0x20>
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <NRF24_ce+0x38>)
 80001ec:	6818      	ldr	r0, [r3, #0]
 80001ee:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <NRF24_ce+0x3c>)
 80001f0:	881b      	ldrh	r3, [r3, #0]
 80001f2:	2201      	movs	r2, #1
 80001f4:	4619      	mov	r1, r3
 80001f6:	f002 f9d7 	bl	80025a8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80001fa:	e007      	b.n	800020c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <NRF24_ce+0x38>)
 80001fe:	6818      	ldr	r0, [r3, #0]
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <NRF24_ce+0x3c>)
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	2200      	movs	r2, #0
 8000206:	4619      	mov	r1, r3
 8000208:	f002 f9ce 	bl	80025a8 <HAL_GPIO_WritePin>
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	200000bc 	.word	0x200000bc
 8000218:	200000c2 	.word	0x200000c2

0800021c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000226:	2000      	movs	r0, #0
 8000228:	f7ff ffb8 	bl	800019c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	f003 031f 	and.w	r3, r3, #31
 8000232:	b2db      	uxtb	r3, r3
 8000234:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000236:	f107 010c 	add.w	r1, r7, #12
 800023a:	2364      	movs	r3, #100	; 0x64
 800023c:	2201      	movs	r2, #1
 800023e:	480a      	ldr	r0, [pc, #40]	; (8000268 <NRF24_read_register+0x4c>)
 8000240:	f003 fa99 	bl	8003776 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	1c59      	adds	r1, r3, #1
 800024a:	2364      	movs	r3, #100	; 0x64
 800024c:	2201      	movs	r2, #1
 800024e:	4806      	ldr	r0, [pc, #24]	; (8000268 <NRF24_read_register+0x4c>)
 8000250:	f003 fbc5 	bl	80039de <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000254:	7b7b      	ldrb	r3, [r7, #13]
 8000256:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f7ff ff9f 	bl	800019c <NRF24_csn>
	return retData;
 800025e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	200000c4 	.word	0x200000c4

0800026c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	6039      	str	r1, [r7, #0]
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	4613      	mov	r3, r2
 800027a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800027c:	2000      	movs	r0, #0
 800027e:	f7ff ff8d 	bl	800019c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 031f 	and.w	r3, r3, #31
 8000288:	b2db      	uxtb	r3, r3
 800028a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800028c:	f107 010c 	add.w	r1, r7, #12
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2201      	movs	r2, #1
 8000294:	4808      	ldr	r0, [pc, #32]	; (80002b8 <NRF24_read_registerN+0x4c>)
 8000296:	f003 fa6e 	bl	8003776 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800029a:	79bb      	ldrb	r3, [r7, #6]
 800029c:	b29a      	uxth	r2, r3
 800029e:	2364      	movs	r3, #100	; 0x64
 80002a0:	6839      	ldr	r1, [r7, #0]
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <NRF24_read_registerN+0x4c>)
 80002a4:	f003 fb9b 	bl	80039de <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f7ff ff77 	bl	800019c <NRF24_csn>
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000c4 	.word	0x200000c4

080002bc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	460a      	mov	r2, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80002cc:	2000      	movs	r0, #0
 80002ce:	f7ff ff65 	bl	800019c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f043 0320 	orr.w	r3, r3, #32
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80002e0:	f107 010c 	add.w	r1, r7, #12
 80002e4:	2364      	movs	r3, #100	; 0x64
 80002e6:	2202      	movs	r2, #2
 80002e8:	4804      	ldr	r0, [pc, #16]	; (80002fc <NRF24_write_register+0x40>)
 80002ea:	f003 fa44 	bl	8003776 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f7ff ff54 	bl	800019c <NRF24_csn>
}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000c4 	.word	0x200000c4

08000300 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	6039      	str	r1, [r7, #0]
 800030a:	71fb      	strb	r3, [r7, #7]
 800030c:	4613      	mov	r3, r2
 800030e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000310:	2000      	movs	r0, #0
 8000312:	f7ff ff43 	bl	800019c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	b2db      	uxtb	r3, r3
 800031e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000320:	f107 010c 	add.w	r1, r7, #12
 8000324:	2364      	movs	r3, #100	; 0x64
 8000326:	2201      	movs	r2, #1
 8000328:	4808      	ldr	r0, [pc, #32]	; (800034c <NRF24_write_registerN+0x4c>)
 800032a:	f003 fa24 	bl	8003776 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	b29a      	uxth	r2, r3
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	6839      	ldr	r1, [r7, #0]
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <NRF24_write_registerN+0x4c>)
 8000338:	f003 fa1d 	bl	8003776 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800033c:	2001      	movs	r0, #1
 800033e:	f7ff ff2d 	bl	800019c <NRF24_csn>
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200000c4 	.word	0x200000c4

08000350 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800035c:	2000      	movs	r0, #0
 800035e:	f7ff ff1d 	bl	800019c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000362:	23a0      	movs	r3, #160	; 0xa0
 8000364:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000366:	f107 010f 	add.w	r1, r7, #15
 800036a:	2364      	movs	r3, #100	; 0x64
 800036c:	2201      	movs	r2, #1
 800036e:	4808      	ldr	r0, [pc, #32]	; (8000390 <NRF24_write_payload+0x40>)
 8000370:	f003 fa01 	bl	8003776 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	b29a      	uxth	r2, r3
 8000378:	2364      	movs	r3, #100	; 0x64
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	4804      	ldr	r0, [pc, #16]	; (8000390 <NRF24_write_payload+0x40>)
 800037e:	f003 f9fa 	bl	8003776 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff ff0a 	bl	800019c <NRF24_csn>
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	200000c4 	.word	0x200000c4

08000394 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80003a0:	f000 fa10 	bl	80007c4 <NRF24_getPayloadSize>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d303      	bcc.n	80003b6 <NRF24_read_payload+0x22>
 80003ae:	f000 fa09 	bl	80007c4 <NRF24_getPayloadSize>
 80003b2:	4603      	mov	r3, r0
 80003b4:	e000      	b.n	80003b8 <NRF24_read_payload+0x24>
 80003b6:	78fb      	ldrb	r3, [r7, #3]
 80003b8:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f7ff feee 	bl	800019c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80003c0:	2361      	movs	r3, #97	; 0x61
 80003c2:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80003c4:	f107 010e 	add.w	r1, r7, #14
 80003c8:	2364      	movs	r3, #100	; 0x64
 80003ca:	2201      	movs	r2, #1
 80003cc:	4808      	ldr	r0, [pc, #32]	; (80003f0 <NRF24_read_payload+0x5c>)
 80003ce:	f003 f9d2 	bl	8003776 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80003d2:	7bfb      	ldrb	r3, [r7, #15]
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	2364      	movs	r3, #100	; 0x64
 80003d8:	6879      	ldr	r1, [r7, #4]
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <NRF24_read_payload+0x5c>)
 80003dc:	f003 faff 	bl	80039de <HAL_SPI_Receive>
	NRF24_csn(1);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f7ff fedb 	bl	800019c <NRF24_csn>
}
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	200000c4 	.word	0x200000c4

080003f4 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80003f8:	21ff      	movs	r1, #255	; 0xff
 80003fa:	20e1      	movs	r0, #225	; 0xe1
 80003fc:	f7ff ff5e 	bl	80002bc <NRF24_write_register>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000408:	21ff      	movs	r1, #255	; 0xff
 800040a:	20e2      	movs	r0, #226	; 0xe2
 800040c:	f7ff ff56 	bl	80002bc <NRF24_write_register>
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}

08000414 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800041a:	2007      	movs	r0, #7
 800041c:	f7ff fefe 	bl	800021c <NRF24_read_register>
 8000420:	4603      	mov	r3, r0
 8000422:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000424:	79fb      	ldrb	r3, [r7, #7]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000430:	b082      	sub	sp, #8
 8000432:	b580      	push	{r7, lr}
 8000434:	b084      	sub	sp, #16
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	61fb      	str	r3, [r7, #28]
 800043c:	460b      	mov	r3, r1
 800043e:	807b      	strh	r3, [r7, #2]
 8000440:	4613      	mov	r3, r2
 8000442:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000444:	4b66      	ldr	r3, [pc, #408]	; (80005e0 <NRF24_begin+0x1b0>)
 8000446:	4618      	mov	r0, r3
 8000448:	f107 031c 	add.w	r3, r7, #28
 800044c:	2258      	movs	r2, #88	; 0x58
 800044e:	4619      	mov	r1, r3
 8000450:	f004 f87e 	bl	8004550 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000454:	4a63      	ldr	r2, [pc, #396]	; (80005e4 <NRF24_begin+0x1b4>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800045a:	4a63      	ldr	r2, [pc, #396]	; (80005e8 <NRF24_begin+0x1b8>)
 800045c:	887b      	ldrh	r3, [r7, #2]
 800045e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000460:	4a62      	ldr	r2, [pc, #392]	; (80005ec <NRF24_begin+0x1bc>)
 8000462:	883b      	ldrh	r3, [r7, #0]
 8000464:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff fe98 	bl	800019c <NRF24_csn>
	NRF24_ce(0);
 800046c:	2000      	movs	r0, #0
 800046e:	f7ff feb5 	bl	80001dc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000472:	2005      	movs	r0, #5
 8000474:	f001 fe0e 	bl	8002094 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000478:	2108      	movs	r1, #8
 800047a:	2000      	movs	r0, #0
 800047c:	f7ff ff1e 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000480:	213f      	movs	r1, #63	; 0x3f
 8000482:	2001      	movs	r0, #1
 8000484:	f7ff ff1a 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000488:	2103      	movs	r1, #3
 800048a:	2002      	movs	r0, #2
 800048c:	f7ff ff16 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000490:	2103      	movs	r1, #3
 8000492:	2003      	movs	r0, #3
 8000494:	f7ff ff12 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000498:	2103      	movs	r1, #3
 800049a:	2004      	movs	r0, #4
 800049c:	f7ff ff0e 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80004a0:	2102      	movs	r1, #2
 80004a2:	2005      	movs	r0, #5
 80004a4:	f7ff ff0a 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80004a8:	210f      	movs	r1, #15
 80004aa:	2006      	movs	r0, #6
 80004ac:	f7ff ff06 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80004b0:	210e      	movs	r1, #14
 80004b2:	2007      	movs	r0, #7
 80004b4:	f7ff ff02 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80004b8:	2100      	movs	r1, #0
 80004ba:	2008      	movs	r0, #8
 80004bc:	f7ff fefe 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80004c0:	2100      	movs	r1, #0
 80004c2:	2009      	movs	r0, #9
 80004c4:	f7ff fefa 	bl	80002bc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80004c8:	23e7      	movs	r3, #231	; 0xe7
 80004ca:	733b      	strb	r3, [r7, #12]
 80004cc:	23e7      	movs	r3, #231	; 0xe7
 80004ce:	72fb      	strb	r3, [r7, #11]
 80004d0:	23e7      	movs	r3, #231	; 0xe7
 80004d2:	72bb      	strb	r3, [r7, #10]
 80004d4:	23e7      	movs	r3, #231	; 0xe7
 80004d6:	727b      	strb	r3, [r7, #9]
 80004d8:	23e7      	movs	r3, #231	; 0xe7
 80004da:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	2205      	movs	r2, #5
 80004e2:	4619      	mov	r1, r3
 80004e4:	200a      	movs	r0, #10
 80004e6:	f7ff ff0b 	bl	8000300 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80004ea:	23c2      	movs	r3, #194	; 0xc2
 80004ec:	733b      	strb	r3, [r7, #12]
 80004ee:	23c2      	movs	r3, #194	; 0xc2
 80004f0:	72fb      	strb	r3, [r7, #11]
 80004f2:	23c2      	movs	r3, #194	; 0xc2
 80004f4:	72bb      	strb	r3, [r7, #10]
 80004f6:	23c2      	movs	r3, #194	; 0xc2
 80004f8:	727b      	strb	r3, [r7, #9]
 80004fa:	23c2      	movs	r3, #194	; 0xc2
 80004fc:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	2205      	movs	r2, #5
 8000504:	4619      	mov	r1, r3
 8000506:	200b      	movs	r0, #11
 8000508:	f7ff fefa 	bl	8000300 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800050c:	21c3      	movs	r1, #195	; 0xc3
 800050e:	200c      	movs	r0, #12
 8000510:	f7ff fed4 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000514:	21c4      	movs	r1, #196	; 0xc4
 8000516:	200d      	movs	r0, #13
 8000518:	f7ff fed0 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800051c:	21c5      	movs	r1, #197	; 0xc5
 800051e:	200e      	movs	r0, #14
 8000520:	f7ff fecc 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000524:	21c6      	movs	r1, #198	; 0xc6
 8000526:	200f      	movs	r0, #15
 8000528:	f7ff fec8 	bl	80002bc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800052c:	23e7      	movs	r3, #231	; 0xe7
 800052e:	733b      	strb	r3, [r7, #12]
 8000530:	23e7      	movs	r3, #231	; 0xe7
 8000532:	72fb      	strb	r3, [r7, #11]
 8000534:	23e7      	movs	r3, #231	; 0xe7
 8000536:	72bb      	strb	r3, [r7, #10]
 8000538:	23e7      	movs	r3, #231	; 0xe7
 800053a:	727b      	strb	r3, [r7, #9]
 800053c:	23e7      	movs	r3, #231	; 0xe7
 800053e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	2205      	movs	r2, #5
 8000546:	4619      	mov	r1, r3
 8000548:	2010      	movs	r0, #16
 800054a:	f7ff fed9 	bl	8000300 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800054e:	2100      	movs	r1, #0
 8000550:	2011      	movs	r0, #17
 8000552:	f7ff feb3 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000556:	2100      	movs	r1, #0
 8000558:	2012      	movs	r0, #18
 800055a:	f7ff feaf 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800055e:	2100      	movs	r1, #0
 8000560:	2013      	movs	r0, #19
 8000562:	f7ff feab 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000566:	2100      	movs	r1, #0
 8000568:	2014      	movs	r0, #20
 800056a:	f7ff fea7 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800056e:	2100      	movs	r1, #0
 8000570:	2015      	movs	r0, #21
 8000572:	f7ff fea3 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000576:	2100      	movs	r1, #0
 8000578:	2016      	movs	r0, #22
 800057a:	f7ff fe9f 	bl	80002bc <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800057e:	f000 fb0b 	bl	8000b98 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000582:	2100      	movs	r1, #0
 8000584:	201c      	movs	r0, #28
 8000586:	f7ff fe99 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800058a:	2100      	movs	r1, #0
 800058c:	201d      	movs	r0, #29
 800058e:	f7ff fe95 	bl	80002bc <NRF24_write_register>
	printRadioSettings();
 8000592:	f000 fb1b 	bl	8000bcc <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000596:	210f      	movs	r1, #15
 8000598:	200f      	movs	r0, #15
 800059a:	f000 f8cd 	bl	8000738 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800059e:	2003      	movs	r0, #3
 80005a0:	f000 f9af 	bl	8000902 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 f9e5 	bl	8000974 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80005aa:	2002      	movs	r0, #2
 80005ac:	f000 fa28 	bl	8000a00 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80005b0:	f000 f97a 	bl	80008a8 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80005b4:	2020      	movs	r0, #32
 80005b6:	f000 f8ef 	bl	8000798 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80005ba:	f000 fae4 	bl	8000b86 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80005be:	204c      	movs	r0, #76	; 0x4c
 80005c0:	f000 f8d5 	bl	800076e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80005c4:	f7ff ff16 	bl	80003f4 <NRF24_flush_tx>
	NRF24_flush_rx();
 80005c8:	f7ff ff1c 	bl	8000404 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80005cc:	f000 fa40 	bl	8000a50 <NRF24_powerDown>
	
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005da:	b002      	add	sp, #8
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000c4 	.word	0x200000c4
 80005e4:	200000bc 	.word	0x200000bc
 80005e8:	200000c0 	.word	0x200000c0
 80005ec:	200000c2 	.word	0x200000c2

080005f0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff fdf1 	bl	80001dc <NRF24_ce>
	NRF24_flush_tx();
 80005fa:	f7ff fefb 	bl	80003f4 <NRF24_flush_tx>
	NRF24_flush_rx();
 80005fe:	f7ff ff01 	bl	8000404 <NRF24_flush_rx>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000614:	f000 fab7 	bl	8000b86 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	4619      	mov	r1, r3
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 fa56 	bl	8000ace <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000622:	f001 fd2d 	bl	8002080 <HAL_GetTick>
 8000626:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000628:	230a      	movs	r3, #10
 800062a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800062c:	f107 030d 	add.w	r3, r7, #13
 8000630:	2201      	movs	r2, #1
 8000632:	4619      	mov	r1, r3
 8000634:	2008      	movs	r0, #8
 8000636:	f7ff fe19 	bl	800026c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800063a:	f7ff feeb 	bl	8000414 <NRF24_get_status>
 800063e:	4603      	mov	r3, r0
 8000640:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000648:	2b00      	cmp	r3, #0
 800064a:	d107      	bne.n	800065c <NRF24_write+0x54>
 800064c:	f001 fd18 	bl	8002080 <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d8e7      	bhi.n	800062c <NRF24_write+0x24>
	
	//printConfigReg();
	//printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800065c:	f107 010b 	add.w	r1, r7, #11
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <NRF24_write+0x90>)
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fa5a 	bl	8000b20 <NRF24_whatHappened>
	retStatus = tx_ok;
 800066c:	7b3b      	ldrb	r3, [r7, #12]
 800066e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <NRF24_write+0x90>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d005      	beq.n	8000684 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000678:	f000 f8ae 	bl	80007d8 <NRF24_getDynamicPayloadSize>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <NRF24_write+0x94>)
 8000682:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000684:	f000 f80c 	bl	80006a0 <NRF24_available>
	NRF24_flush_tx();
 8000688:	f7ff feb4 	bl	80003f4 <NRF24_flush_tx>
	return retStatus;
 800068c:	7bbb      	ldrb	r3, [r7, #14]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000b4 	.word	0x200000b4
 800069c:	200000b5 	.word	0x200000b5

080006a0 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 f9e2 	bl	8000a6e <NRF24_availablePipe>
 80006aa:	4603      	mov	r3, r0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	4619      	mov	r1, r3
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fe67 	bl	8000394 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80006c6:	2017      	movs	r0, #23
 80006c8:	f7ff fda8 	bl	800021c <NRF24_read_register>
 80006cc:	4603      	mov	r3, r0
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80006d4:	f7ff fe96 	bl	8000404 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80006d8:	f000 f87e 	bl	80007d8 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf14      	ite	ne
 80006e2:	2301      	movne	r3, #1
 80006e4:	2300      	moveq	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80006fa:	463b      	mov	r3, r7
 80006fc:	2205      	movs	r2, #5
 80006fe:	4619      	mov	r1, r3
 8000700:	200a      	movs	r0, #10
 8000702:	f7ff fdfd 	bl	8000300 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000706:	463b      	mov	r3, r7
 8000708:	2205      	movs	r2, #5
 800070a:	4619      	mov	r1, r3
 800070c:	2010      	movs	r0, #16
 800070e:	f7ff fdf7 	bl	8000300 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000712:	2320      	movs	r3, #32
 8000714:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <NRF24_openWritingPipe+0x44>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	7bfa      	ldrb	r2, [r7, #15]
 800071c:	4293      	cmp	r3, r2
 800071e:	bf28      	it	cs
 8000720:	4613      	movcs	r3, r2
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	2011      	movs	r0, #17
 8000728:	f7ff fdc8 	bl	80002bc <NRF24_write_register>
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000b6 	.word	0x200000b6

08000738 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	460a      	mov	r2, r1
 8000742:	71fb      	strb	r3, [r7, #7]
 8000744:	4613      	mov	r3, r2
 8000746:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	b25a      	sxtb	r2, r3
 800074e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	b25b      	sxtb	r3, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	b25b      	sxtb	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	2004      	movs	r0, #4
 8000762:	f7ff fdab 	bl	80002bc <NRF24_write_register>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000778:	237f      	movs	r3, #127	; 0x7f
 800077a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800077c:	7bfa      	ldrb	r2, [r7, #15]
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4293      	cmp	r3, r2
 8000782:	bf28      	it	cs
 8000784:	4613      	movcs	r3, r2
 8000786:	b2db      	uxtb	r3, r3
 8000788:	4619      	mov	r1, r3
 800078a:	2005      	movs	r0, #5
 800078c:	f7ff fd96 	bl	80002bc <NRF24_write_register>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80007a2:	2320      	movs	r3, #32
 80007a4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80007a6:	7bfa      	ldrb	r2, [r7, #15]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4293      	cmp	r3, r2
 80007ac:	bf28      	it	cs
 80007ae:	4613      	movcs	r3, r2
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <NRF24_setPayloadSize+0x28>)
 80007b4:	701a      	strb	r2, [r3, #0]
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	200000b6 	.word	0x200000b6

080007c4 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	return payload_size;
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <NRF24_getPayloadSize+0x10>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	200000b6 	.word	0x200000b6

080007d8 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80007dc:	2060      	movs	r0, #96	; 0x60
 80007de:	f7ff fd1d 	bl	800021c <NRF24_read_register>
 80007e2:	4603      	mov	r3, r0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80007ec:	201d      	movs	r0, #29
 80007ee:	f7ff fd15 	bl	800021c <NRF24_read_register>
 80007f2:	4603      	mov	r3, r0
 80007f4:	f043 0306 	orr.w	r3, r3, #6
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	201d      	movs	r0, #29
 80007fe:	f7ff fd5d 	bl	80002bc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000802:	201d      	movs	r0, #29
 8000804:	f7ff fd0a 	bl	800021c <NRF24_read_register>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10c      	bne.n	8000828 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800080e:	f000 f9c3 	bl	8000b98 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000812:	201d      	movs	r0, #29
 8000814:	f7ff fd02 	bl	800021c <NRF24_read_register>
 8000818:	4603      	mov	r3, r0
 800081a:	f043 0306 	orr.w	r3, r3, #6
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4619      	mov	r1, r3
 8000822:	201d      	movs	r0, #29
 8000824:	f7ff fd4a 	bl	80002bc <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000828:	201c      	movs	r0, #28
 800082a:	f7ff fcf7 	bl	800021c <NRF24_read_register>
 800082e:	4603      	mov	r3, r0
 8000830:	f043 0303 	orr.w	r3, r3, #3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	201c      	movs	r0, #28
 800083a:	f7ff fd3f 	bl	80002bc <NRF24_write_register>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000848:	201d      	movs	r0, #29
 800084a:	f7ff fce7 	bl	800021c <NRF24_read_register>
 800084e:	4603      	mov	r3, r0
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	201d      	movs	r0, #29
 800085a:	f7ff fd2f 	bl	80002bc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800085e:	201d      	movs	r0, #29
 8000860:	f7ff fcdc 	bl	800021c <NRF24_read_register>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10c      	bne.n	8000884 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800086a:	f000 f995 	bl	8000b98 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800086e:	201d      	movs	r0, #29
 8000870:	f7ff fcd4 	bl	800021c <NRF24_read_register>
 8000874:	4603      	mov	r3, r0
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4619      	mov	r1, r3
 800087e:	201d      	movs	r0, #29
 8000880:	f7ff fd1c 	bl	80002bc <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000884:	201c      	movs	r0, #28
 8000886:	f7ff fcc9 	bl	800021c <NRF24_read_register>
 800088a:	4603      	mov	r3, r0
 800088c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4619      	mov	r1, r3
 8000894:	201c      	movs	r0, #28
 8000896:	f7ff fd11 	bl	80002bc <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800089a:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <NRF24_enableDynamicPayloads+0x60>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
	
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000b7 	.word	0x200000b7

080008a8 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80008ac:	201d      	movs	r0, #29
 80008ae:	f7ff fcb5 	bl	800021c <NRF24_read_register>
 80008b2:	4603      	mov	r3, r0
 80008b4:	f023 0304 	bic.w	r3, r3, #4
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	201d      	movs	r0, #29
 80008be:	f7ff fcfd 	bl	80002bc <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80008c2:	2100      	movs	r1, #0
 80008c4:	201c      	movs	r0, #28
 80008c6:	f7ff fcf9 	bl	80002bc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80008ca:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <NRF24_disableDynamicPayloads+0x2c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000b7 	.word	0x200000b7

080008d8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d004      	beq.n	80008f2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80008e8:	213f      	movs	r1, #63	; 0x3f
 80008ea:	2001      	movs	r0, #1
 80008ec:	f7ff fce6 	bl	80002bc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80008f0:	e003      	b.n	80008fa <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80008f2:	2100      	movs	r1, #0
 80008f4:	2001      	movs	r0, #1
 80008f6:	f7ff fce1 	bl	80002bc <NRF24_write_register>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b084      	sub	sp, #16
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800090c:	2006      	movs	r0, #6
 800090e:	f7ff fc85 	bl	800021c <NRF24_read_register>
 8000912:	4603      	mov	r3, r0
 8000914:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	f023 0306 	bic.w	r3, r3, #6
 800091c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b03      	cmp	r3, #3
 8000922:	d104      	bne.n	800092e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	f043 0306 	orr.w	r3, r3, #6
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	e019      	b.n	8000962 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d104      	bne.n	800093e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e011      	b.n	8000962 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d104      	bne.n	800094e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e009      	b.n	8000962 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d006      	beq.n	8000962 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	2b04      	cmp	r3, #4
 8000958:	d103      	bne.n	8000962 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	f043 0306 	orr.w	r3, r3, #6
 8000960:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	4619      	mov	r1, r3
 8000966:	2006      	movs	r0, #6
 8000968:	f7ff fca8 	bl	80002bc <NRF24_write_register>
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800097e:	2300      	movs	r3, #0
 8000980:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000982:	2006      	movs	r0, #6
 8000984:	f7ff fc4a 	bl	800021c <NRF24_read_register>
 8000988:	4603      	mov	r3, r0
 800098a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <NRF24_setDataRate+0x88>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000992:	7bbb      	ldrb	r3, [r7, #14]
 8000994:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000998:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d107      	bne.n	80009b0 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <NRF24_setDataRate+0x88>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	f043 0320 	orr.w	r3, r3, #32
 80009ac:	73bb      	strb	r3, [r7, #14]
 80009ae:	e00d      	b.n	80009cc <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d107      	bne.n	80009c6 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <NRF24_setDataRate+0x88>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80009bc:	7bbb      	ldrb	r3, [r7, #14]
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	73bb      	strb	r3, [r7, #14]
 80009c4:	e002      	b.n	80009cc <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <NRF24_setDataRate+0x88>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	4619      	mov	r1, r3
 80009d0:	2006      	movs	r0, #6
 80009d2:	f7ff fc73 	bl	80002bc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80009d6:	2006      	movs	r0, #6
 80009d8:	f7ff fc20 	bl	800021c <NRF24_read_register>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	7bbb      	ldrb	r3, [r7, #14]
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d102      	bne.n	80009ec <NRF24_setDataRate+0x78>
  {
    result = true;
 80009e6:	2301      	movs	r3, #1
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	e002      	b.n	80009f2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <NRF24_setDataRate+0x88>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000b8 	.word	0x200000b8

08000a00 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff fc06 	bl	800021c <NRF24_read_register>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f023 030c 	bic.w	r3, r3, #12
 8000a16:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d00f      	beq.n	8000a3e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d104      	bne.n	8000a2e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	f043 0308 	orr.w	r3, r3, #8
 8000a2a:	73fb      	strb	r3, [r7, #15]
 8000a2c:	e007      	b.n	8000a3e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	4619      	mov	r1, r3
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff fc3a 	bl	80002bc <NRF24_write_register>
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff fbe1 	bl	800021c <NRF24_read_register>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f023 0302 	bic.w	r3, r3, #2
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4619      	mov	r1, r3
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff fc29 	bl	80002bc <NRF24_write_register>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b084      	sub	sp, #16
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000a76:	f7ff fccd 	bl	8000414 <NRF24_get_status>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf14      	ite	ne
 8000a88:	2301      	movne	r3, #1
 8000a8a:	2300      	moveq	r3, #0
 8000a8c:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000a8e:	7bbb      	ldrb	r3, [r7, #14]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d017      	beq.n	8000ac4 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d007      	beq.n	8000aaa <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	085b      	lsrs	r3, r3, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000aaa:	2140      	movs	r1, #64	; 0x40
 8000aac:	2007      	movs	r0, #7
 8000aae:	f7ff fc05 	bl	80002bc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	f003 0320 	and.w	r3, r3, #32
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000abc:	2120      	movs	r1, #32
 8000abe:	2007      	movs	r0, #7
 8000ac0:	f7ff fbfc 	bl	80002bc <NRF24_write_register>
    }
  }
  return result;
 8000ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fb9e 	bl	800021c <NRF24_read_register>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f023 0301 	bic.w	r3, r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4619      	mov	r1, r3
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff fbe3 	bl	80002bc <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8000af6:	2096      	movs	r0, #150	; 0x96
 8000af8:	f7ff fb30 	bl	800015c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	4619      	mov	r1, r3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fc25 	bl	8000350 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff fb68 	bl	80001dc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000b0c:	200f      	movs	r0, #15
 8000b0e:	f7ff fb25 	bl	800015c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff fb62 	bl	80001dc <NRF24_ce>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000b2c:	f7ff fc72 	bl	8000414 <NRF24_get_status>
 8000b30:	4603      	mov	r3, r0
 8000b32:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000b3a:	2170      	movs	r1, #112	; 0x70
 8000b3c:	2007      	movs	r0, #7
 8000b3e:	f7ff fbbd 	bl	80002bc <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	f003 0320 	and.w	r3, r3, #32
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf14      	ite	ne
 8000b4c:	2301      	movne	r3, #1
 8000b4e:	2300      	moveq	r3, #0
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bf14      	ite	ne
 8000b60:	2301      	movne	r3, #1
 8000b62:	2300      	moveq	r3, #0
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000b6a:	7dfb      	ldrb	r3, [r7, #23]
 8000b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf14      	ite	ne
 8000b74:	2301      	movne	r3, #1
 8000b76:	2300      	moveq	r3, #0
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	701a      	strb	r2, [r3, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000b8a:	2170      	movs	r1, #112	; 0x70
 8000b8c:	2007      	movs	r0, #7
 8000b8e:	f7ff fb95 	bl	80002bc <NRF24_write_register>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fafc 	bl	800019c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000ba4:	2350      	movs	r3, #80	; 0x50
 8000ba6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000ba8:	2373      	movs	r3, #115	; 0x73
 8000baa:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000bac:	1d39      	adds	r1, r7, #4
 8000bae:	2364      	movs	r3, #100	; 0x64
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <NRF24_ACTIVATE_cmd+0x30>)
 8000bb4:	f002 fddf 	bl	8003776 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff faef 	bl	800019c <NRF24_csn>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000c4 	.word	0x200000c4

08000bcc <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	b0a1      	sub	sp, #132	; 0x84
 8000bd0:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	4ab6      	ldr	r2, [pc, #728]	; (8000eb0 <printRadioSettings+0x2e4>)
 8000bd8:	461c      	mov	r4, r3
 8000bda:	4615      	mov	r5, r2
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	8022      	strh	r2, [r4, #0]
 8000bee:	3402      	adds	r4, #2
 8000bf0:	0c1b      	lsrs	r3, r3, #16
 8000bf2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff faa7 	bl	800014c <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	f107 0108 	add.w	r1, r7, #8
 8000c06:	230a      	movs	r3, #10
 8000c08:	48aa      	ldr	r0, [pc, #680]	; (8000eb4 <printRadioSettings+0x2e8>)
 8000c0a:	f003 faba 	bl	8004182 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff fb04 	bl	800021c <NRF24_read_register>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000c1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d020      	beq.n	8000c68 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000c26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <printRadioSettings+0x7e>
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	4aa0      	ldr	r2, [pc, #640]	; (8000eb8 <printRadioSettings+0x2ec>)
 8000c38:	461c      	mov	r4, r3
 8000c3a:	4615      	mov	r5, r2
 8000c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c48:	e017      	b.n	8000c7a <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	4a9b      	ldr	r2, [pc, #620]	; (8000ebc <printRadioSettings+0x2f0>)
 8000c50:	461c      	mov	r4, r3
 8000c52:	4615      	mov	r5, r2
 8000c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5c:	c403      	stmia	r4!, {r0, r1}
 8000c5e:	8022      	strh	r2, [r4, #0]
 8000c60:	3402      	adds	r4, #2
 8000c62:	0c13      	lsrs	r3, r2, #16
 8000c64:	7023      	strb	r3, [r4, #0]
 8000c66:	e008      	b.n	8000c7a <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	4a94      	ldr	r2, [pc, #592]	; (8000ec0 <printRadioSettings+0x2f4>)
 8000c6e:	461c      	mov	r4, r3
 8000c70:	4615      	mov	r5, r2
 8000c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c76:	682b      	ldr	r3, [r5, #0]
 8000c78:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fa64 	bl	800014c <strlen>
 8000c84:	4603      	mov	r3, r0
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	f107 0108 	add.w	r1, r7, #8
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	4889      	ldr	r0, [pc, #548]	; (8000eb4 <printRadioSettings+0x2e8>)
 8000c90:	f003 fa77 	bl	8004182 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff fac1 	bl	800021c <NRF24_read_register>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ca0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ca4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bfcc      	ite	gt
 8000cac:	2301      	movgt	r3, #1
 8000cae:	2300      	movle	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cb4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cb8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	bfcc      	ite	gt
 8000cc0:	2301      	movgt	r3, #1
 8000cc2:	2300      	movle	r3, #0
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cc8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ccc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bfcc      	ite	gt
 8000cd4:	2301      	movgt	r3, #1
 8000cd6:	2300      	movle	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ce0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bfcc      	ite	gt
 8000ce8:	2301      	movgt	r3, #1
 8000cea:	2300      	movle	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cf0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cf4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bfcc      	ite	gt
 8000cfc:	2301      	movgt	r3, #1
 8000cfe:	2300      	movle	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d08:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bfcc      	ite	gt
 8000d10:	2301      	movgt	r3, #1
 8000d12:	2300      	movle	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f107 0008 	add.w	r0, r7, #8
 8000d1a:	9303      	str	r3, [sp, #12]
 8000d1c:	9402      	str	r4, [sp, #8]
 8000d1e:	9101      	str	r1, [sp, #4]
 8000d20:	9200      	str	r2, [sp, #0]
 8000d22:	4633      	mov	r3, r6
 8000d24:	462a      	mov	r2, r5
 8000d26:	4967      	ldr	r1, [pc, #412]	; (8000ec4 <printRadioSettings+0x2f8>)
 8000d28:	f003 fc5a 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fa0b 	bl	800014c <strlen>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f107 0108 	add.w	r1, r7, #8
 8000d3e:	230a      	movs	r3, #10
 8000d40:	485c      	ldr	r0, [pc, #368]	; (8000eb4 <printRadioSettings+0x2e8>)
 8000d42:	f003 fa1e 	bl	8004182 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff fa68 	bl	800021c <NRF24_read_register>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d56:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bfcc      	ite	gt
 8000d5e:	2301      	movgt	r3, #1
 8000d60:	2300      	movle	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d6a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bfcc      	ite	gt
 8000d72:	2301      	movgt	r3, #1
 8000d74:	2300      	movle	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d7e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	bfcc      	ite	gt
 8000d86:	2301      	movgt	r3, #1
 8000d88:	2300      	movle	r3, #0
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d92:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bfcc      	ite	gt
 8000d9a:	2301      	movgt	r3, #1
 8000d9c:	2300      	movle	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000da2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000da6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bfcc      	ite	gt
 8000dae:	2301      	movgt	r3, #1
 8000db0:	2300      	movle	r3, #0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000db6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dba:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bfcc      	ite	gt
 8000dc2:	2301      	movgt	r3, #1
 8000dc4:	2300      	movle	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	f107 0008 	add.w	r0, r7, #8
 8000dcc:	9303      	str	r3, [sp, #12]
 8000dce:	9402      	str	r4, [sp, #8]
 8000dd0:	9101      	str	r1, [sp, #4]
 8000dd2:	9200      	str	r2, [sp, #0]
 8000dd4:	4633      	mov	r3, r6
 8000dd6:	462a      	mov	r2, r5
 8000dd8:	493b      	ldr	r1, [pc, #236]	; (8000ec8 <printRadioSettings+0x2fc>)
 8000dda:	f003 fc01 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff f9b2 	bl	800014c <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f107 0108 	add.w	r1, r7, #8
 8000df0:	230a      	movs	r3, #10
 8000df2:	4830      	ldr	r0, [pc, #192]	; (8000eb4 <printRadioSettings+0x2e8>)
 8000df4:	f003 f9c5 	bl	8004182 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f7ff fa0f 	bl	800021c <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000e08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000e12:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	492c      	ldr	r1, [pc, #176]	; (8000ecc <printRadioSettings+0x300>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 fbdf 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff f990 	bl	800014c <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f107 0108 	add.w	r1, r7, #8
 8000e34:	230a      	movs	r3, #10
 8000e36:	481f      	ldr	r0, [pc, #124]	; (8000eb4 <printRadioSettings+0x2e8>)
 8000e38:	f003 f9a3 	bl	8004182 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000e3c:	2005      	movs	r0, #5
 8000e3e:	f7ff f9ed 	bl	800021c <NRF24_read_register>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000e48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	491e      	ldr	r1, [pc, #120]	; (8000ed0 <printRadioSettings+0x304>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 fbc2 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff f973 	bl	800014c <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	f107 0108 	add.w	r1, r7, #8
 8000e6e:	230a      	movs	r3, #10
 8000e70:	4810      	ldr	r0, [pc, #64]	; (8000eb4 <printRadioSettings+0x2e8>)
 8000e72:	f003 f986 	bl	8004182 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000e76:	2006      	movs	r0, #6
 8000e78:	f7ff f9d0 	bl	800021c <NRF24_read_register>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000e82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d024      	beq.n	8000ed8 <printRadioSettings+0x30c>
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <printRadioSettings+0x308>)
 8000e94:	461c      	mov	r4, r3
 8000e96:	4615      	mov	r5, r2
 8000e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ea0:	6020      	str	r0, [r4, #0]
 8000ea2:	3404      	adds	r4, #4
 8000ea4:	8021      	strh	r1, [r4, #0]
 8000ea6:	3402      	adds	r4, #2
 8000ea8:	0c0b      	lsrs	r3, r1, #16
 8000eaa:	7023      	strb	r3, [r4, #0]
 8000eac:	e023      	b.n	8000ef6 <printRadioSettings+0x32a>
 8000eae:	bf00      	nop
 8000eb0:	08004e08 	.word	0x08004e08
 8000eb4:	2000011c 	.word	0x2000011c
 8000eb8:	08004e3c 	.word	0x08004e3c
 8000ebc:	08004e58 	.word	0x08004e58
 8000ec0:	08004e74 	.word	0x08004e74
 8000ec4:	08004e88 	.word	0x08004e88
 8000ec8:	08004ecc 	.word	0x08004ecc
 8000ecc:	08004f18 	.word	0x08004f18
 8000ed0:	08004f34 	.word	0x08004f34
 8000ed4:	08004f48 	.word	0x08004f48
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <printRadioSettings+0x3b8>)
 8000ede:	461c      	mov	r4, r3
 8000ee0:	4615      	mov	r5, r2
 8000ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eea:	6020      	str	r0, [r4, #0]
 8000eec:	3404      	adds	r4, #4
 8000eee:	8021      	strh	r1, [r4, #0]
 8000ef0:	3402      	adds	r4, #2
 8000ef2:	0c0b      	lsrs	r3, r1, #16
 8000ef4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff f926 	bl	800014c <strlen>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	f107 0108 	add.w	r1, r7, #8
 8000f08:	230a      	movs	r3, #10
 8000f0a:	481f      	ldr	r0, [pc, #124]	; (8000f88 <printRadioSettings+0x3bc>)
 8000f0c:	f003 f939 	bl	8004182 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000f10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f14:	f003 0306 	and.w	r3, r3, #6
 8000f18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000f1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000f26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d109      	bne.n	8000f42 <printRadioSettings+0x376>
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	4a16      	ldr	r2, [pc, #88]	; (8000f8c <printRadioSettings+0x3c0>)
 8000f34:	461c      	mov	r4, r3
 8000f36:	4615      	mov	r5, r2
 8000f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3c:	682b      	ldr	r3, [r5, #0]
 8000f3e:	6023      	str	r3, [r4, #0]
 8000f40:	e037      	b.n	8000fb2 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000f42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d109      	bne.n	8000f5e <printRadioSettings+0x392>
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <printRadioSettings+0x3c4>)
 8000f50:	461c      	mov	r4, r3
 8000f52:	4615      	mov	r5, r2
 8000f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	6023      	str	r3, [r4, #0]
 8000f5c:	e029      	b.n	8000fb2 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000f5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d118      	bne.n	8000f98 <printRadioSettings+0x3cc>
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <printRadioSettings+0x3c8>)
 8000f6c:	461c      	mov	r4, r3
 8000f6e:	4615      	mov	r5, r2
 8000f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	8022      	strh	r2, [r4, #0]
 8000f7a:	3402      	adds	r4, #2
 8000f7c:	0c1b      	lsrs	r3, r3, #16
 8000f7e:	7023      	strb	r3, [r4, #0]
 8000f80:	e017      	b.n	8000fb2 <printRadioSettings+0x3e6>
 8000f82:	bf00      	nop
 8000f84:	08004f60 	.word	0x08004f60
 8000f88:	2000011c 	.word	0x2000011c
 8000f8c:	08004f78 	.word	0x08004f78
 8000f90:	08004f8c 	.word	0x08004f8c
 8000f94:	08004fa0 	.word	0x08004fa0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000f98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d108      	bne.n	8000fb2 <printRadioSettings+0x3e6>
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4ad7      	ldr	r2, [pc, #860]	; (8001304 <printRadioSettings+0x738>)
 8000fa6:	461c      	mov	r4, r3
 8000fa8:	4615      	mov	r5, r2
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff f8c8 	bl	800014c <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f107 0108 	add.w	r1, r7, #8
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	48d0      	ldr	r0, [pc, #832]	; (8001308 <printRadioSettings+0x73c>)
 8000fc8:	f003 f8db 	bl	8004182 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2205      	movs	r2, #5
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f7ff f94a 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000fd8:	793b      	ldrb	r3, [r7, #4]
 8000fda:	461c      	mov	r4, r3
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	461d      	mov	r5, r3
 8000fe0:	78bb      	ldrb	r3, [r7, #2]
 8000fe2:	787a      	ldrb	r2, [r7, #1]
 8000fe4:	7839      	ldrb	r1, [r7, #0]
 8000fe6:	f107 0008 	add.w	r0, r7, #8
 8000fea:	9102      	str	r1, [sp, #8]
 8000fec:	9201      	str	r2, [sp, #4]
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	4622      	mov	r2, r4
 8000ff4:	49c5      	ldr	r1, [pc, #788]	; (800130c <printRadioSettings+0x740>)
 8000ff6:	f003 faf3 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f8a4 	bl	800014c <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	b29a      	uxth	r2, r3
 8001008:	f107 0108 	add.w	r1, r7, #8
 800100c:	230a      	movs	r3, #10
 800100e:	48be      	ldr	r0, [pc, #760]	; (8001308 <printRadioSettings+0x73c>)
 8001010:	f003 f8b7 	bl	8004182 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001014:	463b      	mov	r3, r7
 8001016:	2205      	movs	r2, #5
 8001018:	4619      	mov	r1, r3
 800101a:	200b      	movs	r0, #11
 800101c:	f7ff f926 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001020:	793b      	ldrb	r3, [r7, #4]
 8001022:	461c      	mov	r4, r3
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	461d      	mov	r5, r3
 8001028:	78bb      	ldrb	r3, [r7, #2]
 800102a:	787a      	ldrb	r2, [r7, #1]
 800102c:	7839      	ldrb	r1, [r7, #0]
 800102e:	f107 0008 	add.w	r0, r7, #8
 8001032:	9102      	str	r1, [sp, #8]
 8001034:	9201      	str	r2, [sp, #4]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	462b      	mov	r3, r5
 800103a:	4622      	mov	r2, r4
 800103c:	49b4      	ldr	r1, [pc, #720]	; (8001310 <printRadioSettings+0x744>)
 800103e:	f003 facf 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f880 	bl	800014c <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	f107 0108 	add.w	r1, r7, #8
 8001054:	230a      	movs	r3, #10
 8001056:	48ac      	ldr	r0, [pc, #688]	; (8001308 <printRadioSettings+0x73c>)
 8001058:	f003 f893 	bl	8004182 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800105c:	463b      	mov	r3, r7
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	200c      	movs	r0, #12
 8001064:	f7ff f902 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001068:	783b      	ldrb	r3, [r7, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	49a8      	ldr	r1, [pc, #672]	; (8001314 <printRadioSettings+0x748>)
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fab4 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f865 	bl	800014c <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	f107 0108 	add.w	r1, r7, #8
 800108a:	230a      	movs	r3, #10
 800108c:	489e      	ldr	r0, [pc, #632]	; (8001308 <printRadioSettings+0x73c>)
 800108e:	f003 f878 	bl	8004182 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001092:	463b      	mov	r3, r7
 8001094:	2201      	movs	r2, #1
 8001096:	4619      	mov	r1, r3
 8001098:	200d      	movs	r0, #13
 800109a:	f7ff f8e7 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800109e:	783b      	ldrb	r3, [r7, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	499c      	ldr	r1, [pc, #624]	; (8001318 <printRadioSettings+0x74c>)
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 fa99 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f84a 	bl	800014c <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f107 0108 	add.w	r1, r7, #8
 80010c0:	230a      	movs	r3, #10
 80010c2:	4891      	ldr	r0, [pc, #580]	; (8001308 <printRadioSettings+0x73c>)
 80010c4:	f003 f85d 	bl	8004182 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80010c8:	463b      	mov	r3, r7
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	200e      	movs	r0, #14
 80010d0:	f7ff f8cc 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010d4:	783b      	ldrb	r3, [r7, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	498f      	ldr	r1, [pc, #572]	; (800131c <printRadioSettings+0x750>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 fa7e 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f82f 	bl	800014c <strlen>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	f107 0108 	add.w	r1, r7, #8
 80010f6:	230a      	movs	r3, #10
 80010f8:	4883      	ldr	r0, [pc, #524]	; (8001308 <printRadioSettings+0x73c>)
 80010fa:	f003 f842 	bl	8004182 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80010fe:	463b      	mov	r3, r7
 8001100:	2201      	movs	r2, #1
 8001102:	4619      	mov	r1, r3
 8001104:	200f      	movs	r0, #15
 8001106:	f7ff f8b1 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800110a:	783b      	ldrb	r3, [r7, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4983      	ldr	r1, [pc, #524]	; (8001320 <printRadioSettings+0x754>)
 8001114:	4618      	mov	r0, r3
 8001116:	f003 fa63 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f814 	bl	800014c <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	b29a      	uxth	r2, r3
 8001128:	f107 0108 	add.w	r1, r7, #8
 800112c:	230a      	movs	r3, #10
 800112e:	4876      	ldr	r0, [pc, #472]	; (8001308 <printRadioSettings+0x73c>)
 8001130:	f003 f827 	bl	8004182 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001134:	463b      	mov	r3, r7
 8001136:	2205      	movs	r2, #5
 8001138:	4619      	mov	r1, r3
 800113a:	2010      	movs	r0, #16
 800113c:	f7ff f896 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001140:	793b      	ldrb	r3, [r7, #4]
 8001142:	461c      	mov	r4, r3
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	461d      	mov	r5, r3
 8001148:	78bb      	ldrb	r3, [r7, #2]
 800114a:	787a      	ldrb	r2, [r7, #1]
 800114c:	7839      	ldrb	r1, [r7, #0]
 800114e:	f107 0008 	add.w	r0, r7, #8
 8001152:	9102      	str	r1, [sp, #8]
 8001154:	9201      	str	r2, [sp, #4]
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	462b      	mov	r3, r5
 800115a:	4622      	mov	r2, r4
 800115c:	4971      	ldr	r1, [pc, #452]	; (8001324 <printRadioSettings+0x758>)
 800115e:	f003 fa3f 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4618      	mov	r0, r3
 8001168:	f7fe fff0 	bl	800014c <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	f107 0108 	add.w	r1, r7, #8
 8001174:	230a      	movs	r3, #10
 8001176:	4864      	ldr	r0, [pc, #400]	; (8001308 <printRadioSettings+0x73c>)
 8001178:	f003 f803 	bl	8004182 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800117c:	2011      	movs	r0, #17
 800117e:	f7ff f84d 	bl	800021c <NRF24_read_register>
 8001182:	4603      	mov	r3, r0
 8001184:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001188:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4964      	ldr	r1, [pc, #400]	; (8001328 <printRadioSettings+0x75c>)
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fa22 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7fe ffd3 	bl	800014c <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	f107 0108 	add.w	r1, r7, #8
 80011ae:	230a      	movs	r3, #10
 80011b0:	4855      	ldr	r0, [pc, #340]	; (8001308 <printRadioSettings+0x73c>)
 80011b2:	f002 ffe6 	bl	8004182 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80011b6:	2012      	movs	r0, #18
 80011b8:	f7ff f830 	bl	800021c <NRF24_read_register>
 80011bc:	4603      	mov	r3, r0
 80011be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	4957      	ldr	r1, [pc, #348]	; (800132c <printRadioSettings+0x760>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 fa05 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	4618      	mov	r0, r3
 80011dc:	f7fe ffb6 	bl	800014c <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f107 0108 	add.w	r1, r7, #8
 80011e8:	230a      	movs	r3, #10
 80011ea:	4847      	ldr	r0, [pc, #284]	; (8001308 <printRadioSettings+0x73c>)
 80011ec:	f002 ffc9 	bl	8004182 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80011f0:	2013      	movs	r0, #19
 80011f2:	f7ff f813 	bl	800021c <NRF24_read_register>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001200:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	4949      	ldr	r1, [pc, #292]	; (8001330 <printRadioSettings+0x764>)
 800120a:	4618      	mov	r0, r3
 800120c:	f003 f9e8 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4618      	mov	r0, r3
 8001216:	f7fe ff99 	bl	800014c <strlen>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	f107 0108 	add.w	r1, r7, #8
 8001222:	230a      	movs	r3, #10
 8001224:	4838      	ldr	r0, [pc, #224]	; (8001308 <printRadioSettings+0x73c>)
 8001226:	f002 ffac 	bl	8004182 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 800122a:	2014      	movs	r0, #20
 800122c:	f7fe fff6 	bl	800021c <NRF24_read_register>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	493c      	ldr	r1, [pc, #240]	; (8001334 <printRadioSettings+0x768>)
 8001244:	4618      	mov	r0, r3
 8001246:	f003 f9cb 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4618      	mov	r0, r3
 8001250:	f7fe ff7c 	bl	800014c <strlen>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	f107 0108 	add.w	r1, r7, #8
 800125c:	230a      	movs	r3, #10
 800125e:	482a      	ldr	r0, [pc, #168]	; (8001308 <printRadioSettings+0x73c>)
 8001260:	f002 ff8f 	bl	8004182 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001264:	2015      	movs	r0, #21
 8001266:	f7fe ffd9 	bl	800021c <NRF24_read_register>
 800126a:	4603      	mov	r3, r0
 800126c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001270:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001274:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	492e      	ldr	r1, [pc, #184]	; (8001338 <printRadioSettings+0x76c>)
 800127e:	4618      	mov	r0, r3
 8001280:	f003 f9ae 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ff5f 	bl	800014c <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	f107 0108 	add.w	r1, r7, #8
 8001296:	230a      	movs	r3, #10
 8001298:	481b      	ldr	r0, [pc, #108]	; (8001308 <printRadioSettings+0x73c>)
 800129a:	f002 ff72 	bl	8004182 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800129e:	2016      	movs	r0, #22
 80012a0:	f7fe ffbc 	bl	800021c <NRF24_read_register>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4921      	ldr	r1, [pc, #132]	; (800133c <printRadioSettings+0x770>)
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 f991 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7fe ff42 	bl	800014c <strlen>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	f107 0108 	add.w	r1, r7, #8
 80012d0:	230a      	movs	r3, #10
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <printRadioSettings+0x73c>)
 80012d4:	f002 ff55 	bl	8004182 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80012d8:	201c      	movs	r0, #28
 80012da:	f7fe ff9f 	bl	800021c <NRF24_read_register>
 80012de:	4603      	mov	r3, r0
 80012e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012e8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bfcc      	ite	gt
 80012f0:	2301      	movgt	r3, #1
 80012f2:	2300      	movle	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	e01e      	b.n	8001340 <printRadioSettings+0x774>
 8001302:	bf00      	nop
 8001304:	08004fb4 	.word	0x08004fb4
 8001308:	2000011c 	.word	0x2000011c
 800130c:	08004fc8 	.word	0x08004fc8
 8001310:	08004ff8 	.word	0x08004ff8
 8001314:	08005028 	.word	0x08005028
 8001318:	08005050 	.word	0x08005050
 800131c:	08005078 	.word	0x08005078
 8001320:	080050a0 	.word	0x080050a0
 8001324:	080050c8 	.word	0x080050c8
 8001328:	080050f4 	.word	0x080050f4
 800132c:	08005110 	.word	0x08005110
 8001330:	0800512c 	.word	0x0800512c
 8001334:	08005148 	.word	0x08005148
 8001338:	08005164 	.word	0x08005164
 800133c:	08005180 	.word	0x08005180
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001340:	2b00      	cmp	r3, #0
 8001342:	bfcc      	ite	gt
 8001344:	2301      	movgt	r3, #1
 8001346:	2300      	movle	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800134c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001350:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001354:	2b00      	cmp	r3, #0
 8001356:	bfcc      	ite	gt
 8001358:	2301      	movgt	r3, #1
 800135a:	2300      	movle	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001360:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001364:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001368:	2b00      	cmp	r3, #0
 800136a:	bfcc      	ite	gt
 800136c:	2301      	movgt	r3, #1
 800136e:	2300      	movle	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001374:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001378:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800137c:	2b00      	cmp	r3, #0
 800137e:	bfcc      	ite	gt
 8001380:	2301      	movgt	r3, #1
 8001382:	2300      	movle	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001388:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800138c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001390:	2b00      	cmp	r3, #0
 8001392:	bfcc      	ite	gt
 8001394:	2301      	movgt	r3, #1
 8001396:	2300      	movle	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f107 0008 	add.w	r0, r7, #8
 800139e:	9303      	str	r3, [sp, #12]
 80013a0:	9402      	str	r4, [sp, #8]
 80013a2:	9101      	str	r1, [sp, #4]
 80013a4:	9200      	str	r2, [sp, #0]
 80013a6:	4633      	mov	r3, r6
 80013a8:	462a      	mov	r2, r5
 80013aa:	494a      	ldr	r1, [pc, #296]	; (80014d4 <printRadioSettings+0x908>)
 80013ac:	f003 f918 	bl	80045e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7fe fec9 	bl	800014c <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29a      	uxth	r2, r3
 80013be:	f107 0108 	add.w	r1, r7, #8
 80013c2:	230a      	movs	r3, #10
 80013c4:	4844      	ldr	r0, [pc, #272]	; (80014d8 <printRadioSettings+0x90c>)
 80013c6:	f002 fedc 	bl	8004182 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80013ca:	201d      	movs	r0, #29
 80013cc:	f7fe ff26 	bl	800021c <NRF24_read_register>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80013d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00c      	beq.n	80013fc <printRadioSettings+0x830>
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4a3d      	ldr	r2, [pc, #244]	; (80014dc <printRadioSettings+0x910>)
 80013e8:	461c      	mov	r4, r3
 80013ea:	4615      	mov	r5, r2
 80013ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013f4:	6020      	str	r0, [r4, #0]
 80013f6:	3404      	adds	r4, #4
 80013f8:	8021      	strh	r1, [r4, #0]
 80013fa:	e00e      	b.n	800141a <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4a37      	ldr	r2, [pc, #220]	; (80014e0 <printRadioSettings+0x914>)
 8001402:	461c      	mov	r4, r3
 8001404:	4615      	mov	r5, r2
 8001406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800140e:	6020      	str	r0, [r4, #0]
 8001410:	3404      	adds	r4, #4
 8001412:	8021      	strh	r1, [r4, #0]
 8001414:	3402      	adds	r4, #2
 8001416:	0c0b      	lsrs	r3, r1, #16
 8001418:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe fe94 	bl	800014c <strlen>
 8001424:	4603      	mov	r3, r0
 8001426:	b29a      	uxth	r2, r3
 8001428:	f107 0108 	add.w	r1, r7, #8
 800142c:	230a      	movs	r3, #10
 800142e:	482a      	ldr	r0, [pc, #168]	; (80014d8 <printRadioSettings+0x90c>)
 8001430:	f002 fea7 	bl	8004182 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001434:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00b      	beq.n	8001458 <printRadioSettings+0x88c>
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <printRadioSettings+0x918>)
 8001446:	461c      	mov	r4, r3
 8001448:	4615      	mov	r5, r2
 800144a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001452:	c403      	stmia	r4!, {r0, r1}
 8001454:	8022      	strh	r2, [r4, #0]
 8001456:	e00d      	b.n	8001474 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <printRadioSettings+0x91c>)
 800145e:	461c      	mov	r4, r3
 8001460:	4615      	mov	r5, r2
 8001462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001466:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800146a:	c403      	stmia	r4!, {r0, r1}
 800146c:	8022      	strh	r2, [r4, #0]
 800146e:	3402      	adds	r4, #2
 8001470:	0c13      	lsrs	r3, r2, #16
 8001472:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe fe67 	bl	800014c <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	b29a      	uxth	r2, r3
 8001482:	f107 0108 	add.w	r1, r7, #8
 8001486:	230a      	movs	r3, #10
 8001488:	4813      	ldr	r0, [pc, #76]	; (80014d8 <printRadioSettings+0x90c>)
 800148a:	f002 fe7a 	bl	8004182 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <printRadioSettings+0x920>)
 8001494:	461c      	mov	r4, r3
 8001496:	4615      	mov	r5, r2
 8001498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800149c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a4:	682b      	ldr	r3, [r5, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	8022      	strh	r2, [r4, #0]
 80014aa:	3402      	adds	r4, #2
 80014ac:	0c1b      	lsrs	r3, r3, #16
 80014ae:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7fe fe49 	bl	800014c <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f107 0108 	add.w	r1, r7, #8
 80014c2:	230a      	movs	r3, #10
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <printRadioSettings+0x90c>)
 80014c6:	f002 fe5c 	bl	8004182 <HAL_UART_Transmit>
}
 80014ca:	bf00      	nop
 80014cc:	3774      	adds	r7, #116	; 0x74
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	0800519c 	.word	0x0800519c
 80014d8:	2000011c 	.word	0x2000011c
 80014dc:	080051e8 	.word	0x080051e8
 80014e0:	08005200 	.word	0x08005200
 80014e4:	08005218 	.word	0x08005218
 80014e8:	08005234 	.word	0x08005234
 80014ec:	08004e08 	.word	0x08004e08

080014f0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80014f0:	b084      	sub	sp, #16
 80014f2:	b4b0      	push	{r4, r5, r7}
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	f107 040c 	add.w	r4, r7, #12
 80014fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <nrf24_DebugUART_Init+0x34>)
 8001500:	461c      	mov	r4, r3
 8001502:	f107 050c 	add.w	r5, r7, #12
 8001506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001512:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	bcb0      	pop	{r4, r5, r7}
 8001520:	b004      	add	sp, #16
 8001522:	4770      	bx	lr
 8001524:	2000011c 	.word	0x2000011c

08001528 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af02      	add	r7, sp, #8
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f023 030f 	bic.w	r3, r3, #15
 8001538:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	f043 030c 	orr.w	r3, r3, #12
 8001546:	b2db      	uxtb	r3, r3
 8001548:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	b2db      	uxtb	r3, r3
 8001552:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001554:	7bbb      	ldrb	r3, [r7, #14]
 8001556:	f043 030c 	orr.w	r3, r3, #12
 800155a:	b2db      	uxtb	r3, r3
 800155c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	b2db      	uxtb	r3, r3
 8001566:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001568:	f107 0208 	add.w	r2, r7, #8
 800156c:	2364      	movs	r3, #100	; 0x64
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2304      	movs	r3, #4
 8001572:	214e      	movs	r1, #78	; 0x4e
 8001574:	4803      	ldr	r0, [pc, #12]	; (8001584 <lcd_send_cmd+0x5c>)
 8001576:	f001 f987 	bl	8002888 <HAL_I2C_Master_Transmit>
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200001f0 	.word	0x200001f0

08001588 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af02      	add	r7, sp, #8
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f023 030f 	bic.w	r3, r3, #15
 8001598:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	f043 030d 	orr.w	r3, r3, #13
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f043 0309 	orr.w	r3, r3, #9
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80015b4:	7bbb      	ldrb	r3, [r7, #14]
 80015b6:	f043 030d 	orr.w	r3, r3, #13
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	f043 0309 	orr.w	r3, r3, #9
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80015c8:	f107 0208 	add.w	r2, r7, #8
 80015cc:	2364      	movs	r3, #100	; 0x64
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2304      	movs	r3, #4
 80015d2:	214e      	movs	r1, #78	; 0x4e
 80015d4:	4803      	ldr	r0, [pc, #12]	; (80015e4 <lcd_send_data+0x5c>)
 80015d6:	f001 f957 	bl	8002888 <HAL_I2C_Master_Transmit>
}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200001f0 	.word	0x200001f0

080015e8 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80015ec:	2032      	movs	r0, #50	; 0x32
 80015ee:	f000 fd51 	bl	8002094 <HAL_Delay>
	lcd_send_cmd (0x30);
 80015f2:	2030      	movs	r0, #48	; 0x30
 80015f4:	f7ff ff98 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80015f8:	2005      	movs	r0, #5
 80015fa:	f000 fd4b 	bl	8002094 <HAL_Delay>
	lcd_send_cmd (0x30);
 80015fe:	2030      	movs	r0, #48	; 0x30
 8001600:	f7ff ff92 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001604:	2001      	movs	r0, #1
 8001606:	f000 fd45 	bl	8002094 <HAL_Delay>
	lcd_send_cmd (0x30);
 800160a:	2030      	movs	r0, #48	; 0x30
 800160c:	f7ff ff8c 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(10);
 8001610:	200a      	movs	r0, #10
 8001612:	f000 fd3f 	bl	8002094 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001616:	2020      	movs	r0, #32
 8001618:	f7ff ff86 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(10);
 800161c:	200a      	movs	r0, #10
 800161e:	f000 fd39 	bl	8002094 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001622:	2028      	movs	r0, #40	; 0x28
 8001624:	f7ff ff80 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(1);
 8001628:	2001      	movs	r0, #1
 800162a:	f000 fd33 	bl	8002094 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800162e:	2008      	movs	r0, #8
 8001630:	f7ff ff7a 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f000 fd2d 	bl	8002094 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff ff74 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f000 fd27 	bl	8002094 <HAL_Delay>
	HAL_Delay(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f000 fd24 	bl	8002094 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800164c:	2006      	movs	r0, #6
 800164e:	f7ff ff6b 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(1);
 8001652:	2001      	movs	r0, #1
 8001654:	f000 fd1e 	bl	8002094 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001658:	200c      	movs	r0, #12
 800165a:	f7ff ff65 	bl	8001528 <lcd_send_cmd>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}

08001662 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800166a:	e006      	b.n	800167a <lcd_send_string+0x18>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff87 	bl	8001588 <lcd_send_data>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f4      	bne.n	800166c <lcd_send_string+0xa>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168e:	b0ab      	sub	sp, #172	; 0xac
 8001690:	af16      	add	r7, sp, #88	; 0x58
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001692:	f000 fc9d 	bl	8001fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001696:	f000 f8ef 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169a:	f000 f9f7 	bl	8001a8c <MX_GPIO_Init>
  MX_I2C1_Init();
 800169e:	f000 f931 	bl	8001904 <MX_I2C1_Init>
  MX_SPI1_Init();
 80016a2:	f000 f95d 	bl	8001960 <MX_SPI1_Init>
  MX_SPI2_Init();
 80016a6:	f000 f991 	bl	80019cc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80016aa:	f000 f9c5 	bl	8001a38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init ();
 80016ae:	f7ff ff9b 	bl	80015e8 <lcd_init>
  HAL_Delay(100);
 80016b2:	2064      	movs	r0, #100	; 0x64
 80016b4:	f000 fcee 	bl	8002094 <HAL_Delay>
  lcd_send_string("Hello");
 80016b8:	485e      	ldr	r0, [pc, #376]	; (8001834 <main+0x1a8>)
 80016ba:	f7ff ffd2 	bl	8001662 <lcd_send_string>
  HAL_Delay(1000);
 80016be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c2:	f000 fce7 	bl	8002094 <HAL_Delay>


  NRF24_begin(GPIOA,GPIO_PIN_3,GPIO_PIN_4, hspi1); //CS CE
 80016c6:	4c5c      	ldr	r4, [pc, #368]	; (8001838 <main+0x1ac>)
 80016c8:	4668      	mov	r0, sp
 80016ca:	1d23      	adds	r3, r4, #4
 80016cc:	2254      	movs	r2, #84	; 0x54
 80016ce:	4619      	mov	r1, r3
 80016d0:	f002 ff3e 	bl	8004550 <memcpy>
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	2210      	movs	r2, #16
 80016d8:	2108      	movs	r1, #8
 80016da:	4858      	ldr	r0, [pc, #352]	; (800183c <main+0x1b0>)
 80016dc:	f7fe fea8 	bl	8000430 <NRF24_begin>
  nrf24_DebugUART_Init(huart1);
 80016e0:	4e57      	ldr	r6, [pc, #348]	; (8001840 <main+0x1b4>)
 80016e2:	466d      	mov	r5, sp
 80016e4:	f106 0410 	add.w	r4, r6, #16
 80016e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016fc:	f7ff fef8 	bl	80014f0 <nrf24_DebugUART_Init>
  /* USER CODE END 2 */
 
  //*** TRANSMIT - ACK ***//
  NRF24_stopListening();
 8001700:	f7fe ff76 	bl	80005f0 <NRF24_stopListening>
  NRF24_openWritingPipe(TxpipeAddrs);
 8001704:	4b4f      	ldr	r3, [pc, #316]	; (8001844 <main+0x1b8>)
 8001706:	cb18      	ldmia	r3, {r3, r4}
 8001708:	4618      	mov	r0, r3
 800170a:	4621      	mov	r1, r4
 800170c:	f7fe fff0 	bl	80006f0 <NRF24_openWritingPipe>
  NRF24_setAutoAck(true);
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff f8e1 	bl	80008d8 <NRF24_setAutoAck>
  NRF24_setChannel(103);
 8001716:	2067      	movs	r0, #103	; 0x67
 8001718:	f7ff f829 	bl	800076e <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 800171c:	2020      	movs	r0, #32
 800171e:	f7ff f83b 	bl	8000798 <NRF24_setPayloadSize>

  NRF24_enableDynamicPayloads();
 8001722:	f7ff f88f 	bl	8000844 <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 8001726:	f7ff f85f 	bl	80007e8 <NRF24_enableAckPayload>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

		 HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)buf_tx, (uint8_t *)buf_rx, 3, HAL_MAX_DELAY);
 800172a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2303      	movs	r3, #3
 8001732:	4a45      	ldr	r2, [pc, #276]	; (8001848 <main+0x1bc>)
 8001734:	4945      	ldr	r1, [pc, #276]	; (800184c <main+0x1c0>)
 8001736:	4840      	ldr	r0, [pc, #256]	; (8001838 <main+0x1ac>)
 8001738:	f002 fa5a 	bl	8003bf0 <HAL_SPI_TransmitReceive>
		 y =  ((buf_rx[0]<<16)|(buf_rx[1]<<8)|(buf_rx[2]));
 800173c:	4b42      	ldr	r3, [pc, #264]	; (8001848 <main+0x1bc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	041a      	lsls	r2, r3, #16
 8001742:	4b41      	ldr	r3, [pc, #260]	; (8001848 <main+0x1bc>)
 8001744:	785b      	ldrb	r3, [r3, #1]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	4313      	orrs	r3, r2
 800174a:	4a3f      	ldr	r2, [pc, #252]	; (8001848 <main+0x1bc>)
 800174c:	7892      	ldrb	r2, [r2, #2]
 800174e:	4313      	orrs	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <main+0x1c4>)
 8001754:	601a      	str	r2, [r3, #0]
		 y = GrayToBinary(y);
 8001756:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <main+0x1c4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fa30 	bl	8001bc0 <GrayToBinary>
 8001760:	4602      	mov	r2, r0
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <main+0x1c4>)
 8001764:	601a      	str	r2, [r3, #0]

		 y = y >> 6;
 8001766:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <main+0x1c4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	099b      	lsrs	r3, r3, #6
 800176c:	4a38      	ldr	r2, [pc, #224]	; (8001850 <main+0x1c4>)
 800176e:	6013      	str	r3, [r2, #0]
		 y = y & 0x1FFFF;
 8001770:	4b37      	ldr	r3, [pc, #220]	; (8001850 <main+0x1c4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8001778:	4a35      	ldr	r2, [pc, #212]	; (8001850 <main+0x1c4>)
 800177a:	6013      	str	r3, [r2, #0]

		 //y=(y*360)/131072;

		 y = (y*3600)/131072;
 800177c:	4b34      	ldr	r3, [pc, #208]	; (8001850 <main+0x1c4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	0c5b      	lsrs	r3, r3, #17
 800178a:	4a31      	ldr	r2, [pc, #196]	; (8001850 <main+0x1c4>)
 800178c:	6013      	str	r3, [r2, #0]

		  snprintf(str, sizeof str, "%lu", y);
 800178e:	4b30      	ldr	r3, [pc, #192]	; (8001850 <main+0x1c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a30      	ldr	r2, [pc, #192]	; (8001854 <main+0x1c8>)
 8001794:	2120      	movs	r1, #32
 8001796:	4830      	ldr	r0, [pc, #192]	; (8001858 <main+0x1cc>)
 8001798:	f002 feee 	bl	8004578 <sniprintf>

		  lcd_send_string(str);
 800179c:	482e      	ldr	r0, [pc, #184]	; (8001858 <main+0x1cc>)
 800179e:	f7ff ff60 	bl	8001662 <lcd_send_string>
		  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80017a2:	482d      	ldr	r0, [pc, #180]	; (8001858 <main+0x1cc>)
 80017a4:	f7fe fcd2 	bl	800014c <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b0:	4929      	ldr	r1, [pc, #164]	; (8001858 <main+0x1cc>)
 80017b2:	4823      	ldr	r0, [pc, #140]	; (8001840 <main+0x1b4>)
 80017b4:	f002 fce5 	bl	8004182 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017bc:	2202      	movs	r2, #2
 80017be:	4927      	ldr	r1, [pc, #156]	; (800185c <main+0x1d0>)
 80017c0:	481f      	ldr	r0, [pc, #124]	; (8001840 <main+0x1b4>)
 80017c2:	f002 fcde 	bl	8004182 <HAL_UART_Transmit>


		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ca:	4825      	ldr	r0, [pc, #148]	; (8001860 <main+0x1d4>)
 80017cc:	f000 ff04 	bl	80025d8 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 80017d0:	2064      	movs	r0, #100	; 0x64
 80017d2:	f000 fc5f 	bl	8002094 <HAL_Delay>





    if (NRF24_write(myTxData,32)){
 80017d6:	2120      	movs	r1, #32
 80017d8:	4822      	ldr	r0, [pc, #136]	; (8001864 <main+0x1d8>)
 80017da:	f7fe ff15 	bl	8000608 <NRF24_write>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01f      	beq.n	8001824 <main+0x198>

    	NRF24_read(AckPayload, 32);
 80017e4:	2120      	movs	r1, #32
 80017e6:	4820      	ldr	r0, [pc, #128]	; (8001868 <main+0x1dc>)
 80017e8:	f7fe ff62 	bl	80006b0 <NRF24_read>
    	HAL_UART_Transmit(&huart1, (uint8_t *)"Transmitted Successfully\r\n", strlen("Transmitted Successfully\r\n"), 10);
 80017ec:	230a      	movs	r3, #10
 80017ee:	221a      	movs	r2, #26
 80017f0:	491e      	ldr	r1, [pc, #120]	; (800186c <main+0x1e0>)
 80017f2:	4813      	ldr	r0, [pc, #76]	; (8001840 <main+0x1b4>)
 80017f4:	f002 fcc5 	bl	8004182 <HAL_UART_Transmit>


		char myDataack[80];
		sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 80017f8:	463b      	mov	r3, r7
 80017fa:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <main+0x1dc>)
 80017fc:	491c      	ldr	r1, [pc, #112]	; (8001870 <main+0x1e4>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 feee 	bl	80045e0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)myDataack, strlen(myDataack), 10);
 8001804:	463b      	mov	r3, r7
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fca0 	bl	800014c <strlen>
 800180c:	4603      	mov	r3, r0
 800180e:	b29a      	uxth	r2, r3
 8001810:	4639      	mov	r1, r7
 8001812:	230a      	movs	r3, #10
 8001814:	480a      	ldr	r0, [pc, #40]	; (8001840 <main+0x1b4>)
 8001816:	f002 fcb4 	bl	8004182 <HAL_UART_Transmit>

		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800181a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800181e:	4810      	ldr	r0, [pc, #64]	; (8001860 <main+0x1d4>)
 8001820:	f000 feda 	bl	80025d8 <HAL_GPIO_TogglePin>

    }

	lcd_send_string("ADAMS  ");
 8001824:	4813      	ldr	r0, [pc, #76]	; (8001874 <main+0x1e8>)
 8001826:	f7ff ff1c 	bl	8001662 <lcd_send_string>

    //printRadioSettings();
    HAL_Delay(1000);
 800182a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800182e:	f000 fc31 	bl	8002094 <HAL_Delay>
  {
 8001832:	e77a      	b.n	800172a <main+0x9e>
 8001834:	0800534c 	.word	0x0800534c
 8001838:	20000284 	.word	0x20000284
 800183c:	40010800 	.word	0x40010800
 8001840:	20000244 	.word	0x20000244
 8001844:	20000000 	.word	0x20000000
 8001848:	20000160 	.word	0x20000160
 800184c:	2000015c 	.word	0x2000015c
 8001850:	20000164 	.word	0x20000164
 8001854:	08005354 	.word	0x08005354
 8001858:	200002dc 	.word	0x200002dc
 800185c:	08005358 	.word	0x08005358
 8001860:	40011000 	.word	0x40011000
 8001864:	20000008 	.word	0x20000008
 8001868:	200001cc 	.word	0x200001cc
 800186c:	0800535c 	.word	0x0800535c
 8001870:	08005378 	.word	0x08005378
 8001874:	0800538c 	.word	0x0800538c

08001878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b090      	sub	sp, #64	; 0x40
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 0318 	add.w	r3, r7, #24
 8001882:	2228      	movs	r2, #40	; 0x28
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f002 fe6d 	bl	8004566 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189a:	2301      	movs	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800189e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a8:	2301      	movs	r3, #1
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ac:	2302      	movs	r3, #2
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018bc:	f107 0318 	add.w	r3, r7, #24
 80018c0:	4618      	mov	r0, r3
 80018c2:	f001 fadb 	bl	8002e7c <HAL_RCC_OscConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80018cc:	f000 f990 	bl	8001bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d0:	230f      	movs	r3, #15
 80018d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d4:	2302      	movs	r3, #2
 80018d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2102      	movs	r1, #2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 fd46 	bl	800337c <HAL_RCC_ClockConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018f6:	f000 f97b 	bl	8001bf0 <Error_Handler>
  }
}
 80018fa:	bf00      	nop
 80018fc:	3740      	adds	r7, #64	; 0x40
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_I2C1_Init+0x50>)
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <MX_I2C1_Init+0x54>)
 800190c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_I2C1_Init+0x50>)
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <MX_I2C1_Init+0x58>)
 8001912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_I2C1_Init+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_I2C1_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_I2C1_Init+0x50>)
 8001922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_I2C1_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_I2C1_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_I2C1_Init+0x50>)
 8001942:	f000 fe79 	bl	8002638 <HAL_I2C_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800194c:	f000 f950 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200001f0 	.word	0x200001f0
 8001958:	40005400 	.word	0x40005400
 800195c:	000186a0 	.word	0x000186a0

08001960 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <MX_SPI1_Init+0x64>)
 8001966:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <MX_SPI1_Init+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_SPI1_Init+0x64>)
 800196c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_SPI1_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <MX_SPI1_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_SPI1_Init+0x64>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_SPI1_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_SPI1_Init+0x64>)
 800198c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001990:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_SPI1_Init+0x64>)
 8001994:	2220      	movs	r2, #32
 8001996:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <MX_SPI1_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_SPI1_Init+0x64>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <MX_SPI1_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_SPI1_Init+0x64>)
 80019ac:	220a      	movs	r2, #10
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	; (80019c4 <MX_SPI1_Init+0x64>)
 80019b2:	f001 fe7f 	bl	80036b4 <HAL_SPI_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019bc:	f000 f918 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000284 	.word	0x20000284
 80019c8:	40013000 	.word	0x40013000

080019cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019d2:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <MX_SPI2_Init+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019ec:	2202      	movs	r2, #2
 80019ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_SPI2_Init+0x64>)
 80019f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_SPI2_Init+0x64>)
 8001a00:	2228      	movs	r2, #40	; 0x28
 8001a02:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <MX_SPI2_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_SPI2_Init+0x64>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <MX_SPI2_Init+0x64>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_SPI2_Init+0x64>)
 8001a18:	220a      	movs	r2, #10
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <MX_SPI2_Init+0x64>)
 8001a1e:	f001 fe49 	bl	80036b4 <HAL_SPI_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a28:	f000 f8e2 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000174 	.word	0x20000174
 8001a34:	40003800 	.word	0x40003800

08001a38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_USART1_UART_Init+0x4c>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_USART1_UART_Init+0x50>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_USART1_UART_Init+0x4c>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_USART1_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_USART1_UART_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <MX_USART1_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_USART1_UART_Init+0x4c>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <MX_USART1_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_USART1_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_USART1_UART_Init+0x4c>)
 8001a70:	f002 fb3a 	bl	80040e8 <HAL_UART_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a7a:	f000 f8b9 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000244 	.word	0x20000244
 8001a88:	40013800 	.word	0x40013800

08001a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a36      	ldr	r2, [pc, #216]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001aa6:	f043 0310 	orr.w	r3, r3, #16
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a30      	ldr	r2, [pc, #192]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001abe:	f043 0320 	orr.w	r3, r3, #32
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0320 	and.w	r3, r3, #32
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001aee:	f043 0308 	orr.w	r3, r3, #8
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <MX_GPIO_Init+0xf4>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b06:	481f      	ldr	r0, [pc, #124]	; (8001b84 <MX_GPIO_Init+0xf8>)
 8001b08:	f000 fd4e 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2118      	movs	r1, #24
 8001b10:	481d      	ldr	r0, [pc, #116]	; (8001b88 <MX_GPIO_Init+0xfc>)
 8001b12:	f000 fd49 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2302      	movs	r3, #2
 8001b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4815      	ldr	r0, [pc, #84]	; (8001b84 <MX_GPIO_Init+0xf8>)
 8001b30:	f000 fbe0 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b34:	2304      	movs	r3, #4
 8001b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_GPIO_Init+0x100>)
 8001b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	4619      	mov	r1, r3
 8001b46:	4810      	ldr	r0, [pc, #64]	; (8001b88 <MX_GPIO_Init+0xfc>)
 8001b48:	f000 fbd4 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001b4c:	2318      	movs	r3, #24
 8001b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	4809      	ldr	r0, [pc, #36]	; (8001b88 <MX_GPIO_Init+0xfc>)
 8001b64:	f000 fbc6 	bl	80022f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2008      	movs	r0, #8
 8001b6e:	f000 fb8a 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001b72:	2008      	movs	r0, #8
 8001b74:	f000 fba3 	bl	80022be <HAL_NVIC_EnableIRQ>

}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40011000 	.word	0x40011000
 8001b88:	40010800 	.word	0x40010800
 8001b8c:	10210000 	.word	0x10210000

08001b90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_2){
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d107      	bne.n	8001bb0 <HAL_GPIO_EXTI_Callback+0x20>
		  lcd_send_string("      Adams");
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <HAL_GPIO_EXTI_Callback+0x28>)
 8001ba2:	f7ff fd5e 	bl	8001662 <lcd_send_string>
		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001baa:	4804      	ldr	r0, [pc, #16]	; (8001bbc <HAL_GPIO_EXTI_Callback+0x2c>)
 8001bac:	f000 fd14 	bl	80025d8 <HAL_GPIO_TogglePin>
	}
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	08005394 	.word	0x08005394
 8001bbc:	40011000 	.word	0x40011000

08001bc0 <GrayToBinary>:


uint32_t GrayToBinary(uint32_t num)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
    uint32_t mask = num >> 1;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
    while (mask != 0)
 8001bce:	e006      	b.n	8001bde <GrayToBinary+0x1e>
    {
        num = num ^ mask;
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4053      	eors	r3, r2
 8001bd6:	607b      	str	r3, [r7, #4]
        mask = mask >> 1;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	085b      	lsrs	r3, r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
    while (mask != 0)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f5      	bne.n	8001bd0 <GrayToBinary+0x10>
    }
    return num;
 8001be4:	687b      	ldr	r3, [r7, #4]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_MspInit+0x40>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <HAL_MspInit+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6193      	str	r3, [r2, #24]
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_MspInit+0x40>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_MspInit+0x40>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_MspInit+0x40>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	61d3      	str	r3, [r2, #28]
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_MspInit+0x40>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40021000 	.word	0x40021000

08001c40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <HAL_I2C_MspInit+0x70>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d123      	bne.n	8001ca8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_I2C_MspInit+0x74>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_I2C_MspInit+0x74>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_I2C_MspInit+0x74>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c78:	23c0      	movs	r3, #192	; 0xc0
 8001c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c7c:	2312      	movs	r3, #18
 8001c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <HAL_I2C_MspInit+0x78>)
 8001c8c:	f000 fb32 	bl	80022f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_I2C_MspInit+0x74>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_I2C_MspInit+0x74>)
 8001c96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c9a:	61d3      	str	r3, [r2, #28]
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_I2C_MspInit+0x74>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010c00 	.word	0x40010c00

08001cbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a37      	ldr	r2, [pc, #220]	; (8001db4 <HAL_SPI_MspInit+0xf8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d130      	bne.n	8001d3e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cdc:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <HAL_SPI_MspInit+0xfc>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a35      	ldr	r2, [pc, #212]	; (8001db8 <HAL_SPI_MspInit+0xfc>)
 8001ce2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <HAL_SPI_MspInit+0xfc>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HAL_SPI_MspInit+0xfc>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <HAL_SPI_MspInit+0xfc>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_SPI_MspInit+0xfc>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d0c:	23a0      	movs	r3, #160	; 0xa0
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0318 	add.w	r3, r7, #24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4827      	ldr	r0, [pc, #156]	; (8001dbc <HAL_SPI_MspInit+0x100>)
 8001d20:	f000 fae8 	bl	80022f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d24:	2340      	movs	r3, #64	; 0x40
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0318 	add.w	r3, r7, #24
 8001d34:	4619      	mov	r1, r3
 8001d36:	4821      	ldr	r0, [pc, #132]	; (8001dbc <HAL_SPI_MspInit+0x100>)
 8001d38:	f000 fadc 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d3c:	e036      	b.n	8001dac <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <HAL_SPI_MspInit+0x104>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d131      	bne.n	8001dac <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_SPI_MspInit+0xfc>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <HAL_SPI_MspInit+0xfc>)
 8001d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d52:	61d3      	str	r3, [r2, #28]
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_SPI_MspInit+0xfc>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_SPI_MspInit+0xfc>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_SPI_MspInit+0xfc>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_SPI_MspInit+0xfc>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d78:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d86:	f107 0318 	add.w	r3, r7, #24
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <HAL_SPI_MspInit+0x108>)
 8001d8e:	f000 fab1 	bl	80022f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	4619      	mov	r1, r3
 8001da6:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <HAL_SPI_MspInit+0x108>)
 8001da8:	f000 faa4 	bl	80022f4 <HAL_GPIO_Init>
}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40013000 	.word	0x40013000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010800 	.word	0x40010800
 8001dc0:	40003800 	.word	0x40003800
 8001dc4:	40010c00 	.word	0x40010c00

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_UART_MspInit+0x8c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d131      	bne.n	8001e4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_UART_MspInit+0x90>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <HAL_UART_MspInit+0x90>)
 8001dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_UART_MspInit+0x90>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_UART_MspInit+0x90>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <HAL_UART_MspInit+0x90>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_UART_MspInit+0x90>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 0310 	add.w	r3, r7, #16
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <HAL_UART_MspInit+0x94>)
 8001e2e:	f000 fa61 	bl	80022f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	4619      	mov	r1, r3
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <HAL_UART_MspInit+0x94>)
 8001e48:	f000 fa54 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e4c:	bf00      	nop
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40013800 	.word	0x40013800
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010800 	.word	0x40010800

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <HardFault_Handler+0x4>

08001e72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <MemManage_Handler+0x4>

08001e78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <BusFault_Handler+0x4>

08001e7e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <UsageFault_Handler+0x4>

08001e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f000 f8d6 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001eb8:	2004      	movs	r0, #4
 8001eba:	f000 fba5 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_sbrk+0x50>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <_sbrk+0x16>
		heap_end = &end;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <_sbrk+0x50>)
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <_sbrk+0x54>)
 8001ed8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <_sbrk+0x50>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <_sbrk+0x50>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	466a      	mov	r2, sp
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d907      	bls.n	8001efe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001eee:	f002 fb05 	bl	80044fc <__errno>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	230c      	movs	r3, #12
 8001ef6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001efc:	e006      	b.n	8001f0c <_sbrk+0x48>
	}

	heap_end += incr;
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <_sbrk+0x50>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	4a03      	ldr	r2, [pc, #12]	; (8001f14 <_sbrk+0x50>)
 8001f08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000168 	.word	0x20000168
 8001f18:	20000308 	.word	0x20000308

08001f1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <SystemInit+0x5c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <SystemInit+0x5c>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <SystemInit+0x5c>)
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4911      	ldr	r1, [pc, #68]	; (8001f78 <SystemInit+0x5c>)
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <SystemInit+0x60>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <SystemInit+0x5c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	; (8001f78 <SystemInit+0x5c>)
 8001f3e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <SystemInit+0x5c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <SystemInit+0x5c>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <SystemInit+0x5c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <SystemInit+0x5c>)
 8001f5a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f5e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SystemInit+0x5c>)
 8001f62:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f66:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SystemInit+0x64>)
 8001f6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f6e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	f8ff0000 	.word	0xf8ff0000
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f86:	e003      	b.n	8001f90 <LoopCopyDataInit>

08001f88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f8e:	3104      	adds	r1, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f90:	480a      	ldr	r0, [pc, #40]	; (8001fbc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f98:	d3f6      	bcc.n	8001f88 <CopyDataInit>
  ldr r2, =_sbss
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f9c:	e002      	b.n	8001fa4 <LoopFillZerobss>

08001f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001fa0:	f842 3b04 	str.w	r3, [r2], #4

08001fa4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fa6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fa8:	d3f9      	bcc.n	8001f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001faa:	f7ff ffb7 	bl	8001f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f002 faab 	bl	8004508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fb2:	f7ff fb6b 	bl	800168c <main>
  bx lr
 8001fb6:	4770      	bx	lr
  ldr r3, =_sidata
 8001fb8:	08005408 	.word	0x08005408
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001fc0:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 8001fc4:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 8001fc8:	20000304 	.word	0x20000304

08001fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC1_2_IRQHandler>
	...

08001fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_Init+0x28>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_Init+0x28>)
 8001fda:	f043 0310 	orr.w	r3, r3, #16
 8001fde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f000 f945 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f000 f808 	bl	8001ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fec:	f7ff fe06 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40022000 	.word	0x40022000

08001ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_InitTick+0x54>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_InitTick+0x58>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002012:	fbb3 f3f1 	udiv	r3, r3, r1
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f95d 	bl	80022da <HAL_SYSTICK_Config>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00e      	b.n	8002048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0f      	cmp	r3, #15
 800202e:	d80a      	bhi.n	8002046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	2200      	movs	r2, #0
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002038:	f000 f925 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <HAL_InitTick+0x5c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e000      	b.n	8002048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000028 	.word	0x20000028
 8002054:	20000030 	.word	0x20000030
 8002058:	2000002c 	.word	0x2000002c

0800205c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_IncTick+0x1c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_IncTick+0x20>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a03      	ldr	r2, [pc, #12]	; (800207c <HAL_IncTick+0x20>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	20000030 	.word	0x20000030
 800207c:	200002fc 	.word	0x200002fc

08002080 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return uwTick;
 8002084:	4b02      	ldr	r3, [pc, #8]	; (8002090 <HAL_GetTick+0x10>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	200002fc 	.word	0x200002fc

08002094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff fff0 	bl	8002080 <HAL_GetTick>
 80020a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ac:	d005      	beq.n	80020ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_Delay+0x40>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ba:	bf00      	nop
 80020bc:	f7ff ffe0 	bl	8002080 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d8f7      	bhi.n	80020bc <HAL_Delay+0x28>
  {
  }
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000030 	.word	0x20000030

080020d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	; (800211c <__NVIC_SetPriorityGrouping+0x44>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0b      	blt.n	8002166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4906      	ldr	r1, [pc, #24]	; (8002170 <__NVIC_EnableIRQ+0x34>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002250:	f7ff ff90 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff2d 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff42 	bl	8002120 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff90 	bl	80021c8 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5f 	bl	8002174 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff35 	bl	800213c <__NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffa2 	bl	800222c <SysTick_Config>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b08b      	sub	sp, #44	; 0x2c
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002306:	e127      	b.n	8002558 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002308:	2201      	movs	r2, #1
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	429a      	cmp	r2, r3
 8002322:	f040 8116 	bne.w	8002552 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b12      	cmp	r3, #18
 800232c:	d034      	beq.n	8002398 <HAL_GPIO_Init+0xa4>
 800232e:	2b12      	cmp	r3, #18
 8002330:	d80d      	bhi.n	800234e <HAL_GPIO_Init+0x5a>
 8002332:	2b02      	cmp	r3, #2
 8002334:	d02b      	beq.n	800238e <HAL_GPIO_Init+0x9a>
 8002336:	2b02      	cmp	r3, #2
 8002338:	d804      	bhi.n	8002344 <HAL_GPIO_Init+0x50>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d031      	beq.n	80023a2 <HAL_GPIO_Init+0xae>
 800233e:	2b01      	cmp	r3, #1
 8002340:	d01c      	beq.n	800237c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002342:	e048      	b.n	80023d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002344:	2b03      	cmp	r3, #3
 8002346:	d043      	beq.n	80023d0 <HAL_GPIO_Init+0xdc>
 8002348:	2b11      	cmp	r3, #17
 800234a:	d01b      	beq.n	8002384 <HAL_GPIO_Init+0x90>
          break;
 800234c:	e043      	b.n	80023d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800234e:	4a89      	ldr	r2, [pc, #548]	; (8002574 <HAL_GPIO_Init+0x280>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d026      	beq.n	80023a2 <HAL_GPIO_Init+0xae>
 8002354:	4a87      	ldr	r2, [pc, #540]	; (8002574 <HAL_GPIO_Init+0x280>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d806      	bhi.n	8002368 <HAL_GPIO_Init+0x74>
 800235a:	4a87      	ldr	r2, [pc, #540]	; (8002578 <HAL_GPIO_Init+0x284>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d020      	beq.n	80023a2 <HAL_GPIO_Init+0xae>
 8002360:	4a86      	ldr	r2, [pc, #536]	; (800257c <HAL_GPIO_Init+0x288>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01d      	beq.n	80023a2 <HAL_GPIO_Init+0xae>
          break;
 8002366:	e036      	b.n	80023d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002368:	4a85      	ldr	r2, [pc, #532]	; (8002580 <HAL_GPIO_Init+0x28c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d019      	beq.n	80023a2 <HAL_GPIO_Init+0xae>
 800236e:	4a85      	ldr	r2, [pc, #532]	; (8002584 <HAL_GPIO_Init+0x290>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d016      	beq.n	80023a2 <HAL_GPIO_Init+0xae>
 8002374:	4a84      	ldr	r2, [pc, #528]	; (8002588 <HAL_GPIO_Init+0x294>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_GPIO_Init+0xae>
          break;
 800237a:	e02c      	b.n	80023d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	623b      	str	r3, [r7, #32]
          break;
 8002382:	e028      	b.n	80023d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	3304      	adds	r3, #4
 800238a:	623b      	str	r3, [r7, #32]
          break;
 800238c:	e023      	b.n	80023d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	3308      	adds	r3, #8
 8002394:	623b      	str	r3, [r7, #32]
          break;
 8002396:	e01e      	b.n	80023d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	330c      	adds	r3, #12
 800239e:	623b      	str	r3, [r7, #32]
          break;
 80023a0:	e019      	b.n	80023d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023aa:	2304      	movs	r3, #4
 80023ac:	623b      	str	r3, [r7, #32]
          break;
 80023ae:	e012      	b.n	80023d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d105      	bne.n	80023c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b8:	2308      	movs	r3, #8
 80023ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	611a      	str	r2, [r3, #16]
          break;
 80023c2:	e008      	b.n	80023d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c4:	2308      	movs	r3, #8
 80023c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	615a      	str	r2, [r3, #20]
          break;
 80023ce:	e002      	b.n	80023d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023d0:	2300      	movs	r3, #0
 80023d2:	623b      	str	r3, [r7, #32]
          break;
 80023d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2bff      	cmp	r3, #255	; 0xff
 80023da:	d801      	bhi.n	80023e0 <HAL_GPIO_Init+0xec>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	e001      	b.n	80023e4 <HAL_GPIO_Init+0xf0>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2bff      	cmp	r3, #255	; 0xff
 80023ea:	d802      	bhi.n	80023f2 <HAL_GPIO_Init+0xfe>
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x104>
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	3b08      	subs	r3, #8
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	210f      	movs	r1, #15
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	401a      	ands	r2, r3
 800240a:	6a39      	ldr	r1, [r7, #32]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	431a      	orrs	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8096 	beq.w	8002552 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002426:	4b59      	ldr	r3, [pc, #356]	; (800258c <HAL_GPIO_Init+0x298>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	4a58      	ldr	r2, [pc, #352]	; (800258c <HAL_GPIO_Init+0x298>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6193      	str	r3, [r2, #24]
 8002432:	4b56      	ldr	r3, [pc, #344]	; (800258c <HAL_GPIO_Init+0x298>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800243e:	4a54      	ldr	r2, [pc, #336]	; (8002590 <HAL_GPIO_Init+0x29c>)
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4013      	ands	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4b      	ldr	r2, [pc, #300]	; (8002594 <HAL_GPIO_Init+0x2a0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0x19e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4a      	ldr	r2, [pc, #296]	; (8002598 <HAL_GPIO_Init+0x2a4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00d      	beq.n	800248e <HAL_GPIO_Init+0x19a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a49      	ldr	r2, [pc, #292]	; (800259c <HAL_GPIO_Init+0x2a8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x196>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a48      	ldr	r2, [pc, #288]	; (80025a0 <HAL_GPIO_Init+0x2ac>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_GPIO_Init+0x192>
 8002482:	2303      	movs	r3, #3
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x1a0>
 8002486:	2304      	movs	r3, #4
 8002488:	e004      	b.n	8002494 <HAL_GPIO_Init+0x1a0>
 800248a:	2302      	movs	r3, #2
 800248c:	e002      	b.n	8002494 <HAL_GPIO_Init+0x1a0>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_GPIO_Init+0x1a0>
 8002492:	2300      	movs	r3, #0
 8002494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002496:	f002 0203 	and.w	r2, r2, #3
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	4093      	lsls	r3, r2
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024a4:	493a      	ldr	r1, [pc, #232]	; (8002590 <HAL_GPIO_Init+0x29c>)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024be:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4938      	ldr	r1, [pc, #224]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
 80024ca:	e006      	b.n	80024da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024cc:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	4933      	ldr	r1, [pc, #204]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024e6:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	492e      	ldr	r1, [pc, #184]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
 80024f2:	e006      	b.n	8002502 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	4929      	ldr	r1, [pc, #164]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 80024fe:	4013      	ands	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800250e:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	4924      	ldr	r1, [pc, #144]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
 800251a:	e006      	b.n	800252a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	43db      	mvns	r3, r3
 8002524:	491f      	ldr	r1, [pc, #124]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 8002526:	4013      	ands	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d006      	beq.n	8002544 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	491a      	ldr	r1, [pc, #104]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	60cb      	str	r3, [r1, #12]
 8002542:	e006      	b.n	8002552 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002544:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	43db      	mvns	r3, r3
 800254c:	4915      	ldr	r1, [pc, #84]	; (80025a4 <HAL_GPIO_Init+0x2b0>)
 800254e:	4013      	ands	r3, r2
 8002550:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	3301      	adds	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	f47f aed0 	bne.w	8002308 <HAL_GPIO_Init+0x14>
  }
}
 8002568:	bf00      	nop
 800256a:	372c      	adds	r7, #44	; 0x2c
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	10210000 	.word	0x10210000
 8002578:	10110000 	.word	0x10110000
 800257c:	10120000 	.word	0x10120000
 8002580:	10310000 	.word	0x10310000
 8002584:	10320000 	.word	0x10320000
 8002588:	10220000 	.word	0x10220000
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000
 8002594:	40010800 	.word	0x40010800
 8002598:	40010c00 	.word	0x40010c00
 800259c:	40011000 	.word	0x40011000
 80025a0:	40011400 	.word	0x40011400
 80025a4:	40010400 	.word	0x40010400

080025a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
 80025b4:	4613      	mov	r3, r2
 80025b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b8:	787b      	ldrb	r3, [r7, #1]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025c4:	e003      	b.n	80025ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	041a      	lsls	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	611a      	str	r2, [r3, #16]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025f0:	887a      	ldrh	r2, [r7, #2]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80025f6:	e002      	b.n	80025fe <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025f8:	887a      	ldrh	r2, [r7, #2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	611a      	str	r2, [r3, #16]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d006      	beq.n	800262c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fab2 	bl	8001b90 <HAL_GPIO_EXTI_Callback>
  }
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40010400 	.word	0x40010400

08002638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e10f      	b.n	800286a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff faee 	bl	8001c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2224      	movs	r2, #36	; 0x24
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800267c:	f000 ffd4 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8002680:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4a7b      	ldr	r2, [pc, #492]	; (8002874 <HAL_I2C_Init+0x23c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d807      	bhi.n	800269c <HAL_I2C_Init+0x64>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a7a      	ldr	r2, [pc, #488]	; (8002878 <HAL_I2C_Init+0x240>)
 8002690:	4293      	cmp	r3, r2
 8002692:	bf94      	ite	ls
 8002694:	2301      	movls	r3, #1
 8002696:	2300      	movhi	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e006      	b.n	80026aa <HAL_I2C_Init+0x72>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4a77      	ldr	r2, [pc, #476]	; (800287c <HAL_I2C_Init+0x244>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	bf94      	ite	ls
 80026a4:	2301      	movls	r3, #1
 80026a6:	2300      	movhi	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0db      	b.n	800286a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a72      	ldr	r2, [pc, #456]	; (8002880 <HAL_I2C_Init+0x248>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	0c9b      	lsrs	r3, r3, #18
 80026bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a64      	ldr	r2, [pc, #400]	; (8002874 <HAL_I2C_Init+0x23c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d802      	bhi.n	80026ec <HAL_I2C_Init+0xb4>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	3301      	adds	r3, #1
 80026ea:	e009      	b.n	8002700 <HAL_I2C_Init+0xc8>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	4a63      	ldr	r2, [pc, #396]	; (8002884 <HAL_I2C_Init+0x24c>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	099b      	lsrs	r3, r3, #6
 80026fe:	3301      	adds	r3, #1
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	430b      	orrs	r3, r1
 8002706:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002712:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4956      	ldr	r1, [pc, #344]	; (8002874 <HAL_I2C_Init+0x23c>)
 800271c:	428b      	cmp	r3, r1
 800271e:	d80d      	bhi.n	800273c <HAL_I2C_Init+0x104>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1e59      	subs	r1, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	fbb1 f3f3 	udiv	r3, r1, r3
 800272e:	3301      	adds	r3, #1
 8002730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002734:	2b04      	cmp	r3, #4
 8002736:	bf38      	it	cc
 8002738:	2304      	movcc	r3, #4
 800273a:	e04f      	b.n	80027dc <HAL_I2C_Init+0x1a4>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <HAL_I2C_Init+0x130>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1e58      	subs	r0, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	440b      	add	r3, r1
 8002752:	fbb0 f3f3 	udiv	r3, r0, r3
 8002756:	3301      	adds	r3, #1
 8002758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	e012      	b.n	800278e <HAL_I2C_Init+0x156>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e58      	subs	r0, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	0099      	lsls	r1, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	fbb0 f3f3 	udiv	r3, r0, r3
 800277e:	3301      	adds	r3, #1
 8002780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Init+0x15e>
 8002792:	2301      	movs	r3, #1
 8002794:	e022      	b.n	80027dc <HAL_I2C_Init+0x1a4>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10e      	bne.n	80027bc <HAL_I2C_Init+0x184>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1e58      	subs	r0, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	440b      	add	r3, r1
 80027ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b0:	3301      	adds	r3, #1
 80027b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ba:	e00f      	b.n	80027dc <HAL_I2C_Init+0x1a4>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e58      	subs	r0, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	0099      	lsls	r1, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	6809      	ldr	r1, [r1, #0]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69da      	ldr	r2, [r3, #28]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800280a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6911      	ldr	r1, [r2, #16]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68d2      	ldr	r2, [r2, #12]
 8002816:	4311      	orrs	r1, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	430b      	orrs	r3, r1
 800281e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	000186a0 	.word	0x000186a0
 8002878:	001e847f 	.word	0x001e847f
 800287c:	003d08ff 	.word	0x003d08ff
 8002880:	431bde83 	.word	0x431bde83
 8002884:	10624dd3 	.word	0x10624dd3

08002888 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	461a      	mov	r2, r3
 8002894:	460b      	mov	r3, r1
 8002896:	817b      	strh	r3, [r7, #10]
 8002898:	4613      	mov	r3, r2
 800289a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff fbf0 	bl	8002080 <HAL_GetTick>
 80028a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	f040 80e0 	bne.w	8002a70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2319      	movs	r3, #25
 80028b6:	2201      	movs	r2, #1
 80028b8:	4970      	ldr	r1, [pc, #448]	; (8002a7c <HAL_I2C_Master_Transmit+0x1f4>)
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f958 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
 80028c8:	e0d3      	b.n	8002a72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_I2C_Master_Transmit+0x50>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e0cc      	b.n	8002a72 <HAL_I2C_Master_Transmit+0x1ea>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d007      	beq.n	80028fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2221      	movs	r2, #33	; 0x21
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2210      	movs	r2, #16
 800291a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	893a      	ldrh	r2, [r7, #8]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a50      	ldr	r2, [pc, #320]	; (8002a80 <HAL_I2C_Master_Transmit+0x1f8>)
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002940:	8979      	ldrh	r1, [r7, #10]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	6a3a      	ldr	r2, [r7, #32]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f89c 	bl	8002a84 <I2C_MasterRequestWrite>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e08d      	b.n	8002a72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800296c:	e066      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	6a39      	ldr	r1, [r7, #32]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f9d2 	bl	8002d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00d      	beq.n	800299a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b04      	cmp	r3, #4
 8002984:	d107      	bne.n	8002996 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06b      	b.n	8002a72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d11b      	bne.n	8002a10 <HAL_I2C_Master_Transmit+0x188>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d017      	beq.n	8002a10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	6a39      	ldr	r1, [r7, #32]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f9c2 	bl	8002d9e <I2C_WaitOnBTFFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00d      	beq.n	8002a3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d107      	bne.n	8002a38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e01a      	b.n	8002a72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d194      	bne.n	800296e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	00100002 	.word	0x00100002
 8002a80:	ffff0000 	.word	0xffff0000

08002a84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	460b      	mov	r3, r1
 8002a92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d006      	beq.n	8002aae <I2C_MasterRequestWrite+0x2a>
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d003      	beq.n	8002aae <I2C_MasterRequestWrite+0x2a>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aac:	d108      	bne.n	8002ac0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	e00b      	b.n	8002ad8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	2b12      	cmp	r3, #18
 8002ac6:	d107      	bne.n	8002ad8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f843 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e035      	b.n	8002b60 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afc:	d108      	bne.n	8002b10 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002afe:	897b      	ldrh	r3, [r7, #10]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b0c:	611a      	str	r2, [r3, #16]
 8002b0e:	e01b      	b.n	8002b48 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b10:	897b      	ldrh	r3, [r7, #10]
 8002b12:	11db      	asrs	r3, r3, #7
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f003 0306 	and.w	r3, r3, #6
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f063 030f 	orn	r3, r3, #15
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	490e      	ldr	r1, [pc, #56]	; (8002b68 <I2C_MasterRequestWrite+0xe4>)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f875 	bl	8002c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e010      	b.n	8002b60 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4907      	ldr	r1, [pc, #28]	; (8002b6c <I2C_MasterRequestWrite+0xe8>)
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f865 	bl	8002c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	00010008 	.word	0x00010008
 8002b6c:	00010002 	.word	0x00010002

08002b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b80:	e025      	b.n	8002bce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b88:	d021      	beq.n	8002bce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7ff fa79 	bl	8002080 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d302      	bcc.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d116      	bne.n	8002bce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0220 	orr.w	r2, r3, #32
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e023      	b.n	8002c16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d10d      	bne.n	8002bf4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4013      	ands	r3, r2
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	e00c      	b.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bf0c      	ite	eq
 8002c06:	2301      	moveq	r3, #1
 8002c08:	2300      	movne	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d0b6      	beq.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c2c:	e051      	b.n	8002cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3c:	d123      	bne.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f043 0204 	orr.w	r2, r3, #4
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e046      	b.n	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c8c:	d021      	beq.n	8002cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8e:	f7ff f9f7 	bl	8002080 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d302      	bcc.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d116      	bne.n	8002cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f043 0220 	orr.w	r2, r3, #32
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e020      	b.n	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d10c      	bne.n	8002cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	e00b      	b.n	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	43da      	mvns	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4013      	ands	r3, r2
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d18d      	bne.n	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d28:	e02d      	b.n	8002d86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f878 	bl	8002e20 <I2C_IsAcknowledgeFailed>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e02d      	b.n	8002d96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d40:	d021      	beq.n	8002d86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d42:	f7ff f99d 	bl	8002080 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d302      	bcc.n	8002d58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d116      	bne.n	8002d86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f043 0220 	orr.w	r2, r3, #32
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e007      	b.n	8002d96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d90:	2b80      	cmp	r3, #128	; 0x80
 8002d92:	d1ca      	bne.n	8002d2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002daa:	e02d      	b.n	8002e08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f837 	bl	8002e20 <I2C_IsAcknowledgeFailed>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e02d      	b.n	8002e18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc2:	d021      	beq.n	8002e08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc4:	f7ff f95c 	bl	8002080 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d302      	bcc.n	8002dda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e007      	b.n	8002e18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d1ca      	bne.n	8002dac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e36:	d11b      	bne.n	8002e70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f043 0204 	orr.w	r2, r3, #4
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e26c      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8087 	beq.w	8002faa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e9c:	4b92      	ldr	r3, [pc, #584]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d00c      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ea8:	4b8f      	ldr	r3, [pc, #572]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d112      	bne.n	8002eda <HAL_RCC_OscConfig+0x5e>
 8002eb4:	4b8c      	ldr	r3, [pc, #560]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec0:	d10b      	bne.n	8002eda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec2:	4b89      	ldr	r3, [pc, #548]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d06c      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x12c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d168      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e246      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x76>
 8002ee4:	4b80      	ldr	r3, [pc, #512]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a7f      	ldr	r2, [pc, #508]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	e02e      	b.n	8002f50 <HAL_RCC_OscConfig+0xd4>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x98>
 8002efa:	4b7b      	ldr	r3, [pc, #492]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7a      	ldr	r2, [pc, #488]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b78      	ldr	r3, [pc, #480]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a77      	ldr	r2, [pc, #476]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e01d      	b.n	8002f50 <HAL_RCC_OscConfig+0xd4>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0xbc>
 8002f1e:	4b72      	ldr	r3, [pc, #456]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a71      	ldr	r2, [pc, #452]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b6f      	ldr	r3, [pc, #444]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a6e      	ldr	r2, [pc, #440]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e00b      	b.n	8002f50 <HAL_RCC_OscConfig+0xd4>
 8002f38:	4b6b      	ldr	r3, [pc, #428]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a6a      	ldr	r2, [pc, #424]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b68      	ldr	r3, [pc, #416]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a67      	ldr	r2, [pc, #412]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d013      	beq.n	8002f80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7ff f892 	bl	8002080 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f60:	f7ff f88e 	bl	8002080 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	; 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e1fa      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b5d      	ldr	r3, [pc, #372]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0xe4>
 8002f7e:	e014      	b.n	8002faa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7ff f87e 	bl	8002080 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7ff f87a 	bl	8002080 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e1e6      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x10c>
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d063      	beq.n	800307e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fc2:	4b49      	ldr	r3, [pc, #292]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d11c      	bne.n	8003008 <HAL_RCC_OscConfig+0x18c>
 8002fce:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d116      	bne.n	8003008 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fda:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x176>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d001      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e1ba      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff2:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4939      	ldr	r1, [pc, #228]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	e03a      	b.n	800307e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003010:	4b36      	ldr	r3, [pc, #216]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7ff f833 	bl	8002080 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301e:	f7ff f82f 	bl	8002080 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e19b      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303c:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4927      	ldr	r1, [pc, #156]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
 8003050:	e015      	b.n	800307e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003052:	4b26      	ldr	r3, [pc, #152]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7ff f812 	bl	8002080 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003060:	f7ff f80e 	bl	8002080 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e17a      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d03a      	beq.n	8003100 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d019      	beq.n	80030c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003092:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003098:	f7fe fff2 	bl	8002080 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a0:	f7fe ffee 	bl	8002080 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e15a      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030be:	2001      	movs	r0, #1
 80030c0:	f000 fada 	bl	8003678 <RCC_Delay>
 80030c4:	e01c      	b.n	8003100 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030cc:	f7fe ffd8 	bl	8002080 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d2:	e00f      	b.n	80030f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d4:	f7fe ffd4 	bl	8002080 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d908      	bls.n	80030f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e140      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	42420000 	.word	0x42420000
 80030f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	4b9e      	ldr	r3, [pc, #632]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e9      	bne.n	80030d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a6 	beq.w	800325a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003112:	4b97      	ldr	r3, [pc, #604]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10d      	bne.n	800313a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	4b94      	ldr	r3, [pc, #592]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4a93      	ldr	r2, [pc, #588]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 8003124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003128:	61d3      	str	r3, [r2, #28]
 800312a:	4b91      	ldr	r3, [pc, #580]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003136:	2301      	movs	r3, #1
 8003138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313a:	4b8e      	ldr	r3, [pc, #568]	; (8003374 <HAL_RCC_OscConfig+0x4f8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d118      	bne.n	8003178 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003146:	4b8b      	ldr	r3, [pc, #556]	; (8003374 <HAL_RCC_OscConfig+0x4f8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a8a      	ldr	r2, [pc, #552]	; (8003374 <HAL_RCC_OscConfig+0x4f8>)
 800314c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003152:	f7fe ff95 	bl	8002080 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315a:	f7fe ff91 	bl	8002080 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b64      	cmp	r3, #100	; 0x64
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e0fd      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	4b81      	ldr	r3, [pc, #516]	; (8003374 <HAL_RCC_OscConfig+0x4f8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d106      	bne.n	800318e <HAL_RCC_OscConfig+0x312>
 8003180:	4b7b      	ldr	r3, [pc, #492]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4a7a      	ldr	r2, [pc, #488]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6213      	str	r3, [r2, #32]
 800318c:	e02d      	b.n	80031ea <HAL_RCC_OscConfig+0x36e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x334>
 8003196:	4b76      	ldr	r3, [pc, #472]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4a75      	ldr	r2, [pc, #468]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	6213      	str	r3, [r2, #32]
 80031a2:	4b73      	ldr	r3, [pc, #460]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4a72      	ldr	r2, [pc, #456]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80031a8:	f023 0304 	bic.w	r3, r3, #4
 80031ac:	6213      	str	r3, [r2, #32]
 80031ae:	e01c      	b.n	80031ea <HAL_RCC_OscConfig+0x36e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d10c      	bne.n	80031d2 <HAL_RCC_OscConfig+0x356>
 80031b8:	4b6d      	ldr	r3, [pc, #436]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4a6c      	ldr	r2, [pc, #432]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80031be:	f043 0304 	orr.w	r3, r3, #4
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	4b6a      	ldr	r3, [pc, #424]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4a69      	ldr	r2, [pc, #420]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6213      	str	r3, [r2, #32]
 80031d0:	e00b      	b.n	80031ea <HAL_RCC_OscConfig+0x36e>
 80031d2:	4b67      	ldr	r3, [pc, #412]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a66      	ldr	r2, [pc, #408]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	6213      	str	r3, [r2, #32]
 80031de:	4b64      	ldr	r3, [pc, #400]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a63      	ldr	r2, [pc, #396]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80031e4:	f023 0304 	bic.w	r3, r3, #4
 80031e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d015      	beq.n	800321e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f2:	f7fe ff45 	bl	8002080 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	e00a      	b.n	8003210 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fe ff41 	bl	8002080 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e0ab      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003210:	4b57      	ldr	r3, [pc, #348]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ee      	beq.n	80031fa <HAL_RCC_OscConfig+0x37e>
 800321c:	e014      	b.n	8003248 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fe ff2f 	bl	8002080 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe ff2b 	bl	8002080 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e095      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323c:	4b4c      	ldr	r3, [pc, #304]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ee      	bne.n	8003226 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d105      	bne.n	800325a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324e:	4b48      	ldr	r3, [pc, #288]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	4a47      	ldr	r2, [pc, #284]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 8003254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003258:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8081 	beq.w	8003366 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003264:	4b42      	ldr	r3, [pc, #264]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b08      	cmp	r3, #8
 800326e:	d061      	beq.n	8003334 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d146      	bne.n	8003306 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003278:	4b3f      	ldr	r3, [pc, #252]	; (8003378 <HAL_RCC_OscConfig+0x4fc>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe feff 	bl	8002080 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe fefb 	bl	8002080 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e067      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003298:	4b35      	ldr	r3, [pc, #212]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ac:	d108      	bne.n	80032c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ae:	4b30      	ldr	r3, [pc, #192]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	492d      	ldr	r1, [pc, #180]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c0:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a19      	ldr	r1, [r3, #32]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	430b      	orrs	r3, r1
 80032d2:	4927      	ldr	r1, [pc, #156]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d8:	4b27      	ldr	r3, [pc, #156]	; (8003378 <HAL_RCC_OscConfig+0x4fc>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fe fecf 	bl	8002080 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fe fecb 	bl	8002080 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e037      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x46a>
 8003304:	e02f      	b.n	8003366 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003306:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <HAL_RCC_OscConfig+0x4fc>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fe feb8 	bl	8002080 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe feb4 	bl	8002080 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e020      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x498>
 8003332:	e018      	b.n	8003366 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e013      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_OscConfig+0x4f4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	429a      	cmp	r2, r3
 8003352:	d106      	bne.n	8003362 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	40007000 	.word	0x40007000
 8003378:	42420060 	.word	0x42420060

0800337c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0d0      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b6a      	ldr	r3, [pc, #424]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d910      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b67      	ldr	r3, [pc, #412]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 0207 	bic.w	r2, r3, #7
 80033a6:	4965      	ldr	r1, [pc, #404]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0b8      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d8:	4b59      	ldr	r3, [pc, #356]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a58      	ldr	r2, [pc, #352]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a52      	ldr	r2, [pc, #328]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fc:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	494d      	ldr	r1, [pc, #308]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d040      	beq.n	800349c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d115      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e07f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e073      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344a:	4b3d      	ldr	r3, [pc, #244]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e06b      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345a:	4b39      	ldr	r3, [pc, #228]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f023 0203 	bic.w	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4936      	ldr	r1, [pc, #216]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800346c:	f7fe fe08 	bl	8002080 <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	e00a      	b.n	800348a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003474:	f7fe fe04 	bl	8002080 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e053      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 020c 	and.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	429a      	cmp	r2, r3
 800349a:	d1eb      	bne.n	8003474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d210      	bcs.n	80034cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 0207 	bic.w	r2, r3, #7
 80034b2:	4922      	ldr	r1, [pc, #136]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e032      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4916      	ldr	r1, [pc, #88]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034f6:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	490e      	ldr	r1, [pc, #56]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	4313      	orrs	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800350a:	f000 f821 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 800350e:	4601      	mov	r1, r0
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	5cd3      	ldrb	r3, [r2, r3]
 800351e:	fa21 f303 	lsr.w	r3, r1, r3
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_RCC_ClockConfig+0x1cc>)
 8003524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1d0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe fd66 	bl	8001ffc <HAL_InitTick>

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40022000 	.word	0x40022000
 8003540:	40021000 	.word	0x40021000
 8003544:	080053b4 	.word	0x080053b4
 8003548:	20000028 	.word	0x20000028
 800354c:	2000002c 	.word	0x2000002c

08003550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	b490      	push	{r4, r7}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003558:	1d3c      	adds	r4, r7, #4
 800355a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800355c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003560:	4b28      	ldr	r3, [pc, #160]	; (8003604 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800357a:	4b23      	ldr	r3, [pc, #140]	; (8003608 <HAL_RCC_GetSysClockFreq+0xb8>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b04      	cmp	r3, #4
 8003588:	d002      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x40>
 800358a:	2b08      	cmp	r3, #8
 800358c:	d003      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x46>
 800358e:	e02d      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003590:	4b1e      	ldr	r3, [pc, #120]	; (800360c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003592:	623b      	str	r3, [r7, #32]
      break;
 8003594:	e02d      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	0c9b      	lsrs	r3, r3, #18
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035a2:	4413      	add	r3, r2
 80035a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	0c5b      	lsrs	r3, r3, #17
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035c2:	4413      	add	r3, r2
 80035c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	4a0f      	ldr	r2, [pc, #60]	; (800360c <HAL_RCC_GetSysClockFreq+0xbc>)
 80035ce:	fb02 f203 	mul.w	r2, r2, r3
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	e004      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	4a0c      	ldr	r2, [pc, #48]	; (8003610 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	623b      	str	r3, [r7, #32]
      break;
 80035ea:	e002      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035ec:	4b07      	ldr	r3, [pc, #28]	; (800360c <HAL_RCC_GetSysClockFreq+0xbc>)
 80035ee:	623b      	str	r3, [r7, #32]
      break;
 80035f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f2:	6a3b      	ldr	r3, [r7, #32]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3728      	adds	r7, #40	; 0x28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc90      	pop	{r4, r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	080053a0 	.word	0x080053a0
 8003604:	080053b0 	.word	0x080053b0
 8003608:	40021000 	.word	0x40021000
 800360c:	007a1200 	.word	0x007a1200
 8003610:	003d0900 	.word	0x003d0900

08003614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003618:	4b02      	ldr	r3, [pc, #8]	; (8003624 <HAL_RCC_GetHCLKFreq+0x10>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	20000028 	.word	0x20000028

08003628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800362c:	f7ff fff2 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 8003630:	4601      	mov	r1, r0
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	4a03      	ldr	r2, [pc, #12]	; (800364c <HAL_RCC_GetPCLK1Freq+0x24>)
 800363e:	5cd3      	ldrb	r3, [r2, r3]
 8003640:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003644:	4618      	mov	r0, r3
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021000 	.word	0x40021000
 800364c:	080053c4 	.word	0x080053c4

08003650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003654:	f7ff ffde 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 8003658:	4601      	mov	r1, r0
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	0adb      	lsrs	r3, r3, #11
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4a03      	ldr	r2, [pc, #12]	; (8003674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003666:	5cd3      	ldrb	r3, [r2, r3]
 8003668:	fa21 f303 	lsr.w	r3, r1, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40021000 	.word	0x40021000
 8003674:	080053c4 	.word	0x080053c4

08003678 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <RCC_Delay+0x34>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <RCC_Delay+0x38>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	0a5b      	lsrs	r3, r3, #9
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003694:	bf00      	nop
  }
  while (Delay --);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1e5a      	subs	r2, r3, #1
 800369a:	60fa      	str	r2, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f9      	bne.n	8003694 <RCC_Delay+0x1c>
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000028 	.word	0x20000028
 80036b0:	10624dd3 	.word	0x10624dd3

080036b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e053      	b.n	800376e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d106      	bne.n	80036e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7fe faeb 	bl	8001cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	ea42 0103 	orr.w	r1, r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	0c1a      	lsrs	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f002 0204 	and.w	r2, r2, #4
 800374c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800375c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b088      	sub	sp, #32
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_SPI_Transmit+0x22>
 8003794:	2302      	movs	r3, #2
 8003796:	e11e      	b.n	80039d6 <HAL_SPI_Transmit+0x260>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037a0:	f7fe fc6e 	bl	8002080 <HAL_GetTick>
 80037a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d002      	beq.n	80037bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
 80037b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037ba:	e103      	b.n	80039c4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_SPI_Transmit+0x52>
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037cc:	e0fa      	b.n	80039c4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2203      	movs	r2, #3
 80037d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003814:	d107      	bne.n	8003826 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003824:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d007      	beq.n	8003844 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384c:	d14b      	bne.n	80038e6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_SPI_Transmit+0xe6>
 8003856:	8afb      	ldrh	r3, [r7, #22]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d13e      	bne.n	80038da <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	881a      	ldrh	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	1c9a      	adds	r2, r3, #2
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003880:	e02b      	b.n	80038da <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b02      	cmp	r3, #2
 800388e:	d112      	bne.n	80038b6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	881a      	ldrh	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	1c9a      	adds	r2, r3, #2
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80038b4:	e011      	b.n	80038da <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b6:	f7fe fbe3 	bl	8002080 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d803      	bhi.n	80038ce <HAL_SPI_Transmit+0x158>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038cc:	d102      	bne.n	80038d4 <HAL_SPI_Transmit+0x15e>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038d8:	e074      	b.n	80039c4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ce      	bne.n	8003882 <HAL_SPI_Transmit+0x10c>
 80038e4:	e04c      	b.n	8003980 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_SPI_Transmit+0x17e>
 80038ee:	8afb      	ldrh	r3, [r7, #22]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d140      	bne.n	8003976 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	7812      	ldrb	r2, [r2, #0]
 8003900:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800391a:	e02c      	b.n	8003976 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d113      	bne.n	8003952 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	7812      	ldrb	r2, [r2, #0]
 8003936:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003950:	e011      	b.n	8003976 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003952:	f7fe fb95 	bl	8002080 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d803      	bhi.n	800396a <HAL_SPI_Transmit+0x1f4>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003968:	d102      	bne.n	8003970 <HAL_SPI_Transmit+0x1fa>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003974:	e026      	b.n	80039c4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1cd      	bne.n	800391c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	6839      	ldr	r1, [r7, #0]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fb91 	bl	80040ac <SPI_EndRxTxTransaction>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e000      	b.n	80039c4 <HAL_SPI_Transmit+0x24e>
  }

error:
 80039c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b088      	sub	sp, #32
 80039e2:	af02      	add	r7, sp, #8
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039fa:	d112      	bne.n	8003a22 <HAL_SPI_Receive+0x44>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10e      	bne.n	8003a22 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2204      	movs	r2, #4
 8003a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f8e9 	bl	8003bf0 <HAL_SPI_TransmitReceive>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	e0e2      	b.n	8003be8 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_SPI_Receive+0x52>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e0db      	b.n	8003be8 <HAL_SPI_Receive+0x20a>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a38:	f7fe fb22 	bl	8002080 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d002      	beq.n	8003a50 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a4e:	e0c2      	b.n	8003bd6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_SPI_Receive+0x7e>
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a60:	e0b9      	b.n	8003bd6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2204      	movs	r2, #4
 8003a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa8:	d107      	bne.n	8003aba <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d007      	beq.n	8003ad8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d162      	bne.n	8003ba6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ae0:	e02e      	b.n	8003b40 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d115      	bne.n	8003b1c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f103 020c 	add.w	r2, r3, #12
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b1a:	e011      	b.n	8003b40 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b1c:	f7fe fab0 	bl	8002080 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d803      	bhi.n	8003b34 <HAL_SPI_Receive+0x156>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b32:	d102      	bne.n	8003b3a <HAL_SPI_Receive+0x15c>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b3e:	e04a      	b.n	8003bd6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1cb      	bne.n	8003ae2 <HAL_SPI_Receive+0x104>
 8003b4a:	e031      	b.n	8003bb0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d113      	bne.n	8003b82 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	b292      	uxth	r2, r2
 8003b66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	1c9a      	adds	r2, r3, #2
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b80:	e011      	b.n	8003ba6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b82:	f7fe fa7d 	bl	8002080 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d803      	bhi.n	8003b9a <HAL_SPI_Receive+0x1bc>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b98:	d102      	bne.n	8003ba0 <HAL_SPI_Receive+0x1c2>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ba4:	e017      	b.n	8003bd6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1cd      	bne.n	8003b4c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	6839      	ldr	r1, [r7, #0]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fa27 	bl	8004008 <SPI_EndRxTransaction>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
 8003bd2:	e000      	b.n	8003bd6 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003bd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08c      	sub	sp, #48	; 0x30
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_SPI_TransmitReceive+0x26>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e18a      	b.n	8003f2c <HAL_SPI_TransmitReceive+0x33c>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c1e:	f7fe fa2f 	bl	8002080 <HAL_GetTick>
 8003c22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c34:	887b      	ldrh	r3, [r7, #2]
 8003c36:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d00f      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x70>
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c46:	d107      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d103      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x68>
 8003c50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d003      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c5e:	e15b      	b.n	8003f18 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x82>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x82>
 8003c6c:	887b      	ldrh	r3, [r7, #2]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c78:	e14e      	b.n	8003f18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d003      	beq.n	8003c8e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2205      	movs	r2, #5
 8003c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	887a      	ldrh	r2, [r7, #2]
 8003c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	887a      	ldrh	r2, [r7, #2]
 8003cb6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d007      	beq.n	8003ce2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cea:	d178      	bne.n	8003dde <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x10a>
 8003cf4:	8b7b      	ldrh	r3, [r7, #26]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d166      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	881a      	ldrh	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	1c9a      	adds	r2, r3, #2
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d1e:	e053      	b.n	8003dc8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d11b      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x176>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d016      	beq.n	8003d66 <HAL_SPI_TransmitReceive+0x176>
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d113      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	881a      	ldrh	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	1c9a      	adds	r2, r3, #2
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d119      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x1b8>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d014      	beq.n	8003da8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	1c9a      	adds	r2, r3, #2
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003da4:	2301      	movs	r3, #1
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003da8:	f7fe f96a 	bl	8002080 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d807      	bhi.n	8003dc8 <HAL_SPI_TransmitReceive+0x1d8>
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dbe:	d003      	beq.n	8003dc8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dc6:	e0a7      	b.n	8003f18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1a6      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x130>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1a1      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x130>
 8003ddc:	e07c      	b.n	8003ed8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_SPI_TransmitReceive+0x1fc>
 8003de6:	8b7b      	ldrh	r3, [r7, #26]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d16b      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e12:	e057      	b.n	8003ec4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d11c      	bne.n	8003e5c <HAL_SPI_TransmitReceive+0x26c>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d017      	beq.n	8003e5c <HAL_SPI_TransmitReceive+0x26c>
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d114      	bne.n	8003e5c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	7812      	ldrb	r2, [r2, #0]
 8003e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d119      	bne.n	8003e9e <HAL_SPI_TransmitReceive+0x2ae>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d014      	beq.n	8003e9e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e9e:	f7fe f8ef 	bl	8002080 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d803      	bhi.n	8003eb6 <HAL_SPI_TransmitReceive+0x2c6>
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb4:	d102      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x2cc>
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ec2:	e029      	b.n	8003f18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1a2      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x224>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d19d      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f8e5 	bl	80040ac <SPI_EndRxTxTransaction>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d006      	beq.n	8003ef6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ef4:	e010      	b.n	8003f18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	e000      	b.n	8003f18 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3730      	adds	r7, #48	; 0x30
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	4613      	mov	r3, r2
 8003f42:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f44:	e04c      	b.n	8003fe0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f4c:	d048      	beq.n	8003fe0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f4e:	f7fe f897 	bl	8002080 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d902      	bls.n	8003f64 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d13d      	bne.n	8003fe0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7c:	d111      	bne.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f86:	d004      	beq.n	8003f92 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f90:	d107      	bne.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003faa:	d10f      	bne.n	8003fcc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e00f      	b.n	8004000 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d1a3      	bne.n	8003f46 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401c:	d111      	bne.n	8004042 <SPI_EndRxTransaction+0x3a>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004026:	d004      	beq.n	8004032 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004030:	d107      	bne.n	8004042 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004040:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800404a:	d117      	bne.n	800407c <SPI_EndRxTransaction+0x74>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004054:	d112      	bne.n	800407c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2200      	movs	r2, #0
 800405e:	2101      	movs	r1, #1
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff ff67 	bl	8003f34 <SPI_WaitFlagStateUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01a      	beq.n	80040a2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	f043 0220 	orr.w	r2, r3, #32
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e013      	b.n	80040a4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2200      	movs	r2, #0
 8004084:	2180      	movs	r1, #128	; 0x80
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f7ff ff54 	bl	8003f34 <SPI_WaitFlagStateUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e000      	b.n	80040a4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2200      	movs	r2, #0
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f7ff ff36 	bl	8003f34 <SPI_WaitFlagStateUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	f043 0220 	orr.w	r2, r3, #32
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e000      	b.n	80040e0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e03f      	b.n	800417a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fd fe5a 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2224      	movs	r2, #36	; 0x24
 8004118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800412a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f90b 	bl	8004348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b088      	sub	sp, #32
 8004186:	af02      	add	r7, sp, #8
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	603b      	str	r3, [r7, #0]
 800418e:	4613      	mov	r3, r2
 8004190:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b20      	cmp	r3, #32
 80041a0:	f040 8083 	bne.w	80042aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_UART_Transmit+0x2e>
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e07b      	b.n	80042ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_UART_Transmit+0x40>
 80041be:	2302      	movs	r3, #2
 80041c0:	e074      	b.n	80042ac <HAL_UART_Transmit+0x12a>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2221      	movs	r2, #33	; 0x21
 80041d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80041d8:	f7fd ff52 	bl	8002080 <HAL_GetTick>
 80041dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	88fa      	ldrh	r2, [r7, #6]
 80041e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	88fa      	ldrh	r2, [r7, #6]
 80041e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041ea:	e042      	b.n	8004272 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004202:	d122      	bne.n	800424a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	2180      	movs	r1, #128	; 0x80
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f850 	bl	80042b4 <UART_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e046      	b.n	80042ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004230:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d103      	bne.n	8004242 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	3302      	adds	r3, #2
 800423e:	60bb      	str	r3, [r7, #8]
 8004240:	e017      	b.n	8004272 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3301      	adds	r3, #1
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	e013      	b.n	8004272 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2200      	movs	r2, #0
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f82d 	bl	80042b4 <UART_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e023      	b.n	80042ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	60ba      	str	r2, [r7, #8]
 800426a:	781a      	ldrb	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1b7      	bne.n	80041ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2200      	movs	r2, #0
 8004284:	2140      	movs	r1, #64	; 0x40
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f814 	bl	80042b4 <UART_WaitOnFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e00a      	b.n	80042ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e000      	b.n	80042ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
  }
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c4:	e02c      	b.n	8004320 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042cc:	d028      	beq.n	8004320 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042d4:	f7fd fed4 	bl	8002080 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d21d      	bcs.n	8004320 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e00f      	b.n	8004340 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	429a      	cmp	r2, r3
 800433c:	d0c3      	beq.n	80042c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004382:	f023 030c 	bic.w	r3, r3, #12
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	68f9      	ldr	r1, [r7, #12]
 800438c:	430b      	orrs	r3, r1
 800438e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a52      	ldr	r2, [pc, #328]	; (80044f4 <UART_SetConfig+0x1ac>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d14e      	bne.n	800444e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043b0:	f7ff f94e 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 80043b4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009a      	lsls	r2, r3, #2
 80043c0:	441a      	add	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043cc:	4a4a      	ldr	r2, [pc, #296]	; (80044f8 <UART_SetConfig+0x1b0>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	0119      	lsls	r1, r3, #4
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009a      	lsls	r2, r3, #2
 80043e0:	441a      	add	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043ec:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <UART_SetConfig+0x1b0>)
 80043ee:	fba3 0302 	umull	r0, r3, r3, r2
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	2064      	movs	r0, #100	; 0x64
 80043f6:	fb00 f303 	mul.w	r3, r0, r3
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	3332      	adds	r3, #50	; 0x32
 8004400:	4a3d      	ldr	r2, [pc, #244]	; (80044f8 <UART_SetConfig+0x1b0>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800440c:	4419      	add	r1, r3
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009a      	lsls	r2, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	fbb2 f2f3 	udiv	r2, r2, r3
 8004424:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <UART_SetConfig+0x1b0>)
 8004426:	fba3 0302 	umull	r0, r3, r3, r2
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2064      	movs	r0, #100	; 0x64
 800442e:	fb00 f303 	mul.w	r3, r0, r3
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	3332      	adds	r3, #50	; 0x32
 8004438:	4a2f      	ldr	r2, [pc, #188]	; (80044f8 <UART_SetConfig+0x1b0>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	440a      	add	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800444c:	e04d      	b.n	80044ea <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800444e:	f7ff f8eb 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8004452:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	009a      	lsls	r2, r3, #2
 800445e:	441a      	add	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	fbb2 f3f3 	udiv	r3, r2, r3
 800446a:	4a23      	ldr	r2, [pc, #140]	; (80044f8 <UART_SetConfig+0x1b0>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	0119      	lsls	r1, r3, #4
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	009a      	lsls	r2, r3, #2
 800447e:	441a      	add	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	fbb2 f2f3 	udiv	r2, r2, r3
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <UART_SetConfig+0x1b0>)
 800448c:	fba3 0302 	umull	r0, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	2064      	movs	r0, #100	; 0x64
 8004494:	fb00 f303 	mul.w	r3, r0, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	3332      	adds	r3, #50	; 0x32
 800449e:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <UART_SetConfig+0x1b0>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044aa:	4419      	add	r1, r3
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	009a      	lsls	r2, r3, #2
 80044b6:	441a      	add	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <UART_SetConfig+0x1b0>)
 80044c4:	fba3 0302 	umull	r0, r3, r3, r2
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	2064      	movs	r0, #100	; 0x64
 80044cc:	fb00 f303 	mul.w	r3, r0, r3
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	3332      	adds	r3, #50	; 0x32
 80044d6:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <UART_SetConfig+0x1b0>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	f003 020f 	and.w	r2, r3, #15
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	440a      	add	r2, r1
 80044e8:	609a      	str	r2, [r3, #8]
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40013800 	.word	0x40013800
 80044f8:	51eb851f 	.word	0x51eb851f

080044fc <__errno>:
 80044fc:	4b01      	ldr	r3, [pc, #4]	; (8004504 <__errno+0x8>)
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000034 	.word	0x20000034

08004508 <__libc_init_array>:
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	2500      	movs	r5, #0
 800450c:	4e0c      	ldr	r6, [pc, #48]	; (8004540 <__libc_init_array+0x38>)
 800450e:	4c0d      	ldr	r4, [pc, #52]	; (8004544 <__libc_init_array+0x3c>)
 8004510:	1ba4      	subs	r4, r4, r6
 8004512:	10a4      	asrs	r4, r4, #2
 8004514:	42a5      	cmp	r5, r4
 8004516:	d109      	bne.n	800452c <__libc_init_array+0x24>
 8004518:	f000 fc6a 	bl	8004df0 <_init>
 800451c:	2500      	movs	r5, #0
 800451e:	4e0a      	ldr	r6, [pc, #40]	; (8004548 <__libc_init_array+0x40>)
 8004520:	4c0a      	ldr	r4, [pc, #40]	; (800454c <__libc_init_array+0x44>)
 8004522:	1ba4      	subs	r4, r4, r6
 8004524:	10a4      	asrs	r4, r4, #2
 8004526:	42a5      	cmp	r5, r4
 8004528:	d105      	bne.n	8004536 <__libc_init_array+0x2e>
 800452a:	bd70      	pop	{r4, r5, r6, pc}
 800452c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004530:	4798      	blx	r3
 8004532:	3501      	adds	r5, #1
 8004534:	e7ee      	b.n	8004514 <__libc_init_array+0xc>
 8004536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800453a:	4798      	blx	r3
 800453c:	3501      	adds	r5, #1
 800453e:	e7f2      	b.n	8004526 <__libc_init_array+0x1e>
 8004540:	08005400 	.word	0x08005400
 8004544:	08005400 	.word	0x08005400
 8004548:	08005400 	.word	0x08005400
 800454c:	08005404 	.word	0x08005404

08004550 <memcpy>:
 8004550:	b510      	push	{r4, lr}
 8004552:	1e43      	subs	r3, r0, #1
 8004554:	440a      	add	r2, r1
 8004556:	4291      	cmp	r1, r2
 8004558:	d100      	bne.n	800455c <memcpy+0xc>
 800455a:	bd10      	pop	{r4, pc}
 800455c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004564:	e7f7      	b.n	8004556 <memcpy+0x6>

08004566 <memset>:
 8004566:	4603      	mov	r3, r0
 8004568:	4402      	add	r2, r0
 800456a:	4293      	cmp	r3, r2
 800456c:	d100      	bne.n	8004570 <memset+0xa>
 800456e:	4770      	bx	lr
 8004570:	f803 1b01 	strb.w	r1, [r3], #1
 8004574:	e7f9      	b.n	800456a <memset+0x4>
	...

08004578 <sniprintf>:
 8004578:	b40c      	push	{r2, r3}
 800457a:	b530      	push	{r4, r5, lr}
 800457c:	4b17      	ldr	r3, [pc, #92]	; (80045dc <sniprintf+0x64>)
 800457e:	1e0c      	subs	r4, r1, #0
 8004580:	b09d      	sub	sp, #116	; 0x74
 8004582:	681d      	ldr	r5, [r3, #0]
 8004584:	da08      	bge.n	8004598 <sniprintf+0x20>
 8004586:	238b      	movs	r3, #139	; 0x8b
 8004588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800458c:	602b      	str	r3, [r5, #0]
 800458e:	b01d      	add	sp, #116	; 0x74
 8004590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004594:	b002      	add	sp, #8
 8004596:	4770      	bx	lr
 8004598:	f44f 7302 	mov.w	r3, #520	; 0x208
 800459c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80045a0:	bf0c      	ite	eq
 80045a2:	4623      	moveq	r3, r4
 80045a4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80045a8:	9304      	str	r3, [sp, #16]
 80045aa:	9307      	str	r3, [sp, #28]
 80045ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045b0:	9002      	str	r0, [sp, #8]
 80045b2:	9006      	str	r0, [sp, #24]
 80045b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80045ba:	ab21      	add	r3, sp, #132	; 0x84
 80045bc:	a902      	add	r1, sp, #8
 80045be:	4628      	mov	r0, r5
 80045c0:	9301      	str	r3, [sp, #4]
 80045c2:	f000 f887 	bl	80046d4 <_svfiprintf_r>
 80045c6:	1c43      	adds	r3, r0, #1
 80045c8:	bfbc      	itt	lt
 80045ca:	238b      	movlt	r3, #139	; 0x8b
 80045cc:	602b      	strlt	r3, [r5, #0]
 80045ce:	2c00      	cmp	r4, #0
 80045d0:	d0dd      	beq.n	800458e <sniprintf+0x16>
 80045d2:	2200      	movs	r2, #0
 80045d4:	9b02      	ldr	r3, [sp, #8]
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	e7d9      	b.n	800458e <sniprintf+0x16>
 80045da:	bf00      	nop
 80045dc:	20000034 	.word	0x20000034

080045e0 <siprintf>:
 80045e0:	b40e      	push	{r1, r2, r3}
 80045e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045e6:	b500      	push	{lr}
 80045e8:	b09c      	sub	sp, #112	; 0x70
 80045ea:	ab1d      	add	r3, sp, #116	; 0x74
 80045ec:	9002      	str	r0, [sp, #8]
 80045ee:	9006      	str	r0, [sp, #24]
 80045f0:	9107      	str	r1, [sp, #28]
 80045f2:	9104      	str	r1, [sp, #16]
 80045f4:	4808      	ldr	r0, [pc, #32]	; (8004618 <siprintf+0x38>)
 80045f6:	4909      	ldr	r1, [pc, #36]	; (800461c <siprintf+0x3c>)
 80045f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80045fc:	9105      	str	r1, [sp, #20]
 80045fe:	6800      	ldr	r0, [r0, #0]
 8004600:	a902      	add	r1, sp, #8
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	f000 f866 	bl	80046d4 <_svfiprintf_r>
 8004608:	2200      	movs	r2, #0
 800460a:	9b02      	ldr	r3, [sp, #8]
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	b01c      	add	sp, #112	; 0x70
 8004610:	f85d eb04 	ldr.w	lr, [sp], #4
 8004614:	b003      	add	sp, #12
 8004616:	4770      	bx	lr
 8004618:	20000034 	.word	0x20000034
 800461c:	ffff0208 	.word	0xffff0208

08004620 <__ssputs_r>:
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	688e      	ldr	r6, [r1, #8]
 8004626:	4682      	mov	sl, r0
 8004628:	429e      	cmp	r6, r3
 800462a:	460c      	mov	r4, r1
 800462c:	4690      	mov	r8, r2
 800462e:	4699      	mov	r9, r3
 8004630:	d837      	bhi.n	80046a2 <__ssputs_r+0x82>
 8004632:	898a      	ldrh	r2, [r1, #12]
 8004634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004638:	d031      	beq.n	800469e <__ssputs_r+0x7e>
 800463a:	2302      	movs	r3, #2
 800463c:	6825      	ldr	r5, [r4, #0]
 800463e:	6909      	ldr	r1, [r1, #16]
 8004640:	1a6f      	subs	r7, r5, r1
 8004642:	6965      	ldr	r5, [r4, #20]
 8004644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004648:	fb95 f5f3 	sdiv	r5, r5, r3
 800464c:	f109 0301 	add.w	r3, r9, #1
 8004650:	443b      	add	r3, r7
 8004652:	429d      	cmp	r5, r3
 8004654:	bf38      	it	cc
 8004656:	461d      	movcc	r5, r3
 8004658:	0553      	lsls	r3, r2, #21
 800465a:	d530      	bpl.n	80046be <__ssputs_r+0x9e>
 800465c:	4629      	mov	r1, r5
 800465e:	f000 fb2d 	bl	8004cbc <_malloc_r>
 8004662:	4606      	mov	r6, r0
 8004664:	b950      	cbnz	r0, 800467c <__ssputs_r+0x5c>
 8004666:	230c      	movs	r3, #12
 8004668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800466c:	f8ca 3000 	str.w	r3, [sl]
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004676:	81a3      	strh	r3, [r4, #12]
 8004678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800467c:	463a      	mov	r2, r7
 800467e:	6921      	ldr	r1, [r4, #16]
 8004680:	f7ff ff66 	bl	8004550 <memcpy>
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800468a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468e:	81a3      	strh	r3, [r4, #12]
 8004690:	6126      	str	r6, [r4, #16]
 8004692:	443e      	add	r6, r7
 8004694:	6026      	str	r6, [r4, #0]
 8004696:	464e      	mov	r6, r9
 8004698:	6165      	str	r5, [r4, #20]
 800469a:	1bed      	subs	r5, r5, r7
 800469c:	60a5      	str	r5, [r4, #8]
 800469e:	454e      	cmp	r6, r9
 80046a0:	d900      	bls.n	80046a4 <__ssputs_r+0x84>
 80046a2:	464e      	mov	r6, r9
 80046a4:	4632      	mov	r2, r6
 80046a6:	4641      	mov	r1, r8
 80046a8:	6820      	ldr	r0, [r4, #0]
 80046aa:	f000 faa1 	bl	8004bf0 <memmove>
 80046ae:	68a3      	ldr	r3, [r4, #8]
 80046b0:	2000      	movs	r0, #0
 80046b2:	1b9b      	subs	r3, r3, r6
 80046b4:	60a3      	str	r3, [r4, #8]
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	441e      	add	r6, r3
 80046ba:	6026      	str	r6, [r4, #0]
 80046bc:	e7dc      	b.n	8004678 <__ssputs_r+0x58>
 80046be:	462a      	mov	r2, r5
 80046c0:	f000 fb56 	bl	8004d70 <_realloc_r>
 80046c4:	4606      	mov	r6, r0
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d1e2      	bne.n	8004690 <__ssputs_r+0x70>
 80046ca:	6921      	ldr	r1, [r4, #16]
 80046cc:	4650      	mov	r0, sl
 80046ce:	f000 faa9 	bl	8004c24 <_free_r>
 80046d2:	e7c8      	b.n	8004666 <__ssputs_r+0x46>

080046d4 <_svfiprintf_r>:
 80046d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d8:	461d      	mov	r5, r3
 80046da:	898b      	ldrh	r3, [r1, #12]
 80046dc:	b09d      	sub	sp, #116	; 0x74
 80046de:	061f      	lsls	r7, r3, #24
 80046e0:	4680      	mov	r8, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	4616      	mov	r6, r2
 80046e6:	d50f      	bpl.n	8004708 <_svfiprintf_r+0x34>
 80046e8:	690b      	ldr	r3, [r1, #16]
 80046ea:	b96b      	cbnz	r3, 8004708 <_svfiprintf_r+0x34>
 80046ec:	2140      	movs	r1, #64	; 0x40
 80046ee:	f000 fae5 	bl	8004cbc <_malloc_r>
 80046f2:	6020      	str	r0, [r4, #0]
 80046f4:	6120      	str	r0, [r4, #16]
 80046f6:	b928      	cbnz	r0, 8004704 <_svfiprintf_r+0x30>
 80046f8:	230c      	movs	r3, #12
 80046fa:	f8c8 3000 	str.w	r3, [r8]
 80046fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004702:	e0c8      	b.n	8004896 <_svfiprintf_r+0x1c2>
 8004704:	2340      	movs	r3, #64	; 0x40
 8004706:	6163      	str	r3, [r4, #20]
 8004708:	2300      	movs	r3, #0
 800470a:	9309      	str	r3, [sp, #36]	; 0x24
 800470c:	2320      	movs	r3, #32
 800470e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004712:	2330      	movs	r3, #48	; 0x30
 8004714:	f04f 0b01 	mov.w	fp, #1
 8004718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800471c:	9503      	str	r5, [sp, #12]
 800471e:	4637      	mov	r7, r6
 8004720:	463d      	mov	r5, r7
 8004722:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004726:	b10b      	cbz	r3, 800472c <_svfiprintf_r+0x58>
 8004728:	2b25      	cmp	r3, #37	; 0x25
 800472a:	d13e      	bne.n	80047aa <_svfiprintf_r+0xd6>
 800472c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004730:	d00b      	beq.n	800474a <_svfiprintf_r+0x76>
 8004732:	4653      	mov	r3, sl
 8004734:	4632      	mov	r2, r6
 8004736:	4621      	mov	r1, r4
 8004738:	4640      	mov	r0, r8
 800473a:	f7ff ff71 	bl	8004620 <__ssputs_r>
 800473e:	3001      	adds	r0, #1
 8004740:	f000 80a4 	beq.w	800488c <_svfiprintf_r+0x1b8>
 8004744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004746:	4453      	add	r3, sl
 8004748:	9309      	str	r3, [sp, #36]	; 0x24
 800474a:	783b      	ldrb	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 809d 	beq.w	800488c <_svfiprintf_r+0x1b8>
 8004752:	2300      	movs	r3, #0
 8004754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800475c:	9304      	str	r3, [sp, #16]
 800475e:	9307      	str	r3, [sp, #28]
 8004760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004764:	931a      	str	r3, [sp, #104]	; 0x68
 8004766:	462f      	mov	r7, r5
 8004768:	2205      	movs	r2, #5
 800476a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800476e:	4850      	ldr	r0, [pc, #320]	; (80048b0 <_svfiprintf_r+0x1dc>)
 8004770:	f000 fa30 	bl	8004bd4 <memchr>
 8004774:	9b04      	ldr	r3, [sp, #16]
 8004776:	b9d0      	cbnz	r0, 80047ae <_svfiprintf_r+0xda>
 8004778:	06d9      	lsls	r1, r3, #27
 800477a:	bf44      	itt	mi
 800477c:	2220      	movmi	r2, #32
 800477e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004782:	071a      	lsls	r2, r3, #28
 8004784:	bf44      	itt	mi
 8004786:	222b      	movmi	r2, #43	; 0x2b
 8004788:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800478c:	782a      	ldrb	r2, [r5, #0]
 800478e:	2a2a      	cmp	r2, #42	; 0x2a
 8004790:	d015      	beq.n	80047be <_svfiprintf_r+0xea>
 8004792:	462f      	mov	r7, r5
 8004794:	2000      	movs	r0, #0
 8004796:	250a      	movs	r5, #10
 8004798:	9a07      	ldr	r2, [sp, #28]
 800479a:	4639      	mov	r1, r7
 800479c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047a0:	3b30      	subs	r3, #48	; 0x30
 80047a2:	2b09      	cmp	r3, #9
 80047a4:	d94d      	bls.n	8004842 <_svfiprintf_r+0x16e>
 80047a6:	b1b8      	cbz	r0, 80047d8 <_svfiprintf_r+0x104>
 80047a8:	e00f      	b.n	80047ca <_svfiprintf_r+0xf6>
 80047aa:	462f      	mov	r7, r5
 80047ac:	e7b8      	b.n	8004720 <_svfiprintf_r+0x4c>
 80047ae:	4a40      	ldr	r2, [pc, #256]	; (80048b0 <_svfiprintf_r+0x1dc>)
 80047b0:	463d      	mov	r5, r7
 80047b2:	1a80      	subs	r0, r0, r2
 80047b4:	fa0b f000 	lsl.w	r0, fp, r0
 80047b8:	4318      	orrs	r0, r3
 80047ba:	9004      	str	r0, [sp, #16]
 80047bc:	e7d3      	b.n	8004766 <_svfiprintf_r+0x92>
 80047be:	9a03      	ldr	r2, [sp, #12]
 80047c0:	1d11      	adds	r1, r2, #4
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	9103      	str	r1, [sp, #12]
 80047c6:	2a00      	cmp	r2, #0
 80047c8:	db01      	blt.n	80047ce <_svfiprintf_r+0xfa>
 80047ca:	9207      	str	r2, [sp, #28]
 80047cc:	e004      	b.n	80047d8 <_svfiprintf_r+0x104>
 80047ce:	4252      	negs	r2, r2
 80047d0:	f043 0302 	orr.w	r3, r3, #2
 80047d4:	9207      	str	r2, [sp, #28]
 80047d6:	9304      	str	r3, [sp, #16]
 80047d8:	783b      	ldrb	r3, [r7, #0]
 80047da:	2b2e      	cmp	r3, #46	; 0x2e
 80047dc:	d10c      	bne.n	80047f8 <_svfiprintf_r+0x124>
 80047de:	787b      	ldrb	r3, [r7, #1]
 80047e0:	2b2a      	cmp	r3, #42	; 0x2a
 80047e2:	d133      	bne.n	800484c <_svfiprintf_r+0x178>
 80047e4:	9b03      	ldr	r3, [sp, #12]
 80047e6:	3702      	adds	r7, #2
 80047e8:	1d1a      	adds	r2, r3, #4
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	9203      	str	r2, [sp, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	bfb8      	it	lt
 80047f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80047f6:	9305      	str	r3, [sp, #20]
 80047f8:	4d2e      	ldr	r5, [pc, #184]	; (80048b4 <_svfiprintf_r+0x1e0>)
 80047fa:	2203      	movs	r2, #3
 80047fc:	7839      	ldrb	r1, [r7, #0]
 80047fe:	4628      	mov	r0, r5
 8004800:	f000 f9e8 	bl	8004bd4 <memchr>
 8004804:	b138      	cbz	r0, 8004816 <_svfiprintf_r+0x142>
 8004806:	2340      	movs	r3, #64	; 0x40
 8004808:	1b40      	subs	r0, r0, r5
 800480a:	fa03 f000 	lsl.w	r0, r3, r0
 800480e:	9b04      	ldr	r3, [sp, #16]
 8004810:	3701      	adds	r7, #1
 8004812:	4303      	orrs	r3, r0
 8004814:	9304      	str	r3, [sp, #16]
 8004816:	7839      	ldrb	r1, [r7, #0]
 8004818:	2206      	movs	r2, #6
 800481a:	4827      	ldr	r0, [pc, #156]	; (80048b8 <_svfiprintf_r+0x1e4>)
 800481c:	1c7e      	adds	r6, r7, #1
 800481e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004822:	f000 f9d7 	bl	8004bd4 <memchr>
 8004826:	2800      	cmp	r0, #0
 8004828:	d038      	beq.n	800489c <_svfiprintf_r+0x1c8>
 800482a:	4b24      	ldr	r3, [pc, #144]	; (80048bc <_svfiprintf_r+0x1e8>)
 800482c:	bb13      	cbnz	r3, 8004874 <_svfiprintf_r+0x1a0>
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	3307      	adds	r3, #7
 8004832:	f023 0307 	bic.w	r3, r3, #7
 8004836:	3308      	adds	r3, #8
 8004838:	9303      	str	r3, [sp, #12]
 800483a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800483c:	444b      	add	r3, r9
 800483e:	9309      	str	r3, [sp, #36]	; 0x24
 8004840:	e76d      	b.n	800471e <_svfiprintf_r+0x4a>
 8004842:	fb05 3202 	mla	r2, r5, r2, r3
 8004846:	2001      	movs	r0, #1
 8004848:	460f      	mov	r7, r1
 800484a:	e7a6      	b.n	800479a <_svfiprintf_r+0xc6>
 800484c:	2300      	movs	r3, #0
 800484e:	250a      	movs	r5, #10
 8004850:	4619      	mov	r1, r3
 8004852:	3701      	adds	r7, #1
 8004854:	9305      	str	r3, [sp, #20]
 8004856:	4638      	mov	r0, r7
 8004858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800485c:	3a30      	subs	r2, #48	; 0x30
 800485e:	2a09      	cmp	r2, #9
 8004860:	d903      	bls.n	800486a <_svfiprintf_r+0x196>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0c8      	beq.n	80047f8 <_svfiprintf_r+0x124>
 8004866:	9105      	str	r1, [sp, #20]
 8004868:	e7c6      	b.n	80047f8 <_svfiprintf_r+0x124>
 800486a:	fb05 2101 	mla	r1, r5, r1, r2
 800486e:	2301      	movs	r3, #1
 8004870:	4607      	mov	r7, r0
 8004872:	e7f0      	b.n	8004856 <_svfiprintf_r+0x182>
 8004874:	ab03      	add	r3, sp, #12
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	4622      	mov	r2, r4
 800487a:	4b11      	ldr	r3, [pc, #68]	; (80048c0 <_svfiprintf_r+0x1ec>)
 800487c:	a904      	add	r1, sp, #16
 800487e:	4640      	mov	r0, r8
 8004880:	f3af 8000 	nop.w
 8004884:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004888:	4681      	mov	r9, r0
 800488a:	d1d6      	bne.n	800483a <_svfiprintf_r+0x166>
 800488c:	89a3      	ldrh	r3, [r4, #12]
 800488e:	065b      	lsls	r3, r3, #25
 8004890:	f53f af35 	bmi.w	80046fe <_svfiprintf_r+0x2a>
 8004894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004896:	b01d      	add	sp, #116	; 0x74
 8004898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489c:	ab03      	add	r3, sp, #12
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	4622      	mov	r2, r4
 80048a2:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <_svfiprintf_r+0x1ec>)
 80048a4:	a904      	add	r1, sp, #16
 80048a6:	4640      	mov	r0, r8
 80048a8:	f000 f882 	bl	80049b0 <_printf_i>
 80048ac:	e7ea      	b.n	8004884 <_svfiprintf_r+0x1b0>
 80048ae:	bf00      	nop
 80048b0:	080053cc 	.word	0x080053cc
 80048b4:	080053d2 	.word	0x080053d2
 80048b8:	080053d6 	.word	0x080053d6
 80048bc:	00000000 	.word	0x00000000
 80048c0:	08004621 	.word	0x08004621

080048c4 <_printf_common>:
 80048c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c8:	4691      	mov	r9, r2
 80048ca:	461f      	mov	r7, r3
 80048cc:	688a      	ldr	r2, [r1, #8]
 80048ce:	690b      	ldr	r3, [r1, #16]
 80048d0:	4606      	mov	r6, r0
 80048d2:	4293      	cmp	r3, r2
 80048d4:	bfb8      	it	lt
 80048d6:	4613      	movlt	r3, r2
 80048d8:	f8c9 3000 	str.w	r3, [r9]
 80048dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048e0:	460c      	mov	r4, r1
 80048e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048e6:	b112      	cbz	r2, 80048ee <_printf_common+0x2a>
 80048e8:	3301      	adds	r3, #1
 80048ea:	f8c9 3000 	str.w	r3, [r9]
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	0699      	lsls	r1, r3, #26
 80048f2:	bf42      	ittt	mi
 80048f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048f8:	3302      	addmi	r3, #2
 80048fa:	f8c9 3000 	strmi.w	r3, [r9]
 80048fe:	6825      	ldr	r5, [r4, #0]
 8004900:	f015 0506 	ands.w	r5, r5, #6
 8004904:	d107      	bne.n	8004916 <_printf_common+0x52>
 8004906:	f104 0a19 	add.w	sl, r4, #25
 800490a:	68e3      	ldr	r3, [r4, #12]
 800490c:	f8d9 2000 	ldr.w	r2, [r9]
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	42ab      	cmp	r3, r5
 8004914:	dc29      	bgt.n	800496a <_printf_common+0xa6>
 8004916:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800491a:	6822      	ldr	r2, [r4, #0]
 800491c:	3300      	adds	r3, #0
 800491e:	bf18      	it	ne
 8004920:	2301      	movne	r3, #1
 8004922:	0692      	lsls	r2, r2, #26
 8004924:	d42e      	bmi.n	8004984 <_printf_common+0xc0>
 8004926:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800492a:	4639      	mov	r1, r7
 800492c:	4630      	mov	r0, r6
 800492e:	47c0      	blx	r8
 8004930:	3001      	adds	r0, #1
 8004932:	d021      	beq.n	8004978 <_printf_common+0xb4>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	68e5      	ldr	r5, [r4, #12]
 8004938:	f003 0306 	and.w	r3, r3, #6
 800493c:	2b04      	cmp	r3, #4
 800493e:	bf18      	it	ne
 8004940:	2500      	movne	r5, #0
 8004942:	f8d9 2000 	ldr.w	r2, [r9]
 8004946:	f04f 0900 	mov.w	r9, #0
 800494a:	bf08      	it	eq
 800494c:	1aad      	subeq	r5, r5, r2
 800494e:	68a3      	ldr	r3, [r4, #8]
 8004950:	6922      	ldr	r2, [r4, #16]
 8004952:	bf08      	it	eq
 8004954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004958:	4293      	cmp	r3, r2
 800495a:	bfc4      	itt	gt
 800495c:	1a9b      	subgt	r3, r3, r2
 800495e:	18ed      	addgt	r5, r5, r3
 8004960:	341a      	adds	r4, #26
 8004962:	454d      	cmp	r5, r9
 8004964:	d11a      	bne.n	800499c <_printf_common+0xd8>
 8004966:	2000      	movs	r0, #0
 8004968:	e008      	b.n	800497c <_printf_common+0xb8>
 800496a:	2301      	movs	r3, #1
 800496c:	4652      	mov	r2, sl
 800496e:	4639      	mov	r1, r7
 8004970:	4630      	mov	r0, r6
 8004972:	47c0      	blx	r8
 8004974:	3001      	adds	r0, #1
 8004976:	d103      	bne.n	8004980 <_printf_common+0xbc>
 8004978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800497c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004980:	3501      	adds	r5, #1
 8004982:	e7c2      	b.n	800490a <_printf_common+0x46>
 8004984:	2030      	movs	r0, #48	; 0x30
 8004986:	18e1      	adds	r1, r4, r3
 8004988:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004992:	4422      	add	r2, r4
 8004994:	3302      	adds	r3, #2
 8004996:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800499a:	e7c4      	b.n	8004926 <_printf_common+0x62>
 800499c:	2301      	movs	r3, #1
 800499e:	4622      	mov	r2, r4
 80049a0:	4639      	mov	r1, r7
 80049a2:	4630      	mov	r0, r6
 80049a4:	47c0      	blx	r8
 80049a6:	3001      	adds	r0, #1
 80049a8:	d0e6      	beq.n	8004978 <_printf_common+0xb4>
 80049aa:	f109 0901 	add.w	r9, r9, #1
 80049ae:	e7d8      	b.n	8004962 <_printf_common+0x9e>

080049b0 <_printf_i>:
 80049b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80049b8:	460c      	mov	r4, r1
 80049ba:	7e09      	ldrb	r1, [r1, #24]
 80049bc:	b085      	sub	sp, #20
 80049be:	296e      	cmp	r1, #110	; 0x6e
 80049c0:	4617      	mov	r7, r2
 80049c2:	4606      	mov	r6, r0
 80049c4:	4698      	mov	r8, r3
 80049c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049c8:	f000 80b3 	beq.w	8004b32 <_printf_i+0x182>
 80049cc:	d822      	bhi.n	8004a14 <_printf_i+0x64>
 80049ce:	2963      	cmp	r1, #99	; 0x63
 80049d0:	d036      	beq.n	8004a40 <_printf_i+0x90>
 80049d2:	d80a      	bhi.n	80049ea <_printf_i+0x3a>
 80049d4:	2900      	cmp	r1, #0
 80049d6:	f000 80b9 	beq.w	8004b4c <_printf_i+0x19c>
 80049da:	2958      	cmp	r1, #88	; 0x58
 80049dc:	f000 8083 	beq.w	8004ae6 <_printf_i+0x136>
 80049e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049e8:	e032      	b.n	8004a50 <_printf_i+0xa0>
 80049ea:	2964      	cmp	r1, #100	; 0x64
 80049ec:	d001      	beq.n	80049f2 <_printf_i+0x42>
 80049ee:	2969      	cmp	r1, #105	; 0x69
 80049f0:	d1f6      	bne.n	80049e0 <_printf_i+0x30>
 80049f2:	6820      	ldr	r0, [r4, #0]
 80049f4:	6813      	ldr	r3, [r2, #0]
 80049f6:	0605      	lsls	r5, r0, #24
 80049f8:	f103 0104 	add.w	r1, r3, #4
 80049fc:	d52a      	bpl.n	8004a54 <_printf_i+0xa4>
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6011      	str	r1, [r2, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	da03      	bge.n	8004a0e <_printf_i+0x5e>
 8004a06:	222d      	movs	r2, #45	; 0x2d
 8004a08:	425b      	negs	r3, r3
 8004a0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a0e:	486f      	ldr	r0, [pc, #444]	; (8004bcc <_printf_i+0x21c>)
 8004a10:	220a      	movs	r2, #10
 8004a12:	e039      	b.n	8004a88 <_printf_i+0xd8>
 8004a14:	2973      	cmp	r1, #115	; 0x73
 8004a16:	f000 809d 	beq.w	8004b54 <_printf_i+0x1a4>
 8004a1a:	d808      	bhi.n	8004a2e <_printf_i+0x7e>
 8004a1c:	296f      	cmp	r1, #111	; 0x6f
 8004a1e:	d020      	beq.n	8004a62 <_printf_i+0xb2>
 8004a20:	2970      	cmp	r1, #112	; 0x70
 8004a22:	d1dd      	bne.n	80049e0 <_printf_i+0x30>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	f043 0320 	orr.w	r3, r3, #32
 8004a2a:	6023      	str	r3, [r4, #0]
 8004a2c:	e003      	b.n	8004a36 <_printf_i+0x86>
 8004a2e:	2975      	cmp	r1, #117	; 0x75
 8004a30:	d017      	beq.n	8004a62 <_printf_i+0xb2>
 8004a32:	2978      	cmp	r1, #120	; 0x78
 8004a34:	d1d4      	bne.n	80049e0 <_printf_i+0x30>
 8004a36:	2378      	movs	r3, #120	; 0x78
 8004a38:	4865      	ldr	r0, [pc, #404]	; (8004bd0 <_printf_i+0x220>)
 8004a3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a3e:	e055      	b.n	8004aec <_printf_i+0x13c>
 8004a40:	6813      	ldr	r3, [r2, #0]
 8004a42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a46:	1d19      	adds	r1, r3, #4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6011      	str	r1, [r2, #0]
 8004a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a50:	2301      	movs	r3, #1
 8004a52:	e08c      	b.n	8004b6e <_printf_i+0x1be>
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a5a:	6011      	str	r1, [r2, #0]
 8004a5c:	bf18      	it	ne
 8004a5e:	b21b      	sxthne	r3, r3
 8004a60:	e7cf      	b.n	8004a02 <_printf_i+0x52>
 8004a62:	6813      	ldr	r3, [r2, #0]
 8004a64:	6825      	ldr	r5, [r4, #0]
 8004a66:	1d18      	adds	r0, r3, #4
 8004a68:	6010      	str	r0, [r2, #0]
 8004a6a:	0628      	lsls	r0, r5, #24
 8004a6c:	d501      	bpl.n	8004a72 <_printf_i+0xc2>
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	e002      	b.n	8004a78 <_printf_i+0xc8>
 8004a72:	0668      	lsls	r0, r5, #25
 8004a74:	d5fb      	bpl.n	8004a6e <_printf_i+0xbe>
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	296f      	cmp	r1, #111	; 0x6f
 8004a7a:	bf14      	ite	ne
 8004a7c:	220a      	movne	r2, #10
 8004a7e:	2208      	moveq	r2, #8
 8004a80:	4852      	ldr	r0, [pc, #328]	; (8004bcc <_printf_i+0x21c>)
 8004a82:	2100      	movs	r1, #0
 8004a84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a88:	6865      	ldr	r5, [r4, #4]
 8004a8a:	2d00      	cmp	r5, #0
 8004a8c:	60a5      	str	r5, [r4, #8]
 8004a8e:	f2c0 8095 	blt.w	8004bbc <_printf_i+0x20c>
 8004a92:	6821      	ldr	r1, [r4, #0]
 8004a94:	f021 0104 	bic.w	r1, r1, #4
 8004a98:	6021      	str	r1, [r4, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d13d      	bne.n	8004b1a <_printf_i+0x16a>
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	f040 808e 	bne.w	8004bc0 <_printf_i+0x210>
 8004aa4:	4665      	mov	r5, ip
 8004aa6:	2a08      	cmp	r2, #8
 8004aa8:	d10b      	bne.n	8004ac2 <_printf_i+0x112>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	07db      	lsls	r3, r3, #31
 8004aae:	d508      	bpl.n	8004ac2 <_printf_i+0x112>
 8004ab0:	6923      	ldr	r3, [r4, #16]
 8004ab2:	6862      	ldr	r2, [r4, #4]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	bfde      	ittt	le
 8004ab8:	2330      	movle	r3, #48	; 0x30
 8004aba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004abe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ac2:	ebac 0305 	sub.w	r3, ip, r5
 8004ac6:	6123      	str	r3, [r4, #16]
 8004ac8:	f8cd 8000 	str.w	r8, [sp]
 8004acc:	463b      	mov	r3, r7
 8004ace:	aa03      	add	r2, sp, #12
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7ff fef6 	bl	80048c4 <_printf_common>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d14d      	bne.n	8004b78 <_printf_i+0x1c8>
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ae0:	b005      	add	sp, #20
 8004ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ae6:	4839      	ldr	r0, [pc, #228]	; (8004bcc <_printf_i+0x21c>)
 8004ae8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004aec:	6813      	ldr	r3, [r2, #0]
 8004aee:	6821      	ldr	r1, [r4, #0]
 8004af0:	1d1d      	adds	r5, r3, #4
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6015      	str	r5, [r2, #0]
 8004af6:	060a      	lsls	r2, r1, #24
 8004af8:	d50b      	bpl.n	8004b12 <_printf_i+0x162>
 8004afa:	07ca      	lsls	r2, r1, #31
 8004afc:	bf44      	itt	mi
 8004afe:	f041 0120 	orrmi.w	r1, r1, #32
 8004b02:	6021      	strmi	r1, [r4, #0]
 8004b04:	b91b      	cbnz	r3, 8004b0e <_printf_i+0x15e>
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	f022 0220 	bic.w	r2, r2, #32
 8004b0c:	6022      	str	r2, [r4, #0]
 8004b0e:	2210      	movs	r2, #16
 8004b10:	e7b7      	b.n	8004a82 <_printf_i+0xd2>
 8004b12:	064d      	lsls	r5, r1, #25
 8004b14:	bf48      	it	mi
 8004b16:	b29b      	uxthmi	r3, r3
 8004b18:	e7ef      	b.n	8004afa <_printf_i+0x14a>
 8004b1a:	4665      	mov	r5, ip
 8004b1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b20:	fb02 3311 	mls	r3, r2, r1, r3
 8004b24:	5cc3      	ldrb	r3, [r0, r3]
 8004b26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	2900      	cmp	r1, #0
 8004b2e:	d1f5      	bne.n	8004b1c <_printf_i+0x16c>
 8004b30:	e7b9      	b.n	8004aa6 <_printf_i+0xf6>
 8004b32:	6813      	ldr	r3, [r2, #0]
 8004b34:	6825      	ldr	r5, [r4, #0]
 8004b36:	1d18      	adds	r0, r3, #4
 8004b38:	6961      	ldr	r1, [r4, #20]
 8004b3a:	6010      	str	r0, [r2, #0]
 8004b3c:	0628      	lsls	r0, r5, #24
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	d501      	bpl.n	8004b46 <_printf_i+0x196>
 8004b42:	6019      	str	r1, [r3, #0]
 8004b44:	e002      	b.n	8004b4c <_printf_i+0x19c>
 8004b46:	066a      	lsls	r2, r5, #25
 8004b48:	d5fb      	bpl.n	8004b42 <_printf_i+0x192>
 8004b4a:	8019      	strh	r1, [r3, #0]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	4665      	mov	r5, ip
 8004b50:	6123      	str	r3, [r4, #16]
 8004b52:	e7b9      	b.n	8004ac8 <_printf_i+0x118>
 8004b54:	6813      	ldr	r3, [r2, #0]
 8004b56:	1d19      	adds	r1, r3, #4
 8004b58:	6011      	str	r1, [r2, #0]
 8004b5a:	681d      	ldr	r5, [r3, #0]
 8004b5c:	6862      	ldr	r2, [r4, #4]
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4628      	mov	r0, r5
 8004b62:	f000 f837 	bl	8004bd4 <memchr>
 8004b66:	b108      	cbz	r0, 8004b6c <_printf_i+0x1bc>
 8004b68:	1b40      	subs	r0, r0, r5
 8004b6a:	6060      	str	r0, [r4, #4]
 8004b6c:	6863      	ldr	r3, [r4, #4]
 8004b6e:	6123      	str	r3, [r4, #16]
 8004b70:	2300      	movs	r3, #0
 8004b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b76:	e7a7      	b.n	8004ac8 <_printf_i+0x118>
 8004b78:	6923      	ldr	r3, [r4, #16]
 8004b7a:	462a      	mov	r2, r5
 8004b7c:	4639      	mov	r1, r7
 8004b7e:	4630      	mov	r0, r6
 8004b80:	47c0      	blx	r8
 8004b82:	3001      	adds	r0, #1
 8004b84:	d0aa      	beq.n	8004adc <_printf_i+0x12c>
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	079b      	lsls	r3, r3, #30
 8004b8a:	d413      	bmi.n	8004bb4 <_printf_i+0x204>
 8004b8c:	68e0      	ldr	r0, [r4, #12]
 8004b8e:	9b03      	ldr	r3, [sp, #12]
 8004b90:	4298      	cmp	r0, r3
 8004b92:	bfb8      	it	lt
 8004b94:	4618      	movlt	r0, r3
 8004b96:	e7a3      	b.n	8004ae0 <_printf_i+0x130>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	464a      	mov	r2, r9
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	47c0      	blx	r8
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	d09a      	beq.n	8004adc <_printf_i+0x12c>
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	68e3      	ldr	r3, [r4, #12]
 8004baa:	9a03      	ldr	r2, [sp, #12]
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	42ab      	cmp	r3, r5
 8004bb0:	dcf2      	bgt.n	8004b98 <_printf_i+0x1e8>
 8004bb2:	e7eb      	b.n	8004b8c <_printf_i+0x1dc>
 8004bb4:	2500      	movs	r5, #0
 8004bb6:	f104 0919 	add.w	r9, r4, #25
 8004bba:	e7f5      	b.n	8004ba8 <_printf_i+0x1f8>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1ac      	bne.n	8004b1a <_printf_i+0x16a>
 8004bc0:	7803      	ldrb	r3, [r0, #0]
 8004bc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bca:	e76c      	b.n	8004aa6 <_printf_i+0xf6>
 8004bcc:	080053dd 	.word	0x080053dd
 8004bd0:	080053ee 	.word	0x080053ee

08004bd4 <memchr>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	b2c9      	uxtb	r1, r1
 8004bd8:	4402      	add	r2, r0
 8004bda:	4290      	cmp	r0, r2
 8004bdc:	4603      	mov	r3, r0
 8004bde:	d101      	bne.n	8004be4 <memchr+0x10>
 8004be0:	2300      	movs	r3, #0
 8004be2:	e003      	b.n	8004bec <memchr+0x18>
 8004be4:	781c      	ldrb	r4, [r3, #0]
 8004be6:	3001      	adds	r0, #1
 8004be8:	428c      	cmp	r4, r1
 8004bea:	d1f6      	bne.n	8004bda <memchr+0x6>
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd10      	pop	{r4, pc}

08004bf0 <memmove>:
 8004bf0:	4288      	cmp	r0, r1
 8004bf2:	b510      	push	{r4, lr}
 8004bf4:	eb01 0302 	add.w	r3, r1, r2
 8004bf8:	d807      	bhi.n	8004c0a <memmove+0x1a>
 8004bfa:	1e42      	subs	r2, r0, #1
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	d00a      	beq.n	8004c16 <memmove+0x26>
 8004c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c04:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c08:	e7f8      	b.n	8004bfc <memmove+0xc>
 8004c0a:	4283      	cmp	r3, r0
 8004c0c:	d9f5      	bls.n	8004bfa <memmove+0xa>
 8004c0e:	1881      	adds	r1, r0, r2
 8004c10:	1ad2      	subs	r2, r2, r3
 8004c12:	42d3      	cmn	r3, r2
 8004c14:	d100      	bne.n	8004c18 <memmove+0x28>
 8004c16:	bd10      	pop	{r4, pc}
 8004c18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c1c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c20:	e7f7      	b.n	8004c12 <memmove+0x22>
	...

08004c24 <_free_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	4605      	mov	r5, r0
 8004c28:	2900      	cmp	r1, #0
 8004c2a:	d043      	beq.n	8004cb4 <_free_r+0x90>
 8004c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c30:	1f0c      	subs	r4, r1, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bfb8      	it	lt
 8004c36:	18e4      	addlt	r4, r4, r3
 8004c38:	f000 f8d0 	bl	8004ddc <__malloc_lock>
 8004c3c:	4a1e      	ldr	r2, [pc, #120]	; (8004cb8 <_free_r+0x94>)
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	4610      	mov	r0, r2
 8004c42:	b933      	cbnz	r3, 8004c52 <_free_r+0x2e>
 8004c44:	6063      	str	r3, [r4, #4]
 8004c46:	6014      	str	r4, [r2, #0]
 8004c48:	4628      	mov	r0, r5
 8004c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c4e:	f000 b8c6 	b.w	8004dde <__malloc_unlock>
 8004c52:	42a3      	cmp	r3, r4
 8004c54:	d90b      	bls.n	8004c6e <_free_r+0x4a>
 8004c56:	6821      	ldr	r1, [r4, #0]
 8004c58:	1862      	adds	r2, r4, r1
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	bf01      	itttt	eq
 8004c5e:	681a      	ldreq	r2, [r3, #0]
 8004c60:	685b      	ldreq	r3, [r3, #4]
 8004c62:	1852      	addeq	r2, r2, r1
 8004c64:	6022      	streq	r2, [r4, #0]
 8004c66:	6063      	str	r3, [r4, #4]
 8004c68:	6004      	str	r4, [r0, #0]
 8004c6a:	e7ed      	b.n	8004c48 <_free_r+0x24>
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	b10a      	cbz	r2, 8004c76 <_free_r+0x52>
 8004c72:	42a2      	cmp	r2, r4
 8004c74:	d9fa      	bls.n	8004c6c <_free_r+0x48>
 8004c76:	6819      	ldr	r1, [r3, #0]
 8004c78:	1858      	adds	r0, r3, r1
 8004c7a:	42a0      	cmp	r0, r4
 8004c7c:	d10b      	bne.n	8004c96 <_free_r+0x72>
 8004c7e:	6820      	ldr	r0, [r4, #0]
 8004c80:	4401      	add	r1, r0
 8004c82:	1858      	adds	r0, r3, r1
 8004c84:	4282      	cmp	r2, r0
 8004c86:	6019      	str	r1, [r3, #0]
 8004c88:	d1de      	bne.n	8004c48 <_free_r+0x24>
 8004c8a:	6810      	ldr	r0, [r2, #0]
 8004c8c:	6852      	ldr	r2, [r2, #4]
 8004c8e:	4401      	add	r1, r0
 8004c90:	6019      	str	r1, [r3, #0]
 8004c92:	605a      	str	r2, [r3, #4]
 8004c94:	e7d8      	b.n	8004c48 <_free_r+0x24>
 8004c96:	d902      	bls.n	8004c9e <_free_r+0x7a>
 8004c98:	230c      	movs	r3, #12
 8004c9a:	602b      	str	r3, [r5, #0]
 8004c9c:	e7d4      	b.n	8004c48 <_free_r+0x24>
 8004c9e:	6820      	ldr	r0, [r4, #0]
 8004ca0:	1821      	adds	r1, r4, r0
 8004ca2:	428a      	cmp	r2, r1
 8004ca4:	bf01      	itttt	eq
 8004ca6:	6811      	ldreq	r1, [r2, #0]
 8004ca8:	6852      	ldreq	r2, [r2, #4]
 8004caa:	1809      	addeq	r1, r1, r0
 8004cac:	6021      	streq	r1, [r4, #0]
 8004cae:	6062      	str	r2, [r4, #4]
 8004cb0:	605c      	str	r4, [r3, #4]
 8004cb2:	e7c9      	b.n	8004c48 <_free_r+0x24>
 8004cb4:	bd38      	pop	{r3, r4, r5, pc}
 8004cb6:	bf00      	nop
 8004cb8:	2000016c 	.word	0x2000016c

08004cbc <_malloc_r>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	1ccd      	adds	r5, r1, #3
 8004cc0:	f025 0503 	bic.w	r5, r5, #3
 8004cc4:	3508      	adds	r5, #8
 8004cc6:	2d0c      	cmp	r5, #12
 8004cc8:	bf38      	it	cc
 8004cca:	250c      	movcc	r5, #12
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	4606      	mov	r6, r0
 8004cd0:	db01      	blt.n	8004cd6 <_malloc_r+0x1a>
 8004cd2:	42a9      	cmp	r1, r5
 8004cd4:	d903      	bls.n	8004cde <_malloc_r+0x22>
 8004cd6:	230c      	movs	r3, #12
 8004cd8:	6033      	str	r3, [r6, #0]
 8004cda:	2000      	movs	r0, #0
 8004cdc:	bd70      	pop	{r4, r5, r6, pc}
 8004cde:	f000 f87d 	bl	8004ddc <__malloc_lock>
 8004ce2:	4a21      	ldr	r2, [pc, #132]	; (8004d68 <_malloc_r+0xac>)
 8004ce4:	6814      	ldr	r4, [r2, #0]
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	b991      	cbnz	r1, 8004d10 <_malloc_r+0x54>
 8004cea:	4c20      	ldr	r4, [pc, #128]	; (8004d6c <_malloc_r+0xb0>)
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	b91b      	cbnz	r3, 8004cf8 <_malloc_r+0x3c>
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f000 f863 	bl	8004dbc <_sbrk_r>
 8004cf6:	6020      	str	r0, [r4, #0]
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f000 f85e 	bl	8004dbc <_sbrk_r>
 8004d00:	1c43      	adds	r3, r0, #1
 8004d02:	d124      	bne.n	8004d4e <_malloc_r+0x92>
 8004d04:	230c      	movs	r3, #12
 8004d06:	4630      	mov	r0, r6
 8004d08:	6033      	str	r3, [r6, #0]
 8004d0a:	f000 f868 	bl	8004dde <__malloc_unlock>
 8004d0e:	e7e4      	b.n	8004cda <_malloc_r+0x1e>
 8004d10:	680b      	ldr	r3, [r1, #0]
 8004d12:	1b5b      	subs	r3, r3, r5
 8004d14:	d418      	bmi.n	8004d48 <_malloc_r+0x8c>
 8004d16:	2b0b      	cmp	r3, #11
 8004d18:	d90f      	bls.n	8004d3a <_malloc_r+0x7e>
 8004d1a:	600b      	str	r3, [r1, #0]
 8004d1c:	18cc      	adds	r4, r1, r3
 8004d1e:	50cd      	str	r5, [r1, r3]
 8004d20:	4630      	mov	r0, r6
 8004d22:	f000 f85c 	bl	8004dde <__malloc_unlock>
 8004d26:	f104 000b 	add.w	r0, r4, #11
 8004d2a:	1d23      	adds	r3, r4, #4
 8004d2c:	f020 0007 	bic.w	r0, r0, #7
 8004d30:	1ac3      	subs	r3, r0, r3
 8004d32:	d0d3      	beq.n	8004cdc <_malloc_r+0x20>
 8004d34:	425a      	negs	r2, r3
 8004d36:	50e2      	str	r2, [r4, r3]
 8004d38:	e7d0      	b.n	8004cdc <_malloc_r+0x20>
 8004d3a:	684b      	ldr	r3, [r1, #4]
 8004d3c:	428c      	cmp	r4, r1
 8004d3e:	bf16      	itet	ne
 8004d40:	6063      	strne	r3, [r4, #4]
 8004d42:	6013      	streq	r3, [r2, #0]
 8004d44:	460c      	movne	r4, r1
 8004d46:	e7eb      	b.n	8004d20 <_malloc_r+0x64>
 8004d48:	460c      	mov	r4, r1
 8004d4a:	6849      	ldr	r1, [r1, #4]
 8004d4c:	e7cc      	b.n	8004ce8 <_malloc_r+0x2c>
 8004d4e:	1cc4      	adds	r4, r0, #3
 8004d50:	f024 0403 	bic.w	r4, r4, #3
 8004d54:	42a0      	cmp	r0, r4
 8004d56:	d005      	beq.n	8004d64 <_malloc_r+0xa8>
 8004d58:	1a21      	subs	r1, r4, r0
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f000 f82e 	bl	8004dbc <_sbrk_r>
 8004d60:	3001      	adds	r0, #1
 8004d62:	d0cf      	beq.n	8004d04 <_malloc_r+0x48>
 8004d64:	6025      	str	r5, [r4, #0]
 8004d66:	e7db      	b.n	8004d20 <_malloc_r+0x64>
 8004d68:	2000016c 	.word	0x2000016c
 8004d6c:	20000170 	.word	0x20000170

08004d70 <_realloc_r>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	4607      	mov	r7, r0
 8004d74:	4614      	mov	r4, r2
 8004d76:	460e      	mov	r6, r1
 8004d78:	b921      	cbnz	r1, 8004d84 <_realloc_r+0x14>
 8004d7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d7e:	4611      	mov	r1, r2
 8004d80:	f7ff bf9c 	b.w	8004cbc <_malloc_r>
 8004d84:	b922      	cbnz	r2, 8004d90 <_realloc_r+0x20>
 8004d86:	f7ff ff4d 	bl	8004c24 <_free_r>
 8004d8a:	4625      	mov	r5, r4
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d90:	f000 f826 	bl	8004de0 <_malloc_usable_size_r>
 8004d94:	42a0      	cmp	r0, r4
 8004d96:	d20f      	bcs.n	8004db8 <_realloc_r+0x48>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4638      	mov	r0, r7
 8004d9c:	f7ff ff8e 	bl	8004cbc <_malloc_r>
 8004da0:	4605      	mov	r5, r0
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d0f2      	beq.n	8004d8c <_realloc_r+0x1c>
 8004da6:	4631      	mov	r1, r6
 8004da8:	4622      	mov	r2, r4
 8004daa:	f7ff fbd1 	bl	8004550 <memcpy>
 8004dae:	4631      	mov	r1, r6
 8004db0:	4638      	mov	r0, r7
 8004db2:	f7ff ff37 	bl	8004c24 <_free_r>
 8004db6:	e7e9      	b.n	8004d8c <_realloc_r+0x1c>
 8004db8:	4635      	mov	r5, r6
 8004dba:	e7e7      	b.n	8004d8c <_realloc_r+0x1c>

08004dbc <_sbrk_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	4c05      	ldr	r4, [pc, #20]	; (8004dd8 <_sbrk_r+0x1c>)
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	f7fd f87c 	bl	8001ec4 <_sbrk>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d102      	bne.n	8004dd6 <_sbrk_r+0x1a>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	b103      	cbz	r3, 8004dd6 <_sbrk_r+0x1a>
 8004dd4:	602b      	str	r3, [r5, #0]
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	20000300 	.word	0x20000300

08004ddc <__malloc_lock>:
 8004ddc:	4770      	bx	lr

08004dde <__malloc_unlock>:
 8004dde:	4770      	bx	lr

08004de0 <_malloc_usable_size_r>:
 8004de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de4:	1f18      	subs	r0, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bfbc      	itt	lt
 8004dea:	580b      	ldrlt	r3, [r1, r0]
 8004dec:	18c0      	addlt	r0, r0, r3
 8004dee:	4770      	bx	lr

08004df0 <_init>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	bf00      	nop
 8004df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df6:	bc08      	pop	{r3}
 8004df8:	469e      	mov	lr, r3
 8004dfa:	4770      	bx	lr

08004dfc <_fini>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	bf00      	nop
 8004e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e02:	bc08      	pop	{r3}
 8004e04:	469e      	mov	lr, r3
 8004e06:	4770      	bx	lr
